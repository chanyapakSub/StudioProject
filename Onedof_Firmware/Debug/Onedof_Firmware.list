
Onedof_Firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5d4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a7ac  0800a7ac  0000b7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7ec  0800a7ec  0000c018  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7ec  0800a7ec  0000b7ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7f4  0800a7f4  0000c018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7f4  0800a7f4  0000b7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7f8  0800a7f8  0000b7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  0800a7fc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000eb4  20000018  0800a814  0000c018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ecc  0800a814  0000cecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e579  00000000  00000000  0000c048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003947  00000000  00000000  0002a5c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016d0  00000000  00000000  0002df08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011b9  00000000  00000000  0002f5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029cc5  00000000  00000000  00030791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d84a  00000000  00000000  0005a456  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115304  00000000  00000000  00077ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0018cfa4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006370  00000000  00000000  0018cfe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00193358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a794 	.word	0x0800a794

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	0800a794 	.word	0x0800a794

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2201      	movs	r2, #1
 8000eee:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	2000050c 	.word	0x2000050c

08000f24 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <modbus_3t5_Timeout+0x1c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	755a      	strb	r2, [r3, #21]

}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	2000050c 	.word	0x2000050c

08000f44 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f008 fb2d 	bl	80095ac <HAL_UART_GetError>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b20      	cmp	r3, #32
 8000f56:	d101      	bne.n	8000f5c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f58:	f7ff ffc4 	bl	8000ee4 <modbus_1t5_Timeout>

	}
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f6e:	4a25      	ldr	r2, [pc, #148]	@ (8001004 <Modbus_init+0xa0>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <Modbus_init+0xa0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <Modbus_init+0xa4>)
 8000f82:	210e      	movs	r1, #14
 8000f84:	4618      	mov	r0, r3
 8000f86:	f006 fdd5 	bl	8007b34 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4618      	mov	r0, r3
 8000f92:	f008 fab5 	bl	8009500 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f008 facc 	bl	8009538 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	@ (800100c <Modbus_init+0xa8>)
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f007 fe13 	bl	8008bd4 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <Modbus_init+0xa0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <Modbus_init+0xa0>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <Modbus_init+0xa0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fc0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f007 febb 	bl	8008d48 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <Modbus_init+0xa0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d10c      	bne.n	8000ffc <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <Modbus_init+0xa0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 fd75 	bl	8006ad8 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fee:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <Modbus_init+0xa0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f005 ffce 	bl	8006f98 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000050c 	.word	0x2000050c
 8001008:	08000f25 	.word	0x08000f25
 800100c:	08000f45 	.word	0x08000f45

08001010 <ADC_init>:
 *      Author: naker
 */

#include "adc.h"

void ADC_init(ADC_HandleTypeDef* hadc, ADC* adc){
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	6039      	str	r1, [r7, #0]
	HAL_ADC_Start_DMA(hadc, adc -> adc_buffer, 50);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	2232      	movs	r2, #50	@ 0x32
 800101e:	4619      	mov	r1, r3
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f002 fc23 	bl	800386c <HAL_ADC_Start_DMA>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <Update_adc>:

uint32_t Update_adc(ADC* adc){
 800102e:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	uint64_t sum_adc = 0;
 8001038:	f04f 0200 	mov.w	r2, #0
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8001044:	2300      	movs	r3, #0
 8001046:	73fb      	strb	r3, [r7, #15]
 8001048:	e011      	b.n	800106e <Update_adc+0x40>
		sum_adc += adc -> adc_buffer[i];
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001052:	2200      	movs	r2, #0
 8001054:	461c      	mov	r4, r3
 8001056:	4615      	mov	r5, r2
 8001058:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800105c:	eb12 0804 	adds.w	r8, r2, r4
 8001060:	eb43 0905 	adc.w	r9, r3, r5
 8001064:	e9c7 8904 	strd	r8, r9, [r7, #16]
	for (uint8_t i = 0; i < 50; i++){
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	3301      	adds	r3, #1
 800106c:	73fb      	strb	r3, [r7, #15]
 800106e:	7bfb      	ldrb	r3, [r7, #15]
 8001070:	2b31      	cmp	r3, #49	@ 0x31
 8001072:	d9ea      	bls.n	800104a <Update_adc+0x1c>
	}
	return adc -> adc_avg = sum_adc / 50;
 8001074:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001078:	f04f 0232 	mov.w	r2, #50	@ 0x32
 800107c:	f04f 0300 	mov.w	r3, #0
 8001080:	f7ff fdb8 	bl	8000bf4 <__aeabi_uldivmod>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
}
 8001094:	4618      	mov	r0, r3
 8001096:	3718      	adds	r7, #24
 8001098:	46bd      	mov	sp, r7
 800109a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080010a0 <Update_joy>:
 *      Author: naker
 */

#include "joy.h"

void Update_joy(JOY *joy){
 80010a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010a4:	b084      	sub	sp, #16
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
	uint8_t s_1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80010aa:	2120      	movs	r1, #32
 80010ac:	4835      	ldr	r0, [pc, #212]	@ (8001184 <Update_joy+0xe4>)
 80010ae:	f004 fbc7 	bl	8005840 <HAL_GPIO_ReadPin>
 80010b2:	4603      	mov	r3, r0
 80010b4:	73fb      	strb	r3, [r7, #15]
	uint8_t s_2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80010b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010be:	f004 fbbf 	bl	8005840 <HAL_GPIO_ReadPin>
 80010c2:	4603      	mov	r3, r0
 80010c4:	73bb      	strb	r3, [r7, #14]
	uint8_t s_3 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_4);
 80010c6:	2110      	movs	r1, #16
 80010c8:	482f      	ldr	r0, [pc, #188]	@ (8001188 <Update_joy+0xe8>)
 80010ca:	f004 fbb9 	bl	8005840 <HAL_GPIO_ReadPin>
 80010ce:	4603      	mov	r3, r0
 80010d0:	737b      	strb	r3, [r7, #13]
	uint8_t s_4 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 80010d2:	2120      	movs	r1, #32
 80010d4:	482c      	ldr	r0, [pc, #176]	@ (8001188 <Update_joy+0xe8>)
 80010d6:	f004 fbb3 	bl	8005840 <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	733b      	strb	r3, [r7, #12]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d008      	beq.n	80010f6 <Update_joy+0x56>
 80010e4:	7bbb      	ldrb	r3, [r7, #14]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <Update_joy+0x56>
 80010ea:	7b7b      	ldrb	r3, [r7, #13]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d002      	beq.n	80010f6 <Update_joy+0x56>
 80010f0:	7b3b      	ldrb	r3, [r7, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d133      	bne.n	800115e <Update_joy+0xbe>
		static uint8_t is_first = 1;
		static uint64_t timestamp = 0;
		if(is_first){
 80010f6:	4b25      	ldr	r3, [pc, #148]	@ (800118c <Update_joy+0xec>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00c      	beq.n	8001118 <Update_joy+0x78>
			timestamp = HAL_GetTick() + 50;
 80010fe:	f001 ffad 	bl	800305c <HAL_GetTick>
 8001102:	4603      	mov	r3, r0
 8001104:	3332      	adds	r3, #50	@ 0x32
 8001106:	2200      	movs	r2, #0
 8001108:	469a      	mov	sl, r3
 800110a:	4693      	mov	fp, r2
 800110c:	4b20      	ldr	r3, [pc, #128]	@ (8001190 <Update_joy+0xf0>)
 800110e:	e9c3 ab00 	strd	sl, fp, [r3]
			is_first = 0;
 8001112:	4b1e      	ldr	r3, [pc, #120]	@ (800118c <Update_joy+0xec>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
		}
		if (HAL_GetTick() > timestamp){
 8001118:	f001 ffa0 	bl	800305c <HAL_GetTick>
 800111c:	4603      	mov	r3, r0
 800111e:	2200      	movs	r2, #0
 8001120:	461c      	mov	r4, r3
 8001122:	4615      	mov	r5, r2
 8001124:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <Update_joy+0xf0>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	42a2      	cmp	r2, r4
 800112c:	41ab      	sbcs	r3, r5
 800112e:	d223      	bcs.n	8001178 <Update_joy+0xd8>
			timestamp = HAL_GetTick() + 50;
 8001130:	f001 ff94 	bl	800305c <HAL_GetTick>
 8001134:	4603      	mov	r3, r0
 8001136:	3332      	adds	r3, #50	@ 0x32
 8001138:	2200      	movs	r2, #0
 800113a:	4698      	mov	r8, r3
 800113c:	4691      	mov	r9, r2
 800113e:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <Update_joy+0xf0>)
 8001140:	e9c3 8900 	strd	r8, r9, [r3]
			joy -> s_1 = s_1;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	7bfa      	ldrb	r2, [r7, #15]
 8001148:	701a      	strb	r2, [r3, #0]
			joy -> s_2 = s_2;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	7bba      	ldrb	r2, [r7, #14]
 800114e:	705a      	strb	r2, [r3, #1]
			joy -> s_3 = s_3;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	7b7a      	ldrb	r2, [r7, #13]
 8001154:	709a      	strb	r2, [r3, #2]
			joy -> s_4 = s_4;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7b3a      	ldrb	r2, [r7, #12]
 800115a:	70da      	strb	r2, [r3, #3]
	if(!s_1 || !s_2 || !s_3 || !s_4){
 800115c:	e00c      	b.n	8001178 <Update_joy+0xd8>
		}
	}else{
		joy -> s_1 = 1;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
		joy -> s_2 = 1;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	705a      	strb	r2, [r3, #1]
		joy -> s_3 = 1;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2201      	movs	r2, #1
 800116e:	709a      	strb	r2, [r3, #2]
		joy -> s_4 = 1;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	70da      	strb	r2, [r3, #3]
	}
}
 8001176:	e000      	b.n	800117a <Update_joy+0xda>
	if(!s_1 || !s_2 || !s_3 || !s_4){
 8001178:	bf00      	nop
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001184:	48000400 	.word	0x48000400
 8001188:	48000800 	.word	0x48000800
 800118c:	20000000 	.word	0x20000000
 8001190:	20000510 	.word	0x20000510

08001194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001198:	b082      	sub	sp, #8
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800119c:	f001 fef9 	bl	8002f92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011a0:	f000 f8cc 	bl	800133c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011a4:	f000 fbe6 	bl	8001974 <MX_GPIO_Init>
  MX_DMA_Init();
 80011a8:	f000 fbaa 	bl	8001900 <MX_DMA_Init>
  MX_TIM1_Init();
 80011ac:	f000 f988 	bl	80014c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011b0:	f000 fa36 	bl	8001620 <MX_TIM3_Init>
  MX_TIM4_Init();
 80011b4:	f000 fa82 	bl	80016bc <MX_TIM4_Init>
  MX_ADC1_Init();
 80011b8:	f000 f90a 	bl	80013d0 <MX_ADC1_Init>
  MX_TIM5_Init();
 80011bc:	f000 fad4 	bl	8001768 <MX_TIM5_Init>
  MX_TIM16_Init();
 80011c0:	f000 fb20 	bl	8001804 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 80011c4:	f000 fb4e 	bl	8001864 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //Modbus setting
  hmodbus.huart = &huart2;
 80011c8:	4b44      	ldr	r3, [pc, #272]	@ (80012dc <main+0x148>)
 80011ca:	4a45      	ldr	r2, [pc, #276]	@ (80012e0 <main+0x14c>)
 80011cc:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 80011ce:	4b43      	ldr	r3, [pc, #268]	@ (80012dc <main+0x148>)
 80011d0:	4a44      	ldr	r2, [pc, #272]	@ (80012e4 <main+0x150>)
 80011d2:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80011d4:	4b41      	ldr	r3, [pc, #260]	@ (80012dc <main+0x148>)
 80011d6:	2215      	movs	r2, #21
 80011d8:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 80011da:	4b40      	ldr	r3, [pc, #256]	@ (80012dc <main+0x148>)
 80011dc:	22c8      	movs	r2, #200	@ 0xc8
 80011de:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 80011e0:	4941      	ldr	r1, [pc, #260]	@ (80012e8 <main+0x154>)
 80011e2:	483e      	ldr	r0, [pc, #248]	@ (80012dc <main+0x148>)
 80011e4:	f7ff febe 	bl	8000f64 <Modbus_init>
  //Update MODBUS timer
  HAL_TIM_Base_Start_IT(&htim5);
 80011e8:	4840      	ldr	r0, [pc, #256]	@ (80012ec <main+0x158>)
 80011ea:	f005 fc75 	bl	8006ad8 <HAL_TIM_Base_Start_IT>

  //Update command timer
  HAL_TIM_Base_Start_IT(&htim3);
 80011ee:	4840      	ldr	r0, [pc, #256]	@ (80012f0 <main+0x15c>)
 80011f0:	f005 fc72 	bl	8006ad8 <HAL_TIM_Base_Start_IT>

  //PWM generator
  HAL_TIM_Base_Start(&htim1);
 80011f4:	483f      	ldr	r0, [pc, #252]	@ (80012f4 <main+0x160>)
 80011f6:	f005 fbff 	bl	80069f8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011fa:	2100      	movs	r1, #0
 80011fc:	483d      	ldr	r0, [pc, #244]	@ (80012f4 <main+0x160>)
 80011fe:	f005 fd51 	bl	8006ca4 <HAL_TIM_PWM_Start>

  //Encoder reader
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8001202:	213c      	movs	r1, #60	@ 0x3c
 8001204:	483c      	ldr	r0, [pc, #240]	@ (80012f8 <main+0x164>)
 8001206:	f006 f809 	bl	800721c <HAL_TIM_Encoder_Start>
  QEI_init(&encoder, 8192, 8000, 65536);
 800120a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800120e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001212:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001216:	4839      	ldr	r0, [pc, #228]	@ (80012fc <main+0x168>)
 8001218:	f001 f8ab 	bl	8002372 <QEI_init>

  //Current reader
  ADC_init(&hadc1, &current_sensor);
 800121c:	4938      	ldr	r1, [pc, #224]	@ (8001300 <main+0x16c>)
 800121e:	4839      	ldr	r0, [pc, #228]	@ (8001304 <main+0x170>)
 8001220:	f7ff fef6 	bl	8001010 <ADC_init>

  //Position PID
  PID_init(&p_pid, p_kp, p_ki, p_kd, 0.001);
 8001224:	4b38      	ldr	r3, [pc, #224]	@ (8001308 <main+0x174>)
 8001226:	edd3 7a00 	vldr	s15, [r3]
 800122a:	4b38      	ldr	r3, [pc, #224]	@ (800130c <main+0x178>)
 800122c:	ed93 7a00 	vldr	s14, [r3]
 8001230:	4b37      	ldr	r3, [pc, #220]	@ (8001310 <main+0x17c>)
 8001232:	edd3 6a00 	vldr	s13, [r3]
 8001236:	eddf 1a37 	vldr	s3, [pc, #220]	@ 8001314 <main+0x180>
 800123a:	eeb0 1a66 	vmov.f32	s2, s13
 800123e:	eef0 0a47 	vmov.f32	s1, s14
 8001242:	eeb0 0a67 	vmov.f32	s0, s15
 8001246:	4834      	ldr	r0, [pc, #208]	@ (8001318 <main+0x184>)
 8001248:	f000 fe8e 	bl	8001f68 <PID_init>
  PID_init(&v_pid, v_kp, v_ki, v_kd, 0.000125);
 800124c:	4b33      	ldr	r3, [pc, #204]	@ (800131c <main+0x188>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	4b33      	ldr	r3, [pc, #204]	@ (8001320 <main+0x18c>)
 8001254:	ed93 7a00 	vldr	s14, [r3]
 8001258:	4b32      	ldr	r3, [pc, #200]	@ (8001324 <main+0x190>)
 800125a:	edd3 6a00 	vldr	s13, [r3]
 800125e:	eddf 1a32 	vldr	s3, [pc, #200]	@ 8001328 <main+0x194>
 8001262:	eeb0 1a66 	vmov.f32	s2, s13
 8001266:	eef0 0a47 	vmov.f32	s1, s14
 800126a:	eeb0 0a67 	vmov.f32	s0, s15
 800126e:	482f      	ldr	r0, [pc, #188]	@ (800132c <main+0x198>)
 8001270:	f000 fe7a 	bl	8001f68 <PID_init>
//	  registerFrame[0x10].U16 = state;  //Z-axis Moving Status(0x10)
//	  registerFrame[0x11].U16 = encoder.mm;	//Z-axis Actual Position(0x11)
//	  registerFrame[0x12].U16 = encoder.mmps;  //Z-axis Actual Speed (0x12)
//	  registerFrame[0x13].U16 = encoder.mmpss;  //Z-axis Acceleration(0x13)    //////ความเร่งต้องเปลี่ยน/////
//	  registerFrame[0x40].U16 = encoder.rpm;  //X-axis Actual Position(0x40)
	  sensor[0] = __HAL_TIM_GET_COUNTER(&htim4);
 8001274:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <main+0x164>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127a:	2200      	movs	r2, #0
 800127c:	461c      	mov	r4, r3
 800127e:	4615      	mov	r5, r2
 8001280:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <main+0x19c>)
 8001282:	e9c3 4500 	strd	r4, r5, [r3]
	  sensor[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12);
 8001286:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800128a:	482a      	ldr	r0, [pc, #168]	@ (8001334 <main+0x1a0>)
 800128c:	f004 fad8 	bl	8005840 <HAL_GPIO_ReadPin>
 8001290:	4603      	mov	r3, r0
 8001292:	b2db      	uxtb	r3, r3
 8001294:	2200      	movs	r2, #0
 8001296:	4698      	mov	r8, r3
 8001298:	4691      	mov	r9, r2
 800129a:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <main+0x19c>)
 800129c:	e9c3 8902 	strd	r8, r9, [r3, #8]
	  sensor[2] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6);
 80012a0:	2140      	movs	r1, #64	@ 0x40
 80012a2:	4825      	ldr	r0, [pc, #148]	@ (8001338 <main+0x1a4>)
 80012a4:	f004 facc 	bl	8005840 <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2200      	movs	r2, #0
 80012ae:	469a      	mov	sl, r3
 80012b0:	4693      	mov	fp, r2
 80012b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001330 <main+0x19c>)
 80012b4:	e9c3 ab04 	strd	sl, fp, [r3, #16]
	  sensor[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80012b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80012bc:	481d      	ldr	r0, [pc, #116]	@ (8001334 <main+0x1a0>)
 80012be:	f004 fabf 	bl	8005840 <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2200      	movs	r2, #0
 80012c8:	603b      	str	r3, [r7, #0]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	4b18      	ldr	r3, [pc, #96]	@ (8001330 <main+0x19c>)
 80012ce:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012d2:	e9c3 1206 	strd	r1, r2, [r3, #24]
	  sensor[0] = __HAL_TIM_GET_COUNTER(&htim4);
 80012d6:	bf00      	nop
 80012d8:	e7cc      	b.n	8001274 <main+0xe0>
 80012da:	bf00      	nop
 80012dc:	20000034 	.word	0x20000034
 80012e0:	200009e0 	.word	0x200009e0
 80012e4:	20000914 	.word	0x20000914
 80012e8:	20000ba0 	.word	0x20000ba0
 80012ec:	20000848 	.word	0x20000848
 80012f0:	200006b0 	.word	0x200006b0
 80012f4:	200005e4 	.word	0x200005e4
 80012f8:	2000077c 	.word	0x2000077c
 80012fc:	20000e10 	.word	0x20000e10
 8001300:	20000d44 	.word	0x20000d44
 8001304:	20000518 	.word	0x20000518
 8001308:	20000008 	.word	0x20000008
 800130c:	20000eb0 	.word	0x20000eb0
 8001310:	20000eb4 	.word	0x20000eb4
 8001314:	3a83126f 	.word	0x3a83126f
 8001318:	20000e98 	.word	0x20000e98
 800131c:	20000004 	.word	0x20000004
 8001320:	20000e88 	.word	0x20000e88
 8001324:	20000e8c 	.word	0x20000e8c
 8001328:	3903126f 	.word	0x3903126f
 800132c:	20000e70 	.word	0x20000e70
 8001330:	20000b78 	.word	0x20000b78
 8001334:	48000400 	.word	0x48000400
 8001338:	48000800 	.word	0x48000800

0800133c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b094      	sub	sp, #80	@ 0x50
 8001340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	2238      	movs	r2, #56	@ 0x38
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f009 f9f6 	bl	800a73c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001350:	1d3b      	adds	r3, r7, #4
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
 800135c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800135e:	2000      	movs	r0, #0
 8001360:	f004 fab6 	bl	80058d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001364:	2301      	movs	r3, #1
 8001366:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001368:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800136c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800136e:	2302      	movs	r3, #2
 8001370:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001372:	2303      	movs	r3, #3
 8001374:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001376:	2306      	movs	r3, #6
 8001378:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800137a:	2355      	movs	r3, #85	@ 0x55
 800137c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800137e:	2302      	movs	r3, #2
 8001380:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800138a:	f107 0318 	add.w	r3, r7, #24
 800138e:	4618      	mov	r0, r3
 8001390:	f004 fb52 	bl	8005a38 <HAL_RCC_OscConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800139a:	f000 fddf 	bl	8001f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800139e:	230f      	movs	r3, #15
 80013a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013a2:	2303      	movs	r3, #3
 80013a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2104      	movs	r1, #4
 80013b6:	4618      	mov	r0, r3
 80013b8:	f004 fe50 	bl	800605c <HAL_RCC_ClockConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80013c2:	f000 fdcb 	bl	8001f5c <Error_Handler>
  }
}
 80013c6:	bf00      	nop
 80013c8:	3750      	adds	r7, #80	@ 0x50
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08c      	sub	sp, #48	@ 0x30
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2220      	movs	r2, #32
 80013e6:	2100      	movs	r1, #0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f009 f9a7 	bl	800a73c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ee:	4b32      	ldr	r3, [pc, #200]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 80013f0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80013f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013f6:	4b30      	ldr	r3, [pc, #192]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 80013f8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80013fc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013fe:	4b2e      	ldr	r3, [pc, #184]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001404:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 8001406:	2200      	movs	r2, #0
 8001408:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800140a:	4b2b      	ldr	r3, [pc, #172]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001410:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001416:	4b28      	ldr	r3, [pc, #160]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 8001418:	2204      	movs	r2, #4
 800141a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800141c:	4b26      	ldr	r3, [pc, #152]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 800141e:	2200      	movs	r2, #0
 8001420:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001422:	4b25      	ldr	r3, [pc, #148]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 8001424:	2201      	movs	r2, #1
 8001426:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 800142a:	2201      	movs	r2, #1
 800142c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800142e:	4b22      	ldr	r3, [pc, #136]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001436:	4b20      	ldr	r3, [pc, #128]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 8001438:	2200      	movs	r2, #0
 800143a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800143c:	4b1e      	ldr	r3, [pc, #120]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 800143e:	2200      	movs	r2, #0
 8001440:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001442:	4b1d      	ldr	r3, [pc, #116]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 8001444:	2201      	movs	r2, #1
 8001446:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800144a:	4b1b      	ldr	r3, [pc, #108]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 800144c:	2200      	movs	r2, #0
 800144e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001450:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 8001452:	2200      	movs	r2, #0
 8001454:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001458:	4817      	ldr	r0, [pc, #92]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 800145a:	f002 f84b 	bl	80034f4 <HAL_ADC_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001464:	f000 fd7a 	bl	8001f5c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800146c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001470:	4619      	mov	r1, r3
 8001472:	4811      	ldr	r0, [pc, #68]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 8001474:	f003 fb18 	bl	8004aa8 <HAL_ADCEx_MultiModeConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800147e:	f000 fd6d 	bl	8001f5c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_ADC1_Init+0xec>)
 8001484:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001486:	2306      	movs	r3, #6
 8001488:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800148e:	237f      	movs	r3, #127	@ 0x7f
 8001490:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001492:	2304      	movs	r3, #4
 8001494:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	4619      	mov	r1, r3
 800149e:	4806      	ldr	r0, [pc, #24]	@ (80014b8 <MX_ADC1_Init+0xe8>)
 80014a0:	f002 fd40 	bl	8003f24 <HAL_ADC_ConfigChannel>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80014aa:	f000 fd57 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014ae:	bf00      	nop
 80014b0:	3730      	adds	r7, #48	@ 0x30
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000518 	.word	0x20000518
 80014bc:	04300002 	.word	0x04300002

080014c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b09c      	sub	sp, #112	@ 0x70
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	605a      	str	r2, [r3, #4]
 80014d0:	609a      	str	r2, [r3, #8]
 80014d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2234      	movs	r2, #52	@ 0x34
 80014f8:	2100      	movs	r1, #0
 80014fa:	4618      	mov	r0, r3
 80014fc:	f009 f91e 	bl	800a73c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001500:	4b45      	ldr	r3, [pc, #276]	@ (8001618 <MX_TIM1_Init+0x158>)
 8001502:	4a46      	ldr	r2, [pc, #280]	@ (800161c <MX_TIM1_Init+0x15c>)
 8001504:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001506:	4b44      	ldr	r3, [pc, #272]	@ (8001618 <MX_TIM1_Init+0x158>)
 8001508:	22a9      	movs	r2, #169	@ 0xa9
 800150a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b42      	ldr	r3, [pc, #264]	@ (8001618 <MX_TIM1_Init+0x158>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001512:	4b41      	ldr	r3, [pc, #260]	@ (8001618 <MX_TIM1_Init+0x158>)
 8001514:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001518:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b3f      	ldr	r3, [pc, #252]	@ (8001618 <MX_TIM1_Init+0x158>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001520:	4b3d      	ldr	r3, [pc, #244]	@ (8001618 <MX_TIM1_Init+0x158>)
 8001522:	2200      	movs	r2, #0
 8001524:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b3c      	ldr	r3, [pc, #240]	@ (8001618 <MX_TIM1_Init+0x158>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800152c:	483a      	ldr	r0, [pc, #232]	@ (8001618 <MX_TIM1_Init+0x158>)
 800152e:	f005 f9ff 	bl	8006930 <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001538:	f000 fd10 	bl	8001f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001540:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001542:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001546:	4619      	mov	r1, r3
 8001548:	4833      	ldr	r0, [pc, #204]	@ (8001618 <MX_TIM1_Init+0x158>)
 800154a:	f006 f983 	bl	8007854 <HAL_TIM_ConfigClockSource>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001554:	f000 fd02 	bl	8001f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001558:	482f      	ldr	r0, [pc, #188]	@ (8001618 <MX_TIM1_Init+0x158>)
 800155a:	f005 fb35 	bl	8006bc8 <HAL_TIM_PWM_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001564:	f000 fcfa 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001568:	2300      	movs	r3, #0
 800156a:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800156c:	2300      	movs	r3, #0
 800156e:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001574:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001578:	4619      	mov	r1, r3
 800157a:	4827      	ldr	r0, [pc, #156]	@ (8001618 <MX_TIM1_Init+0x158>)
 800157c:	f007 f950 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001586:	f000 fce9 	bl	8001f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800158a:	2360      	movs	r3, #96	@ 0x60
 800158c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001592:	2300      	movs	r3, #0
 8001594:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001596:	2300      	movs	r3, #0
 8001598:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800159a:	2304      	movs	r3, #4
 800159c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80015aa:	2200      	movs	r2, #0
 80015ac:	4619      	mov	r1, r3
 80015ae:	481a      	ldr	r0, [pc, #104]	@ (8001618 <MX_TIM1_Init+0x158>)
 80015b0:	f006 f83c 	bl	800762c <HAL_TIM_PWM_ConfigChannel>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80015ba:	f000 fccf 	bl	8001f5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ce:	2300      	movs	r3, #0
 80015d0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015d6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80015dc:	2300      	movs	r3, #0
 80015de:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015e4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80015ee:	2300      	movs	r3, #0
 80015f0:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	4619      	mov	r1, r3
 80015fa:	4807      	ldr	r0, [pc, #28]	@ (8001618 <MX_TIM1_Init+0x158>)
 80015fc:	f007 f9a6 	bl	800894c <HAL_TIMEx_ConfigBreakDeadTime>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001606:	f000 fca9 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800160a:	4803      	ldr	r0, [pc, #12]	@ (8001618 <MX_TIM1_Init+0x158>)
 800160c:	f001 faf4 	bl	8002bf8 <HAL_TIM_MspPostInit>

}
 8001610:	bf00      	nop
 8001612:	3770      	adds	r7, #112	@ 0x70
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	200005e4 	.word	0x200005e4
 800161c:	40012c00 	.word	0x40012c00

08001620 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b088      	sub	sp, #32
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0310 	add.w	r3, r7, #16
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800163e:	4b1d      	ldr	r3, [pc, #116]	@ (80016b4 <MX_TIM3_Init+0x94>)
 8001640:	4a1d      	ldr	r2, [pc, #116]	@ (80016b8 <MX_TIM3_Init+0x98>)
 8001642:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8001644:	4b1b      	ldr	r3, [pc, #108]	@ (80016b4 <MX_TIM3_Init+0x94>)
 8001646:	22a9      	movs	r2, #169	@ 0xa9
 8001648:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164a:	4b1a      	ldr	r3, [pc, #104]	@ (80016b4 <MX_TIM3_Init+0x94>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 124;
 8001650:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <MX_TIM3_Init+0x94>)
 8001652:	227c      	movs	r2, #124	@ 0x7c
 8001654:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <MX_TIM3_Init+0x94>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <MX_TIM3_Init+0x94>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001662:	4814      	ldr	r0, [pc, #80]	@ (80016b4 <MX_TIM3_Init+0x94>)
 8001664:	f005 f964 	bl	8006930 <HAL_TIM_Base_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800166e:	f000 fc75 	bl	8001f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001672:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001676:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4619      	mov	r1, r3
 800167e:	480d      	ldr	r0, [pc, #52]	@ (80016b4 <MX_TIM3_Init+0x94>)
 8001680:	f006 f8e8 	bl	8007854 <HAL_TIM_ConfigClockSource>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800168a:	f000 fc67 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	@ (80016b4 <MX_TIM3_Init+0x94>)
 800169c:	f007 f8c0 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80016a6:	f000 fc59 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3720      	adds	r7, #32
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200006b0 	.word	0x200006b0
 80016b8:	40000400 	.word	0x40000400

080016bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08c      	sub	sp, #48	@ 0x30
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	2224      	movs	r2, #36	@ 0x24
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f009 f836 	bl	800a73c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016da:	4b21      	ldr	r3, [pc, #132]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016dc:	4a21      	ldr	r2, [pc, #132]	@ (8001764 <MX_TIM4_Init+0xa8>)
 80016de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80016e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016ec:	4b1c      	ldr	r3, [pc, #112]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fa:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <MX_TIM4_Init+0xa4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001700:	2303      	movs	r3, #3
 8001702:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001704:	2300      	movs	r3, #0
 8001706:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001708:	2301      	movs	r3, #1
 800170a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001714:	2300      	movs	r3, #0
 8001716:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001718:	2301      	movs	r3, #1
 800171a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800171c:	2300      	movs	r3, #0
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001720:	2300      	movs	r3, #0
 8001722:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001724:	f107 030c 	add.w	r3, r7, #12
 8001728:	4619      	mov	r1, r3
 800172a:	480d      	ldr	r0, [pc, #52]	@ (8001760 <MX_TIM4_Init+0xa4>)
 800172c:	f005 fcc2 	bl	80070b4 <HAL_TIM_Encoder_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001736:	f000 fc11 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001742:	463b      	mov	r3, r7
 8001744:	4619      	mov	r1, r3
 8001746:	4806      	ldr	r0, [pc, #24]	@ (8001760 <MX_TIM4_Init+0xa4>)
 8001748:	f007 f86a 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001752:	f000 fc03 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001756:	bf00      	nop
 8001758:	3730      	adds	r7, #48	@ 0x30
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	2000077c 	.word	0x2000077c
 8001764:	40000800 	.word	0x40000800

08001768 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001786:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <MX_TIM5_Init+0x94>)
 8001788:	4a1d      	ldr	r2, [pc, #116]	@ (8001800 <MX_TIM5_Init+0x98>)
 800178a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800178c:	4b1b      	ldr	r3, [pc, #108]	@ (80017fc <MX_TIM5_Init+0x94>)
 800178e:	22a9      	movs	r2, #169	@ 0xa9
 8001790:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	4b1a      	ldr	r3, [pc, #104]	@ (80017fc <MX_TIM5_Init+0x94>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8001798:	4b18      	ldr	r3, [pc, #96]	@ (80017fc <MX_TIM5_Init+0x94>)
 800179a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800179e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a0:	4b16      	ldr	r3, [pc, #88]	@ (80017fc <MX_TIM5_Init+0x94>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <MX_TIM5_Init+0x94>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017ac:	4813      	ldr	r0, [pc, #76]	@ (80017fc <MX_TIM5_Init+0x94>)
 80017ae:	f005 f8bf 	bl	8006930 <HAL_TIM_Base_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80017b8:	f000 fbd0 	bl	8001f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	4619      	mov	r1, r3
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <MX_TIM5_Init+0x94>)
 80017ca:	f006 f843 	bl	8007854 <HAL_TIM_ConfigClockSource>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80017d4:	f000 fbc2 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_TIM5_Init+0x94>)
 80017e6:	f007 f81b 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80017f0:	f000 fbb4 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20000848 	.word	0x20000848
 8001800:	40000c00 	.word	0x40000c00

08001804 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001808:	4b14      	ldr	r3, [pc, #80]	@ (800185c <MX_TIM16_Init+0x58>)
 800180a:	4a15      	ldr	r2, [pc, #84]	@ (8001860 <MX_TIM16_Init+0x5c>)
 800180c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 800180e:	4b13      	ldr	r3, [pc, #76]	@ (800185c <MX_TIM16_Init+0x58>)
 8001810:	22a9      	movs	r2, #169	@ 0xa9
 8001812:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b11      	ldr	r3, [pc, #68]	@ (800185c <MX_TIM16_Init+0x58>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 800181a:	4b10      	ldr	r3, [pc, #64]	@ (800185c <MX_TIM16_Init+0x58>)
 800181c:	f240 4279 	movw	r2, #1145	@ 0x479
 8001820:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001822:	4b0e      	ldr	r3, [pc, #56]	@ (800185c <MX_TIM16_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <MX_TIM16_Init+0x58>)
 800182a:	2200      	movs	r2, #0
 800182c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b0b      	ldr	r3, [pc, #44]	@ (800185c <MX_TIM16_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001834:	4809      	ldr	r0, [pc, #36]	@ (800185c <MX_TIM16_Init+0x58>)
 8001836:	f005 f87b 	bl	8006930 <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001840:	f000 fb8c 	bl	8001f5c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001844:	2108      	movs	r1, #8
 8001846:	4805      	ldr	r0, [pc, #20]	@ (800185c <MX_TIM16_Init+0x58>)
 8001848:	f005 fb3e 	bl	8006ec8 <HAL_TIM_OnePulse_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001852:	f000 fb83 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000914 	.word	0x20000914
 8001860:	40014400 	.word	0x40014400

08001864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001868:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 800186a:	4a24      	ldr	r2, [pc, #144]	@ (80018fc <MX_USART2_UART_Init+0x98>)
 800186c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800186e:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 8001870:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001876:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 8001878:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800187c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800187e:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001884:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 8001886:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800188a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b17      	ldr	r3, [pc, #92]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800189e:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018a4:	4b14      	ldr	r3, [pc, #80]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018aa:	4b13      	ldr	r3, [pc, #76]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b0:	4811      	ldr	r0, [pc, #68]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 80018b2:	f007 f92f 	bl	8008b14 <HAL_UART_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80018bc:	f000 fb4e 	bl	8001f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018c0:	2100      	movs	r1, #0
 80018c2:	480d      	ldr	r0, [pc, #52]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 80018c4:	f008 fe70 	bl	800a5a8 <HAL_UARTEx_SetTxFifoThreshold>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80018ce:	f000 fb45 	bl	8001f5c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018d2:	2100      	movs	r1, #0
 80018d4:	4808      	ldr	r0, [pc, #32]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 80018d6:	f008 fea5 	bl	800a624 <HAL_UARTEx_SetRxFifoThreshold>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80018e0:	f000 fb3c 	bl	8001f5c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	@ (80018f8 <MX_USART2_UART_Init+0x94>)
 80018e6:	f008 fe26 	bl	800a536 <HAL_UARTEx_DisableFifoMode>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80018f0:	f000 fb34 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200009e0 	.word	0x200009e0
 80018fc:	40004400 	.word	0x40004400

08001900 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001906:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <MX_DMA_Init+0x70>)
 8001908:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800190a:	4a19      	ldr	r2, [pc, #100]	@ (8001970 <MX_DMA_Init+0x70>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6493      	str	r3, [r2, #72]	@ 0x48
 8001912:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <MX_DMA_Init+0x70>)
 8001914:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800191e:	4b14      	ldr	r3, [pc, #80]	@ (8001970 <MX_DMA_Init+0x70>)
 8001920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001922:	4a13      	ldr	r2, [pc, #76]	@ (8001970 <MX_DMA_Init+0x70>)
 8001924:	f043 0301 	orr.w	r3, r3, #1
 8001928:	6493      	str	r3, [r2, #72]	@ 0x48
 800192a:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <MX_DMA_Init+0x70>)
 800192c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800192e:	f003 0301 	and.w	r3, r3, #1
 8001932:	603b      	str	r3, [r7, #0]
 8001934:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	200b      	movs	r0, #11
 800193c:	f003 fa97 	bl	8004e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001940:	200b      	movs	r0, #11
 8001942:	f003 faae 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	200c      	movs	r0, #12
 800194c:	f003 fa8f 	bl	8004e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001950:	200c      	movs	r0, #12
 8001952:	f003 faa6 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001956:	2200      	movs	r2, #0
 8001958:	2100      	movs	r1, #0
 800195a:	200d      	movs	r0, #13
 800195c:	f003 fa87 	bl	8004e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001960:	200d      	movs	r0, #13
 8001962:	f003 fa9e 	bl	8004ea2 <HAL_NVIC_EnableIRQ>

}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40021000 	.word	0x40021000

08001974 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	@ 0x28
 8001978:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197a:	f107 0314 	add.w	r3, r7, #20
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
 8001986:	60da      	str	r2, [r3, #12]
 8001988:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800198a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 800198c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800198e:	4a6c      	ldr	r2, [pc, #432]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001996:	4b6a      	ldr	r3, [pc, #424]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 8001998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	613b      	str	r3, [r7, #16]
 80019a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019a2:	4b67      	ldr	r3, [pc, #412]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 80019a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019a6:	4a66      	ldr	r2, [pc, #408]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 80019a8:	f043 0320 	orr.w	r3, r3, #32
 80019ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019ae:	4b64      	ldr	r3, [pc, #400]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 80019b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019b2:	f003 0320 	and.w	r3, r3, #32
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b61      	ldr	r3, [pc, #388]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 80019bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019be:	4a60      	ldr	r2, [pc, #384]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019c6:	4b5e      	ldr	r3, [pc, #376]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019de:	4b58      	ldr	r3, [pc, #352]	@ (8001b40 <MX_GPIO_Init+0x1cc>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Direaction_motor_Pin|Emergency_light_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80019f0:	4854      	ldr	r0, [pc, #336]	@ (8001b44 <MX_GPIO_Init+0x1d0>)
 80019f2:	f003 ff3d 	bl	8005870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|Solenoid_valve_push_Pin, GPIO_PIN_RESET);
 80019f6:	2200      	movs	r2, #0
 80019f8:	f44f 7190 	mov.w	r1, #288	@ 0x120
 80019fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a00:	f003 ff36 	bl	8005870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin, GPIO_PIN_RESET);
 8001a04:	2200      	movs	r2, #0
 8001a06:	f240 4116 	movw	r1, #1046	@ 0x416
 8001a0a:	484f      	ldr	r0, [pc, #316]	@ (8001b48 <MX_GPIO_Init+0x1d4>)
 8001a0c:	f003 ff30 	bl	8005870 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a16:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	4619      	mov	r1, r3
 8001a26:	4847      	ldr	r0, [pc, #284]	@ (8001b44 <MX_GPIO_Init+0x1d0>)
 8001a28:	f003 fd88 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : Direaction_motor_Pin */
  GPIO_InitStruct.Pin = Direaction_motor_Pin;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Direaction_motor_GPIO_Port, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	4840      	ldr	r0, [pc, #256]	@ (8001b44 <MX_GPIO_Init+0x1d0>)
 8001a44:	f003 fd7a 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin Solenoid_valve_push_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|Solenoid_valve_push_Pin;
 8001a48:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	4619      	mov	r1, r3
 8001a60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a64:	f003 fd6a 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : joy_switch_3_Pin joy_switch_4_Pin Set_home_Pin Reed_switch_pull_Pin */
  GPIO_InitStruct.Pin = joy_switch_3_Pin|joy_switch_4_Pin|Set_home_Pin|Reed_switch_pull_Pin;
 8001a68:	23f0      	movs	r3, #240	@ 0xf0
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a70:	2300      	movs	r3, #0
 8001a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4832      	ldr	r0, [pc, #200]	@ (8001b44 <MX_GPIO_Init+0x1d0>)
 8001a7c:	f003 fd5e 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : Pilot_controller_error_Pin Pilot_motor_error_Pin Solenoid_valve_pull_Pin Solenoid_valve_vacuum_Pin */
  GPIO_InitStruct.Pin = Pilot_controller_error_Pin|Pilot_motor_error_Pin|Solenoid_valve_pull_Pin|Solenoid_valve_vacuum_Pin;
 8001a80:	f240 4316 	movw	r3, #1046	@ 0x416
 8001a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	482b      	ldr	r0, [pc, #172]	@ (8001b48 <MX_GPIO_Init+0x1d4>)
 8001a9a:	f003 fd4f 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : Proximity_Pin */
  GPIO_InitStruct.Pin = Proximity_Pin;
 8001a9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aa4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_GPIO_Port, &GPIO_InitStruct);
 8001aae:	f107 0314 	add.w	r3, r7, #20
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4824      	ldr	r0, [pc, #144]	@ (8001b48 <MX_GPIO_Init+0x1d4>)
 8001ab6:	f003 fd41 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_switch_Pin */
  GPIO_InitStruct.Pin = Emergency_switch_Pin;
 8001aba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ac0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_switch_GPIO_Port, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	481d      	ldr	r0, [pc, #116]	@ (8001b48 <MX_GPIO_Init+0x1d4>)
 8001ad2:	f003 fd33 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_light_Pin */
  GPIO_InitStruct.Pin = Emergency_light_Pin;
 8001ad6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Emergency_light_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	4619      	mov	r1, r3
 8001aee:	4815      	ldr	r0, [pc, #84]	@ (8001b44 <MX_GPIO_Init+0x1d0>)
 8001af0:	f003 fd24 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pins : Reed_switch_push_Pin joy_switch_2_Pin */
  GPIO_InitStruct.Pin = Reed_switch_push_Pin|joy_switch_2_Pin;
 8001af4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b02:	f107 0314 	add.w	r3, r7, #20
 8001b06:	4619      	mov	r1, r3
 8001b08:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0c:	f003 fd16 	bl	800553c <HAL_GPIO_Init>

  /*Configure GPIO pin : joy_switch_1_Pin */
  GPIO_InitStruct.Pin = joy_switch_1_Pin;
 8001b10:	2320      	movs	r3, #32
 8001b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(joy_switch_1_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4809      	ldr	r0, [pc, #36]	@ (8001b48 <MX_GPIO_Init+0x1d4>)
 8001b24:	f003 fd0a 	bl	800553c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2028      	movs	r0, #40	@ 0x28
 8001b2e:	f003 f99e 	bl	8004e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b32:	2028      	movs	r0, #40	@ 0x28
 8001b34:	f003 f9b5 	bl	8004ea2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b38:	bf00      	nop
 8001b3a:	3728      	adds	r7, #40	@ 0x28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40021000 	.word	0x40021000
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000400 	.word	0x48000400

08001b4c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Main timer interrupt for run program with accuracy time
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001b4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001b50:	b084      	sub	sp, #16
 8001b52:	af02      	add	r7, sp, #8
 8001b54:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a97      	ldr	r2, [pc, #604]	@ (8001db8 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d103      	bne.n	8001b66 <HAL_TIM_PeriodElapsedCallback+0x1a>
		//Update modbus
		registerFrame[0x00].U16 = 22881;
 8001b5e:	4b97      	ldr	r3, [pc, #604]	@ (8001dbc <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001b60:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001b64:	801a      	strh	r2, [r3, #0]
	}
	if(htim == &htim3){
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a95      	ldr	r2, [pc, #596]	@ (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x274>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	f040 811e 	bne.w	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
		//Update main
		Update_qei(&encoder, &htim4);
 8001b70:	4994      	ldr	r1, [pc, #592]	@ (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001b72:	4895      	ldr	r0, [pc, #596]	@ (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b74:	f000 fc58 	bl	8002428 <Update_qei>
		Update_adc(&current_sensor);
 8001b78:	4894      	ldr	r0, [pc, #592]	@ (8001dcc <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001b7a:	f7ff fa58 	bl	800102e <Update_adc>
		if((homing == 0) && (encoder.mm > 500 || encoder.mm < 0)){
 8001b7e:	4b94      	ldr	r3, [pc, #592]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d11a      	bne.n	8001bbc <HAL_TIM_PeriodElapsedCallback+0x70>
 8001b86:	4b90      	ldr	r3, [pc, #576]	@ (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b88:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001b8c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8001dd4 <HAL_TIM_PeriodElapsedCallback+0x288>
 8001b90:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b98:	dc07      	bgt.n	8001baa <HAL_TIM_PeriodElapsedCallback+0x5e>
 8001b9a:	4b8b      	ldr	r3, [pc, #556]	@ (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001b9c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001ba0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba8:	d508      	bpl.n	8001bbc <HAL_TIM_PeriodElapsedCallback+0x70>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001baa:	2300      	movs	r3, #0
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	2302      	movs	r3, #2
 8001bb0:	4a89      	ldr	r2, [pc, #548]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	4889      	ldr	r0, [pc, #548]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bb6:	f000 fb45 	bl	8002244 <Update_pwm>
 8001bba:	e0f7      	b.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
		}
		else if(mode == 0 || mode == 1){
 8001bbc:	4b88      	ldr	r3, [pc, #544]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_TIM_PeriodElapsedCallback+0x80>
 8001bc4:	4b86      	ldr	r3, [pc, #536]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d13c      	bne.n	8001c46 <HAL_TIM_PeriodElapsedCallback+0xfa>
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, v_output);
 8001bcc:	4b85      	ldr	r3, [pc, #532]	@ (8001de4 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	4a80      	ldr	r2, [pc, #512]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	4880      	ldr	r0, [pc, #512]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001bda:	f000 fb33 	bl	8002244 <Update_pwm>
			if(mode == 0){ setpoint = 0;} // If mode == 0 : set point from base system
 8001bde:	4b80      	ldr	r3, [pc, #512]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d104      	bne.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0xa4>
 8001be6:	4b80      	ldr	r3, [pc, #512]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	e007      	b.n	8001c00 <HAL_TIM_PeriodElapsedCallback+0xb4>
			else if(mode == 1){setpoint = 1;} // If mode == 1 : set point from joy
 8001bf0:	4b7b      	ldr	r3, [pc, #492]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d103      	bne.n	8001c00 <HAL_TIM_PeriodElapsedCallback+0xb4>
 8001bf8:	4b7b      	ldr	r3, [pc, #492]	@ (8001de8 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001bfa:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001bfe:	601a      	str	r2, [r3, #0]
			Update_velocity_control(test);
 8001c00:	4b7a      	ldr	r3, [pc, #488]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c10:	f000 f974 	bl	8001efc <Update_velocity_control>
			static uint64_t timestamp = 0;
			if (timestamp == 8){
 8001c14:	4b76      	ldr	r3, [pc, #472]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f1a2 0108 	sub.w	r1, r2, #8
 8001c1e:	430b      	orrs	r3, r1
 8001c20:	d106      	bne.n	8001c30 <HAL_TIM_PeriodElapsedCallback+0xe4>
//				Update_position_control(test);
				timestamp = 0;
 8001c22:	4973      	ldr	r1, [pc, #460]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c24:	f04f 0200 	mov.w	r2, #0
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	e9c1 2300 	strd	r2, r3, [r1]
			}
			timestamp++;
 8001c30:	4b6f      	ldr	r3, [pc, #444]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f112 0801 	adds.w	r8, r2, #1
 8001c3a:	f143 0900 	adc.w	r9, r3, #0
 8001c3e:	4b6c      	ldr	r3, [pc, #432]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001c40:	e9c3 8900 	strd	r8, r9, [r3]
		else if(mode == 0 || mode == 1){
 8001c44:	e0b2      	b.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
		}
		else{
//			repeat_cheack++;
			// Stop motor if emergency
			if(!HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8001c46:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c4a:	486a      	ldr	r0, [pc, #424]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c4c:	f003 fdf8 	bl	8005840 <HAL_GPIO_ReadPin>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d108      	bne.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x11c>
//				repeat_cheack++;
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001c56:	2300      	movs	r3, #0
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	4a5e      	ldr	r2, [pc, #376]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001c5e:	2100      	movs	r1, #0
 8001c60:	485e      	ldr	r0, [pc, #376]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c62:	f000 faef 	bl	8002244 <Update_pwm>
					homing_ts++;
				}
			}
		}
	}
}
 8001c66:	e0a1      	b.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
			else if(wait_command){
 8001c68:	4b63      	ldr	r3, [pc, #396]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d036      	beq.n	8001cde <HAL_TIM_PeriodElapsedCallback+0x192>
				Update_joy(&joy);
 8001c70:	4862      	ldr	r0, [pc, #392]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c72:	f7ff fa15 	bl	80010a0 <Update_joy>
				if(!joy.s_1 && joy.s_2 && joy.s_3 && joy.s_4){
 8001c76:	4b61      	ldr	r3, [pc, #388]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d115      	bne.n	8001caa <HAL_TIM_PeriodElapsedCallback+0x15e>
 8001c7e:	4b5f      	ldr	r3, [pc, #380]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c80:	785b      	ldrb	r3, [r3, #1]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d011      	beq.n	8001caa <HAL_TIM_PeriodElapsedCallback+0x15e>
 8001c86:	4b5d      	ldr	r3, [pc, #372]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c88:	789b      	ldrb	r3, [r3, #2]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00d      	beq.n	8001caa <HAL_TIM_PeriodElapsedCallback+0x15e>
 8001c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c90:	78db      	ldrb	r3, [r3, #3]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d009      	beq.n	8001caa <HAL_TIM_PeriodElapsedCallback+0x15e>
					mode = 0;
 8001c96:	4b52      	ldr	r3, [pc, #328]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 8001c9c:	4b58      	ldr	r3, [pc, #352]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8001ca2:	4b55      	ldr	r3, [pc, #340]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	701a      	strb	r2, [r3, #0]
 8001ca8:	e080      	b.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
				else if(joy.s_1 && !joy.s_2 && joy.s_3 && joy.s_4){
 8001caa:	4b54      	ldr	r3, [pc, #336]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d07c      	beq.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
 8001cb2:	4b52      	ldr	r3, [pc, #328]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cb4:	785b      	ldrb	r3, [r3, #1]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d178      	bne.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
 8001cba:	4b50      	ldr	r3, [pc, #320]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cbc:	789b      	ldrb	r3, [r3, #2]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d074      	beq.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
 8001cc2:	4b4e      	ldr	r3, [pc, #312]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cc4:	78db      	ldrb	r3, [r3, #3]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d070      	beq.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
					mode = 1;
 8001cca:	4b45      	ldr	r3, [pc, #276]	@ (8001de0 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
					is_home = 0;
 8001cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
					wait_command = 0;
 8001cd6:	4b48      	ldr	r3, [pc, #288]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
}
 8001cdc:	e066      	b.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
			else if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)){
 8001cde:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ce2:	4844      	ldr	r0, [pc, #272]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001ce4:	f003 fdac 	bl	8005840 <HAL_GPIO_ReadPin>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d05e      	beq.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, RESET);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001cf4:	4838      	ldr	r0, [pc, #224]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001cf6:	f003 fdbb 	bl	8005870 <HAL_GPIO_WritePin>
				if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6)){
 8001cfa:	2140      	movs	r1, #64	@ 0x40
 8001cfc:	4836      	ldr	r0, [pc, #216]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001cfe:	f003 fd9f 	bl	8005840 <HAL_GPIO_ReadPin>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d010      	beq.n	8001d2a <HAL_TIM_PeriodElapsedCallback+0x1de>
					if(homing_first == 1){
 8001d08:	4b3e      	ldr	r3, [pc, #248]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d14d      	bne.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
						homing = 1;
 8001d10:	4b2f      	ldr	r3, [pc, #188]	@ (8001dd0 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -100);
 8001d16:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	4a2e      	ldr	r2, [pc, #184]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001d20:	2100      	movs	r1, #0
 8001d22:	482e      	ldr	r0, [pc, #184]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d24:	f000 fa8e 	bl	8002244 <Update_pwm>
}
 8001d28:	e040      	b.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
				else if(homing_first == 0){
 8001d2a:	4b36      	ldr	r3, [pc, #216]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d13c      	bne.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
					if (homing_ts == 8000){
 8001d32:	4b35      	ldr	r3, [pc, #212]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d38:	f5a2 51fa 	sub.w	r1, r2, #8000	@ 0x1f40
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	d10b      	bne.n	8001d58 <HAL_TIM_PeriodElapsedCallback+0x20c>
						homing_second = 1;
 8001d40:	4b32      	ldr	r3, [pc, #200]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	701a      	strb	r2, [r3, #0]
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001d46:	2300      	movs	r3, #0
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	4a22      	ldr	r2, [pc, #136]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4822      	ldr	r0, [pc, #136]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d52:	f000 fa77 	bl	8002244 <Update_pwm>
 8001d56:	e01f      	b.n	8001d98 <HAL_TIM_PeriodElapsedCallback+0x24c>
					}else if(homing_ts == 18000){
 8001d58:	4b2b      	ldr	r3, [pc, #172]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5e:	492c      	ldr	r1, [pc, #176]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001d60:	4411      	add	r1, r2
 8001d62:	430b      	orrs	r3, r1
 8001d64:	d109      	bne.n	8001d7a <HAL_TIM_PeriodElapsedCallback+0x22e>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, -100);
 8001d66:	f06f 0363 	mvn.w	r3, #99	@ 0x63
 8001d6a:	9300      	str	r3, [sp, #0]
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001d70:	2100      	movs	r1, #0
 8001d72:	481a      	ldr	r0, [pc, #104]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d74:	f000 fa66 	bl	8002244 <Update_pwm>
 8001d78:	e00e      	b.n	8001d98 <HAL_TIM_PeriodElapsedCallback+0x24c>
					}else if(homing_ts == 4000){
 8001d7a:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f5a2 617a 	sub.w	r1, r2, #4000	@ 0xfa0
 8001d84:	430b      	orrs	r3, r1
 8001d86:	d107      	bne.n	8001d98 <HAL_TIM_PeriodElapsedCallback+0x24c>
						Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 200);
 8001d88:	23c8      	movs	r3, #200	@ 0xc8
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	4a12      	ldr	r2, [pc, #72]	@ (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001d90:	2100      	movs	r1, #0
 8001d92:	4812      	ldr	r0, [pc, #72]	@ (8001ddc <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001d94:	f000 fa56 	bl	8002244 <Update_pwm>
					homing_ts++;
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9e:	1c54      	adds	r4, r2, #1
 8001da0:	f143 0500 	adc.w	r5, r3, #0
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001da6:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001daa:	e7ff      	b.n	8001dac <HAL_TIM_PeriodElapsedCallback+0x260>
 8001dac:	bf00      	nop
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001db6:	bf00      	nop
 8001db8:	20000848 	.word	0x20000848
 8001dbc:	20000ba0 	.word	0x20000ba0
 8001dc0:	200006b0 	.word	0x200006b0
 8001dc4:	2000077c 	.word	0x2000077c
 8001dc8:	20000e10 	.word	0x20000e10
 8001dcc:	20000d44 	.word	0x20000d44
 8001dd0:	20000d41 	.word	0x20000d41
 8001dd4:	43fa0000 	.word	0x43fa0000
 8001dd8:	48000800 	.word	0x48000800
 8001ddc:	200005e4 	.word	0x200005e4
 8001de0:	20000002 	.word	0x20000002
 8001de4:	20000e94 	.word	0x20000e94
 8001de8:	20000b74 	.word	0x20000b74
 8001dec:	20000b70 	.word	0x20000b70
 8001df0:	20000eb8 	.word	0x20000eb8
 8001df4:	48000400 	.word	0x48000400
 8001df8:	20000d43 	.word	0x20000d43
 8001dfc:	20000d30 	.word	0x20000d30
 8001e00:	20000d42 	.word	0x20000d42
 8001e04:	20000001 	.word	0x20000001
 8001e08:	20000d38 	.word	0x20000d38
 8001e0c:	20000d40 	.word	0x20000d40
 8001e10:	ffffb9b0 	.word	0xffffb9b0

08001e14 <HAL_GPIO_EXTI_Callback>:
// GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	80fb      	strh	r3, [r7, #6]
//		// Emergency light enable
//		Reset_qei(&encoder);
//		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, SET);
//		mode = 2;
//	}
	if(GPIO_Pin == GPIO_PIN_12){
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e24:	d151      	bne.n	8001eca <HAL_GPIO_EXTI_Callback+0xb6>
		// Proximity interrupted
		limitswitch_test++;
 8001e26:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	3301      	adds	r3, #1
 8001e2c:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001e2e:	6013      	str	r3, [r2, #0]
		if(homing == 1){
 8001e30:	4b28      	ldr	r3, [pc, #160]	@ (8001ed4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d139      	bne.n	8001eac <HAL_GPIO_EXTI_Callback+0x98>
			// If homing
			if(homing_first == 1){
 8001e38:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d10b      	bne.n	8001e58 <HAL_GPIO_EXTI_Callback+0x44>
				// First time stop
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001e40:	2300      	movs	r3, #0
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	2302      	movs	r3, #2
 8001e46:	4a25      	ldr	r2, [pc, #148]	@ (8001edc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001e48:	2100      	movs	r1, #0
 8001e4a:	4825      	ldr	r0, [pc, #148]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001e4c:	f000 f9fa 	bl	8002244 <Update_pwm>
				homing_first = 0;
 8001e50:	4b21      	ldr	r3, [pc, #132]	@ (8001ed8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
				return;
 8001e56:	e038      	b.n	8001eca <HAL_GPIO_EXTI_Callback+0xb6>
			}
			else if(homing_second == 1){
 8001e58:	4b22      	ldr	r3, [pc, #136]	@ (8001ee4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d121      	bne.n	8001ea4 <HAL_GPIO_EXTI_Callback+0x90>
				// Second time stop and reset variables.
				Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001e60:	2300      	movs	r3, #0
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2302      	movs	r3, #2
 8001e66:	4a1d      	ldr	r2, [pc, #116]	@ (8001edc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001e68:	2100      	movs	r1, #0
 8001e6a:	481d      	ldr	r0, [pc, #116]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001e6c:	f000 f9ea 	bl	8002244 <Update_pwm>
				homing_ts = 0;
 8001e70:	491d      	ldr	r1, [pc, #116]	@ (8001ee8 <HAL_GPIO_EXTI_Callback+0xd4>)
 8001e72:	f04f 0200 	mov.w	r2, #0
 8001e76:	f04f 0300 	mov.w	r3, #0
 8001e7a:	e9c1 2300 	strd	r2, r3, [r1]
				is_home = 1;
 8001e7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <HAL_GPIO_EXTI_Callback+0xd8>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
				homing_second = 0;
 8001e84:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
				homing_first = 1;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	@ (8001ed8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	701a      	strb	r2, [r3, #0]
				homing = 0;
 8001e90:	4b10      	ldr	r3, [pc, #64]	@ (8001ed4 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	701a      	strb	r2, [r3, #0]
				wait_command = 1;
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <HAL_GPIO_EXTI_Callback+0xdc>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
				Reset_qei(&encoder);
 8001e9c:	4815      	ldr	r0, [pc, #84]	@ (8001ef4 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001e9e:	f000 fcdb 	bl	8002858 <Reset_qei>
 8001ea2:	e012      	b.n	8001eca <HAL_GPIO_EXTI_Callback+0xb6>
			}
			else if(is_home == 1){
 8001ea4:	4b11      	ldr	r3, [pc, #68]	@ (8001eec <HAL_GPIO_EXTI_Callback+0xd8>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	e00e      	b.n	8001eca <HAL_GPIO_EXTI_Callback+0xb6>
				return;
			}
		}
		else{
			Update_pwm(&htim1, TIM_CHANNEL_1, GPIOC, GPIO_PIN_1, 0);
 8001eac:	2300      	movs	r3, #0
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <HAL_GPIO_EXTI_Callback+0xc8>)
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	480a      	ldr	r0, [pc, #40]	@ (8001ee0 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001eb8:	f000 f9c4 	bl	8002244 <Update_pwm>
			mode = 2;
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	701a      	strb	r2, [r3, #0]
			homing_first = 0;
 8001ec2:	4b05      	ldr	r3, [pc, #20]	@ (8001ed8 <HAL_GPIO_EXTI_Callback+0xc4>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]
			return;
 8001ec8:	bf00      	nop
		}
	}
}
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	20000b6c 	.word	0x20000b6c
 8001ed4:	20000d41 	.word	0x20000d41
 8001ed8:	20000001 	.word	0x20000001
 8001edc:	48000800 	.word	0x48000800
 8001ee0:	200005e4 	.word	0x200005e4
 8001ee4:	20000d40 	.word	0x20000d40
 8001ee8:	20000d38 	.word	0x20000d38
 8001eec:	20000d42 	.word	0x20000d42
 8001ef0:	20000d43 	.word	0x20000d43
 8001ef4:	20000e10 	.word	0x20000e10
 8001ef8:	20000002 	.word	0x20000002

08001efc <Update_velocity_control>:
// Torque control update
void Update_torque_control(float32_t s){

}
// Velocity control update
void Update_velocity_control(float32_t s){
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	ed87 0a01 	vstr	s0, [r7, #4]
	//input is pulse unit
	v_e = s - Get_mmps(&encoder);
 8001f06:	480f      	ldr	r0, [pc, #60]	@ (8001f44 <Update_velocity_control+0x48>)
 8001f08:	f000 fcf3 	bl	80028f2 <Get_mmps>
 8001f0c:	eeb0 7a40 	vmov.f32	s14, s0
 8001f10:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001f18:	4b0b      	ldr	r3, [pc, #44]	@ (8001f48 <Update_velocity_control+0x4c>)
 8001f1a:	edc3 7a00 	vstr	s15, [r3]
	v_output = Update_pid(&v_pid, v_e, 900.0, 1000.0);
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <Update_velocity_control+0x4c>)
 8001f20:	edd3 7a00 	vldr	s15, [r3]
 8001f24:	ed9f 1a09 	vldr	s2, [pc, #36]	@ 8001f4c <Update_velocity_control+0x50>
 8001f28:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8001f50 <Update_velocity_control+0x54>
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	4808      	ldr	r0, [pc, #32]	@ (8001f54 <Update_velocity_control+0x58>)
 8001f32:	f000 f83f 	bl	8001fb4 <Update_pid>
 8001f36:	4603      	mov	r3, r0
 8001f38:	4a07      	ldr	r2, [pc, #28]	@ (8001f58 <Update_velocity_control+0x5c>)
 8001f3a:	6013      	str	r3, [r2, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	20000e10 	.word	0x20000e10
 8001f48:	20000e90 	.word	0x20000e90
 8001f4c:	447a0000 	.word	0x447a0000
 8001f50:	44610000 	.word	0x44610000
 8001f54:	20000e70 	.word	0x20000e70
 8001f58:	20000e94 	.word	0x20000e94

08001f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f60:	b672      	cpsid	i
}
 8001f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <Error_Handler+0x8>

08001f68 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6178      	str	r0, [r7, #20]
 8001f70:	ed87 0a04 	vstr	s0, [r7, #16]
 8001f74:	edc7 0a03 	vstr	s1, [r7, #12]
 8001f78:	ed87 1a02 	vstr	s2, [r7, #8]
 8001f7c:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	693a      	ldr	r2, [r7, #16]
 8001f84:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8001f98:	6979      	ldr	r1, [r7, #20]
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001fa6:	bf00      	nop
 8001fa8:	371c      	adds	r7, #28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8001fb4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001fb8:	b08a      	sub	sp, #40	@ 0x28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	ed87 0a02 	vstr	s0, [r7, #8]
 8001fc2:	edc7 0a01 	vstr	s1, [r7, #4]
 8001fc6:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fdc:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8001fe0:	4b96      	ldr	r3, [pc, #600]	@ (800223c <Update_pid+0x288>)
 8001fe2:	edd3 7a00 	vldr	s15, [r3]
 8001fe6:	ed97 7a06 	vldr	s14, [r7, #24]
 8001fea:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ff4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	ed93 7a03 	vldr	s14, [r3, #12]
 8001ffe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002002:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	ed93 7a01 	vldr	s14, [r3, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002012:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002016:	ee17 0a90 	vmov	r0, s15
 800201a:	f7fe fa61 	bl	80004e0 <__aeabi_f2d>
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002026:	f7fe fbdd 	bl	80007e4 <__aeabi_ddiv>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4690      	mov	r8, r2
 8002030:	4699      	mov	r9, r3
 8002032:	4b82      	ldr	r3, [pc, #520]	@ (800223c <Update_pid+0x288>)
 8002034:	ed93 7a00 	vldr	s14, [r3]
 8002038:	edd7 7a06 	vldr	s15, [r7, #24]
 800203c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002040:	ee17 0a90 	vmov	r0, s15
 8002044:	f7fe fa4c 	bl	80004e0 <__aeabi_f2d>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4640      	mov	r0, r8
 800204e:	4649      	mov	r1, r9
 8002050:	f7fe fa9e 	bl	8000590 <__aeabi_dmul>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4690      	mov	r8, r2
 800205a:	4699      	mov	r9, r3
 800205c:	4b78      	ldr	r3, [pc, #480]	@ (8002240 <Update_pid+0x28c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa3d 	bl	80004e0 <__aeabi_f2d>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	4640      	mov	r0, r8
 800206c:	4649      	mov	r1, r9
 800206e:	f7fe f8d9 	bl	8000224 <__adddf3>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f7fe fd6b 	bl	8000b54 <__aeabi_d2f>
 800207e:	4603      	mov	r3, r0
 8002080:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	edd3 7a01 	vldr	s15, [r3, #4]
 8002088:	eef5 7a40 	vcmp.f32	s15, #0.0
 800208c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002090:	d102      	bne.n	8002098 <Update_pid+0xe4>
		i_term = 0;
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	edd3 7a02 	vldr	s15, [r3, #8]
 800209e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80020a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020a6:	d102      	bne.n	80020ae <Update_pid+0xfa>
		d_term = 0;
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 80020ae:	ed97 7a05 	vldr	s14, [r7, #20]
 80020b2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80020b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020ba:	edd7 7a08 	vldr	s15, [r7, #32]
 80020be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020c2:	ee17 0a90 	vmov	r0, s15
 80020c6:	f7fe fa0b 	bl	80004e0 <__aeabi_f2d>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	68f9      	ldr	r1, [r7, #12]
 80020d0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe f9fe 	bl	80004e0 <__aeabi_f2d>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4640      	mov	r0, r8
 80020ea:	4649      	mov	r1, r9
 80020ec:	f7fe fce0 	bl	8000ab0 <__aeabi_dcmpgt>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d002      	beq.n	80020fc <Update_pid+0x148>
		is_sat = 1;
 80020f6:	2301      	movs	r3, #1
 80020f8:	77fb      	strb	r3, [r7, #31]
 80020fa:	e016      	b.n	800212a <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002102:	edd7 7a01 	vldr	s15, [r7, #4]
 8002106:	eef1 7a67 	vneg.f32	s15, s15
 800210a:	ee17 3a90 	vmov	r3, s15
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f9e6 	bl	80004e0 <__aeabi_f2d>
 8002114:	4602      	mov	r2, r0
 8002116:	460b      	mov	r3, r1
 8002118:	4640      	mov	r0, r8
 800211a:	4649      	mov	r1, r9
 800211c:	f7fe fcaa 	bl	8000a74 <__aeabi_dcmplt>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <Update_pid+0x176>
		is_sat = 1;
 8002126:	2301      	movs	r3, #1
 8002128:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 800212a:	69b8      	ldr	r0, [r7, #24]
 800212c:	f7fe f9d8 	bl	80004e0 <__aeabi_f2d>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002136:	f7fe fa2b 	bl	8000590 <__aeabi_dmul>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4690      	mov	r8, r2
 8002140:	4699      	mov	r9, r3
 8002142:	69b8      	ldr	r0, [r7, #24]
 8002144:	f7fe f9cc 	bl	80004e0 <__aeabi_f2d>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800214e:	f7fe fa1f 	bl	8000590 <__aeabi_dmul>
 8002152:	4602      	mov	r2, r0
 8002154:	460b      	mov	r3, r1
 8002156:	4614      	mov	r4, r2
 8002158:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 800215c:	4622      	mov	r2, r4
 800215e:	462b      	mov	r3, r5
 8002160:	4640      	mov	r0, r8
 8002162:	4649      	mov	r1, r9
 8002164:	f7fe fc7c 	bl	8000a60 <__aeabi_dcmpeq>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d011      	beq.n	8002192 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 800216e:	7ffb      	ldrb	r3, [r7, #31]
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10e      	bne.n	8002192 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8002174:	ed97 7a05 	vldr	s14, [r7, #20]
 8002178:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800217c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002180:	ee17 0a90 	vmov	r0, s15
 8002184:	f7fe f9ac 	bl	80004e0 <__aeabi_f2d>
 8002188:	4602      	mov	r2, r0
 800218a:	460b      	mov	r3, r1
 800218c:	68f9      	ldr	r1, [r7, #12]
 800218e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	f7fe f9a1 	bl	80004e0 <__aeabi_f2d>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4620      	mov	r0, r4
 80021a4:	4629      	mov	r1, r5
 80021a6:	f7fe fc83 	bl	8000ab0 <__aeabi_dcmpgt>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 80021b0:	6838      	ldr	r0, [r7, #0]
 80021b2:	f7fe f995 	bl	80004e0 <__aeabi_f2d>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	68f9      	ldr	r1, [r7, #12]
 80021bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80021c0:	e022      	b.n	8002208 <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80021c8:	edd7 7a00 	vldr	s15, [r7]
 80021cc:	eef1 7a67 	vneg.f32	s15, s15
 80021d0:	ee17 3a90 	vmov	r3, s15
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f983 	bl	80004e0 <__aeabi_f2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4620      	mov	r0, r4
 80021e0:	4629      	mov	r1, r5
 80021e2:	f7fe fc47 	bl	8000a74 <__aeabi_dcmplt>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00d      	beq.n	8002208 <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 80021ec:	edd7 7a00 	vldr	s15, [r7]
 80021f0:	eef1 7a67 	vneg.f32	s15, s15
 80021f4:	ee17 3a90 	vmov	r3, s15
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe f971 	bl	80004e0 <__aeabi_f2d>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	68f9      	ldr	r1, [r7, #12]
 8002204:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800220e:	4610      	mov	r0, r2
 8002210:	4619      	mov	r1, r3
 8002212:	f7fe fc9f 	bl	8000b54 <__aeabi_d2f>
 8002216:	4603      	mov	r3, r0
 8002218:	4a09      	ldr	r2, [pc, #36]	@ (8002240 <Update_pid+0x28c>)
 800221a:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 800221c:	4a07      	ldr	r2, [pc, #28]	@ (800223c <Update_pid+0x288>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002228:	4610      	mov	r0, r2
 800222a:	4619      	mov	r1, r3
 800222c:	f7fe fc4a 	bl	8000ac4 <__aeabi_d2iz>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3728      	adds	r7, #40	@ 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800223c:	20000ec0 	.word	0x20000ec0
 8002240:	20000ec4 	.word	0x20000ec4

08002244 <Update_pwm>:
 *      Author: naker
 */

#include "pwm.h"

void Update_pwm(TIM_HandleTypeDef* htim, uint16_t htim_channel,GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, int32_t pwm_signal) {
 8002244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002248:	b08b      	sub	sp, #44	@ 0x2c
 800224a:	af00      	add	r7, sp, #0
 800224c:	6278      	str	r0, [r7, #36]	@ 0x24
 800224e:	61fa      	str	r2, [r7, #28]
 8002250:	461a      	mov	r2, r3
 8002252:	460b      	mov	r3, r1
 8002254:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002256:	4613      	mov	r3, r2
 8002258:	843b      	strh	r3, [r7, #32]
	__HAL_TIM_SET_COMPARE(htim, htim_channel, fabs(pwm_signal));
 800225a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800225c:	2b00      	cmp	r3, #0
 800225e:	d111      	bne.n	8002284 <Update_pwm+0x40>
 8002260:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002262:	f7fe f92b 	bl	80004bc <__aeabi_i2d>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	613a      	str	r2, [r7, #16]
 800226c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	681c      	ldr	r4, [r3, #0]
 8002276:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800227a:	f7fe fc4b 	bl	8000b14 <__aeabi_d2uiz>
 800227e:	4603      	mov	r3, r0
 8002280:	6363      	str	r3, [r4, #52]	@ 0x34
 8002282:	e061      	b.n	8002348 <Update_pwm+0x104>
 8002284:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002286:	2b04      	cmp	r3, #4
 8002288:	d111      	bne.n	80022ae <Update_pwm+0x6a>
 800228a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800228c:	f7fe f916 	bl	80004bc <__aeabi_i2d>
 8002290:	4602      	mov	r2, r0
 8002292:	460b      	mov	r3, r1
 8002294:	60ba      	str	r2, [r7, #8]
 8002296:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	681c      	ldr	r4, [r3, #0]
 80022a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022a4:	f7fe fc36 	bl	8000b14 <__aeabi_d2uiz>
 80022a8:	4603      	mov	r3, r0
 80022aa:	63a3      	str	r3, [r4, #56]	@ 0x38
 80022ac:	e04c      	b.n	8002348 <Update_pwm+0x104>
 80022ae:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80022b0:	2b08      	cmp	r3, #8
 80022b2:	d111      	bne.n	80022d8 <Update_pwm+0x94>
 80022b4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80022b6:	f7fe f901 	bl	80004bc <__aeabi_i2d>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	603a      	str	r2, [r7, #0]
 80022c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80022c4:	607b      	str	r3, [r7, #4]
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	681c      	ldr	r4, [r3, #0]
 80022ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80022ce:	f7fe fc21 	bl	8000b14 <__aeabi_d2uiz>
 80022d2:	4603      	mov	r3, r0
 80022d4:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80022d6:	e037      	b.n	8002348 <Update_pwm+0x104>
 80022d8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d110      	bne.n	8002300 <Update_pwm+0xbc>
 80022de:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80022e0:	f7fe f8ec 	bl	80004bc <__aeabi_i2d>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4615      	mov	r5, r2
 80022ea:	f023 4600 	bic.w	r6, r3, #2147483648	@ 0x80000000
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	681c      	ldr	r4, [r3, #0]
 80022f2:	4628      	mov	r0, r5
 80022f4:	4631      	mov	r1, r6
 80022f6:	f7fe fc0d 	bl	8000b14 <__aeabi_d2uiz>
 80022fa:	4603      	mov	r3, r0
 80022fc:	6423      	str	r3, [r4, #64]	@ 0x40
 80022fe:	e023      	b.n	8002348 <Update_pwm+0x104>
 8002300:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8002302:	2b10      	cmp	r3, #16
 8002304:	d110      	bne.n	8002328 <Update_pwm+0xe4>
 8002306:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002308:	f7fe f8d8 	bl	80004bc <__aeabi_i2d>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4692      	mov	sl, r2
 8002312:	f023 4b00 	bic.w	fp, r3, #2147483648	@ 0x80000000
 8002316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002318:	681c      	ldr	r4, [r3, #0]
 800231a:	4650      	mov	r0, sl
 800231c:	4659      	mov	r1, fp
 800231e:	f7fe fbf9 	bl	8000b14 <__aeabi_d2uiz>
 8002322:	4603      	mov	r3, r0
 8002324:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002326:	e00f      	b.n	8002348 <Update_pwm+0x104>
 8002328:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800232a:	f7fe f8c7 	bl	80004bc <__aeabi_i2d>
 800232e:	4602      	mov	r2, r0
 8002330:	460b      	mov	r3, r1
 8002332:	4690      	mov	r8, r2
 8002334:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 8002338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233a:	681c      	ldr	r4, [r3, #0]
 800233c:	4640      	mov	r0, r8
 800233e:	4649      	mov	r1, r9
 8002340:	f7fe fbe8 	bl	8000b14 <__aeabi_d2uiz>
 8002344:	4603      	mov	r3, r0
 8002346:	64e3      	str	r3, [r4, #76]	@ 0x4c
	if (pwm_signal < 0) {
 8002348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800234a:	2b00      	cmp	r3, #0
 800234c:	da06      	bge.n	800235c <Update_pwm+0x118>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, RESET);
 800234e:	8c3b      	ldrh	r3, [r7, #32]
 8002350:	2200      	movs	r2, #0
 8002352:	4619      	mov	r1, r3
 8002354:	69f8      	ldr	r0, [r7, #28]
 8002356:	f003 fa8b 	bl	8005870 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
	}
}
 800235a:	e005      	b.n	8002368 <Update_pwm+0x124>
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, SET);
 800235c:	8c3b      	ldrh	r3, [r7, #32]
 800235e:	2201      	movs	r2, #1
 8002360:	4619      	mov	r1, r3
 8002362:	69f8      	ldr	r0, [r7, #28]
 8002364:	f003 fa84 	bl	8005870 <HAL_GPIO_WritePin>
}
 8002368:	bf00      	nop
 800236a:	372c      	adds	r7, #44	@ 0x2c
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002372 <QEI_init>:
 *  Created on: Apr 24, 2024
 *      Author: naker
 */
#include "qei.h"

void QEI_init(QEI* qei, int32_t ppr, int32_t freq, int32_t period){
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	603b      	str	r3, [r7, #0]
	qei -> ppr = ppr;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	601a      	str	r2, [r3, #0]
	qei -> freq = freq;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	605a      	str	r2, [r3, #4]
	qei -> period = period;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	609a      	str	r2, [r3, #8]
	qei -> counter_value[NEW] = 0;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2200      	movs	r2, #0
 800239c:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2200      	movs	r2, #0
 80023a2:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 80023a4:	68f9      	ldr	r1, [r7, #12]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	f04f 0300 	mov.w	r3, #0
 80023ae:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f04f 0200 	mov.w	r2, #0
 80023b8:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 80023ca:	68f9      	ldr	r1, [r7, #12]
 80023cc:	f04f 0200 	mov.w	r2, #0
 80023d0:	f04f 0300 	mov.w	r3, #0
 80023d4:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f04f 0200 	mov.w	r2, #0
 80023ee:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> radpss = 0.0;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = 0.0;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = 0.0;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	65da      	str	r2, [r3, #92]	@ 0x5c
	qei -> velocity_value[NEW] = 0;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> velocity_value[OLD] = 0;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f04f 0200 	mov.w	r2, #0
 8002416:	649a      	str	r2, [r3, #72]	@ 0x48

}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	0000      	movs	r0, r0
	...

08002428 <Update_qei>:

void Update_qei(QEI* qei, TIM_HandleTypeDef* htim){
 8002428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
 8002432:	6039      	str	r1, [r7, #0]
	// Update counter
	qei -> counter_value[NEW] = __HAL_TIM_GET_COUNTER(htim);
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	60da      	str	r2, [r3, #12]
	// Update difference of counter's value = NEW - OLD
	qei -> diff_counter_value = qei -> counter_value[NEW] - qei -> counter_value[OLD];
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68da      	ldr	r2, [r3, #12]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	461a      	mov	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	615a      	str	r2, [r3, #20]
	if(qei -> diff_counter_value > qei -> period / 2){
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	695a      	ldr	r2, [r3, #20]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	0fd9      	lsrs	r1, r3, #31
 8002458:	440b      	add	r3, r1
 800245a:	105b      	asrs	r3, r3, #1
 800245c:	429a      	cmp	r2, r3
 800245e:	dd06      	ble.n	800246e <Update_qei+0x46>
		qei -> diff_counter_value -= qei -> period;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695a      	ldr	r2, [r3, #20]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	1ad2      	subs	r2, r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	615a      	str	r2, [r3, #20]
	}
	// over flow problem
	if(qei -> diff_counter_value < -(qei -> period) / 2){
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	425b      	negs	r3, r3
 8002478:	0fd9      	lsrs	r1, r3, #31
 800247a:	440b      	add	r3, r1
 800247c:	105b      	asrs	r3, r3, #1
 800247e:	429a      	cmp	r2, r3
 8002480:	da06      	bge.n	8002490 <Update_qei+0x68>
		qei -> diff_counter_value += qei -> period;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695a      	ldr	r2, [r3, #20]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	441a      	add	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	615a      	str	r2, [r3, #20]
	}
	// Update velocity at difference unit
	qei -> pps = (float)qei -> diff_counter_value * (float)(qei -> freq);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	ee07 3a90 	vmov	s15, r3
 80024a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ac:	ee17 0a90 	vmov	r0, s15
 80024b0:	f7fe f816 	bl	80004e0 <__aeabi_f2d>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> radps = qei -> pps * 2.0 * M_PI / (float)(qei -> ppr);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	f7fd feac 	bl	8000224 <__adddf3>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	a3dc      	add	r3, pc, #880	@ (adr r3, 8002848 <Update_qei+0x420>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fe f859 	bl	8000590 <__aeabi_dmul>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	4692      	mov	sl, r2
 80024e4:	469b      	mov	fp, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f2:	ee17 0a90 	vmov	r0, s15
 80024f6:	f7fd fff3 	bl	80004e0 <__aeabi_f2d>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	4650      	mov	r0, sl
 8002500:	4659      	mov	r1, fp
 8002502:	f7fe f96f 	bl	80007e4 <__aeabi_ddiv>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4610      	mov	r0, r2
 800250c:	4619      	mov	r1, r3
 800250e:	f7fe fb21 	bl	8000b54 <__aeabi_d2f>
 8002512:	4602      	mov	r2, r0
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> rpm = qei -> pps * 60.0 / (float)(qei -> ppr) ;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 800251e:	f04f 0200 	mov.w	r2, #0
 8002522:	4bcb      	ldr	r3, [pc, #812]	@ (8002850 <Update_qei+0x428>)
 8002524:	f7fe f834 	bl	8000590 <__aeabi_dmul>
 8002528:	4602      	mov	r2, r0
 800252a:	460b      	mov	r3, r1
 800252c:	4692      	mov	sl, r2
 800252e:	469b      	mov	fp, r3
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	ee07 3a90 	vmov	s15, r3
 8002538:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253c:	ee17 0a90 	vmov	r0, s15
 8002540:	f7fd ffce 	bl	80004e0 <__aeabi_f2d>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4650      	mov	r0, sl
 800254a:	4659      	mov	r1, fp
 800254c:	f7fe f94a 	bl	80007e4 <__aeabi_ddiv>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f7fe fafc 	bl	8000b54 <__aeabi_d2f>
 800255c:	4602      	mov	r2, r0
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> mmps = qei -> pps * 16.0 / (float)(qei -> ppr);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	@ 0x30
 8002568:	f04f 0200 	mov.w	r2, #0
 800256c:	4bb9      	ldr	r3, [pc, #740]	@ (8002854 <Update_qei+0x42c>)
 800256e:	f7fe f80f 	bl	8000590 <__aeabi_dmul>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4692      	mov	sl, r2
 8002578:	469b      	mov	fp, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002586:	ee17 0a90 	vmov	r0, s15
 800258a:	f7fd ffa9 	bl	80004e0 <__aeabi_f2d>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4650      	mov	r0, sl
 8002594:	4659      	mov	r1, fp
 8002596:	f7fe f925 	bl	80007e4 <__aeabi_ddiv>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4610      	mov	r0, r2
 80025a0:	4619      	mov	r1, r3
 80025a2:	f7fe fad7 	bl	8000b54 <__aeabi_d2f>
 80025a6:	4602      	mov	r2, r0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	641a      	str	r2, [r3, #64]	@ 0x40

	// Update position at difference unit
	qei -> pulse += qei -> diff_counter_value;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	6949      	ldr	r1, [r1, #20]
 80025b6:	17c8      	asrs	r0, r1, #31
 80025b8:	460c      	mov	r4, r1
 80025ba:	4605      	mov	r5, r0
 80025bc:	eb12 0804 	adds.w	r8, r2, r4
 80025c0:	eb43 0905 	adc.w	r9, r3, r5
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	e9c3 8906 	strd	r8, r9, [r3, #24]
	qei -> rad += (float)qei -> diff_counter_value * 2.0 * M_PI / (float)(qei -> ppr);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ff86 	bl	80004e0 <__aeabi_f2d>
 80025d4:	4604      	mov	r4, r0
 80025d6:	460d      	mov	r5, r1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	695b      	ldr	r3, [r3, #20]
 80025dc:	ee07 3a90 	vmov	s15, r3
 80025e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025e4:	ee17 0a90 	vmov	r0, s15
 80025e8:	f7fd ff7a 	bl	80004e0 <__aeabi_f2d>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	f7fd fe18 	bl	8000224 <__adddf3>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4610      	mov	r0, r2
 80025fa:	4619      	mov	r1, r3
 80025fc:	a392      	add	r3, pc, #584	@ (adr r3, 8002848 <Update_qei+0x420>)
 80025fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002602:	f7fd ffc5 	bl	8000590 <__aeabi_dmul>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4690      	mov	r8, r2
 800260c:	4699      	mov	r9, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	ee07 3a90 	vmov	s15, r3
 8002616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800261a:	ee17 0a90 	vmov	r0, s15
 800261e:	f7fd ff5f 	bl	80004e0 <__aeabi_f2d>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4640      	mov	r0, r8
 8002628:	4649      	mov	r1, r9
 800262a:	f7fe f8db 	bl	80007e4 <__aeabi_ddiv>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4620      	mov	r0, r4
 8002634:	4629      	mov	r1, r5
 8002636:	f7fd fdf5 	bl	8000224 <__adddf3>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4610      	mov	r0, r2
 8002640:	4619      	mov	r1, r3
 8002642:	f7fe fa87 	bl	8000b54 <__aeabi_d2f>
 8002646:	4602      	mov	r2, r0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev += (float)qei -> diff_counter_value / (float)(qei -> ppr);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	ed93 7a08 	vldr	s14, [r3, #32]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	695b      	ldr	r3, [r3, #20]
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800266a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800266e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	edc3 7a08 	vstr	s15, [r3, #32]
	qei -> mm += (float)qei -> diff_counter_value * 16.0 / (float)(qei -> ppr); // for lead 16 mm.
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267c:	4618      	mov	r0, r3
 800267e:	f7fd ff2f 	bl	80004e0 <__aeabi_f2d>
 8002682:	4604      	mov	r4, r0
 8002684:	460d      	mov	r5, r1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	695b      	ldr	r3, [r3, #20]
 800268a:	ee07 3a90 	vmov	s15, r3
 800268e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002692:	ee17 0a90 	vmov	r0, s15
 8002696:	f7fd ff23 	bl	80004e0 <__aeabi_f2d>
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	4b6d      	ldr	r3, [pc, #436]	@ (8002854 <Update_qei+0x42c>)
 80026a0:	f7fd ff76 	bl	8000590 <__aeabi_dmul>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4690      	mov	r8, r2
 80026aa:	4699      	mov	r9, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026b8:	ee17 0a90 	vmov	r0, s15
 80026bc:	f7fd ff10 	bl	80004e0 <__aeabi_f2d>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4640      	mov	r0, r8
 80026c6:	4649      	mov	r1, r9
 80026c8:	f7fe f88c 	bl	80007e4 <__aeabi_ddiv>
 80026cc:	4602      	mov	r2, r0
 80026ce:	460b      	mov	r3, r1
 80026d0:	4620      	mov	r0, r4
 80026d2:	4629      	mov	r1, r5
 80026d4:	f7fd fda6 	bl	8000224 <__adddf3>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4610      	mov	r0, r2
 80026de:	4619      	mov	r1, r3
 80026e0:	f7fe fa38 	bl	8000b54 <__aeabi_d2f>
 80026e4:	4602      	mov	r2, r0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	629a      	str	r2, [r3, #40]	@ 0x28

	// Update acceleration
	qei -> velocity_value[NEW] = qei -> pps;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80026f0:	4610      	mov	r0, r2
 80026f2:	4619      	mov	r1, r3
 80026f4:	f7fe fa2e 	bl	8000b54 <__aeabi_d2f>
 80026f8:	4602      	mov	r2, r0
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> diff_velocity_value = qei -> velocity_value[NEW] - qei -> velocity_value[OLD];
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
 800270a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	edc3 7a13 	vstr	s15, [r3, #76]	@ 0x4c
	qei -> ppss = qei -> diff_velocity_value * (float)(qei -> freq);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	ed93 7a13 	vldr	s14, [r3, #76]	@ 0x4c
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	qei -> radpss = qei -> ppss * 2.0 * M_PI / (float)(qei -> ppr);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fed3 	bl	80004e0 <__aeabi_f2d>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	f7fd fd71 	bl	8000224 <__adddf3>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	a33f      	add	r3, pc, #252	@ (adr r3, 8002848 <Update_qei+0x420>)
 800274c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002750:	f7fd ff1e 	bl	8000590 <__aeabi_dmul>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4614      	mov	r4, r2
 800275a:	461d      	mov	r5, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002768:	ee17 0a90 	vmov	r0, s15
 800276c:	f7fd feb8 	bl	80004e0 <__aeabi_f2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4620      	mov	r0, r4
 8002776:	4629      	mov	r1, r5
 8002778:	f7fe f834 	bl	80007e4 <__aeabi_ddiv>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4610      	mov	r0, r2
 8002782:	4619      	mov	r1, r3
 8002784:	f7fe f9e6 	bl	8000b54 <__aeabi_d2f>
 8002788:	4602      	mov	r2, r0
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = qei -> ppss * 60.0 / (float)(qei -> ppr);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002792:	4618      	mov	r0, r3
 8002794:	f7fd fea4 	bl	80004e0 <__aeabi_f2d>
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	4b2c      	ldr	r3, [pc, #176]	@ (8002850 <Update_qei+0x428>)
 800279e:	f7fd fef7 	bl	8000590 <__aeabi_dmul>
 80027a2:	4602      	mov	r2, r0
 80027a4:	460b      	mov	r3, r1
 80027a6:	4614      	mov	r4, r2
 80027a8:	461d      	mov	r5, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027b6:	ee17 0a90 	vmov	r0, s15
 80027ba:	f7fd fe91 	bl	80004e0 <__aeabi_f2d>
 80027be:	4602      	mov	r2, r0
 80027c0:	460b      	mov	r3, r1
 80027c2:	4620      	mov	r0, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	f7fe f80d 	bl	80007e4 <__aeabi_ddiv>
 80027ca:	4602      	mov	r2, r0
 80027cc:	460b      	mov	r3, r1
 80027ce:	4610      	mov	r0, r2
 80027d0:	4619      	mov	r1, r3
 80027d2:	f7fe f9bf 	bl	8000b54 <__aeabi_d2f>
 80027d6:	4602      	mov	r2, r0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = qei -> ppss * 16.0 / (float)(qei -> ppr); // Acceleration in mm/s^2
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd fe7d 	bl	80004e0 <__aeabi_f2d>
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002854 <Update_qei+0x42c>)
 80027ec:	f7fd fed0 	bl	8000590 <__aeabi_dmul>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	4614      	mov	r4, r2
 80027f6:	461d      	mov	r5, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	ee07 3a90 	vmov	s15, r3
 8002800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002804:	ee17 0a90 	vmov	r0, s15
 8002808:	f7fd fe6a 	bl	80004e0 <__aeabi_f2d>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4620      	mov	r0, r4
 8002812:	4629      	mov	r1, r5
 8002814:	f7fd ffe6 	bl	80007e4 <__aeabi_ddiv>
 8002818:	4602      	mov	r2, r0
 800281a:	460b      	mov	r3, r1
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	f7fe f998 	bl	8000b54 <__aeabi_d2f>
 8002824:	4602      	mov	r2, r0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	65da      	str	r2, [r3, #92]	@ 0x5c

	// Update OLD value
	qei -> counter_value[OLD] = qei -> counter_value[NEW];
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]
	qei -> velocity_value[OLD] = qei -> velocity_value[NEW];
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	649a      	str	r2, [r3, #72]	@ 0x48

}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002844:	f3af 8000 	nop.w
 8002848:	54442d18 	.word	0x54442d18
 800284c:	400921fb 	.word	0x400921fb
 8002850:	404e0000 	.word	0x404e0000
 8002854:	40300000 	.word	0x40300000

08002858 <Reset_qei>:

void Reset_qei(QEI* qei){
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
	qei -> counter_value[NEW] = 0;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	60da      	str	r2, [r3, #12]
	qei -> counter_value[OLD] = 0;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	611a      	str	r2, [r3, #16]
	qei -> diff_counter_value = 0;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	615a      	str	r2, [r3, #20]
	qei -> pulse = 0;
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	qei -> rad = 0.0;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	625a      	str	r2, [r3, #36]	@ 0x24
	qei -> rev = 0.0;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	621a      	str	r2, [r3, #32]
	qei -> mm = 0.0;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f04f 0200 	mov.w	r2, #0
 8002896:	629a      	str	r2, [r3, #40]	@ 0x28
	qei -> pps = 0.0;
 8002898:	6879      	ldr	r1, [r7, #4]
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
	qei -> rpm = 0.0;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f04f 0200 	mov.w	r2, #0
 80028ac:	639a      	str	r2, [r3, #56]	@ 0x38
	qei -> radps = 0.0;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	qei -> mmps = 0.0;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	641a      	str	r2, [r3, #64]	@ 0x40
	qei -> radpss = 0.0;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f04f 0200 	mov.w	r2, #0
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54
	qei -> rpms = 0.0;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	659a      	str	r2, [r3, #88]	@ 0x58
	qei -> mmpss = 0.0;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	65da      	str	r2, [r3, #92]	@ 0x5c
	qei -> velocity_value[NEW] = 0;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f04f 0200 	mov.w	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	@ 0x44
	qei -> velocity_value[OLD] = 0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f04f 0200 	mov.w	r2, #0
 80028e4:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <Get_mmps>:

float32_t Get_mmps(QEI* qei){
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
	return qei -> mmps;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	ee07 3a90 	vmov	s15, r3
}
 8002902:	eeb0 0a67 	vmov.f32	s0, s15
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	4b0f      	ldr	r3, [pc, #60]	@ (8002954 <HAL_MspInit+0x44>)
 8002918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291a:	4a0e      	ldr	r2, [pc, #56]	@ (8002954 <HAL_MspInit+0x44>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6613      	str	r3, [r2, #96]	@ 0x60
 8002922:	4b0c      	ldr	r3, [pc, #48]	@ (8002954 <HAL_MspInit+0x44>)
 8002924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	607b      	str	r3, [r7, #4]
 800292c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800292e:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <HAL_MspInit+0x44>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002932:	4a08      	ldr	r2, [pc, #32]	@ (8002954 <HAL_MspInit+0x44>)
 8002934:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002938:	6593      	str	r3, [r2, #88]	@ 0x58
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_MspInit+0x44>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002942:	603b      	str	r3, [r7, #0]
 8002944:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002946:	f003 f867 	bl	8005a18 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b09e      	sub	sp, #120	@ 0x78
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	2254      	movs	r2, #84	@ 0x54
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f007 fedf 	bl	800a73c <memset>
  if(hadc->Instance==ADC1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002986:	d167      	bne.n	8002a58 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002988:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800298c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800298e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002992:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002994:	f107 0310 	add.w	r3, r7, #16
 8002998:	4618      	mov	r0, r3
 800299a:	f003 fd7b 	bl	8006494 <HAL_RCCEx_PeriphCLKConfig>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80029a4:	f7ff fada 	bl	8001f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80029a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a60 <HAL_ADC_MspInit+0x108>)
 80029aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002a60 <HAL_ADC_MspInit+0x108>)
 80029ae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002a60 <HAL_ADC_MspInit+0x108>)
 80029b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029bc:	60fb      	str	r3, [r7, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029c0:	4b27      	ldr	r3, [pc, #156]	@ (8002a60 <HAL_ADC_MspInit+0x108>)
 80029c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029c4:	4a26      	ldr	r2, [pc, #152]	@ (8002a60 <HAL_ADC_MspInit+0x108>)
 80029c6:	f043 0301 	orr.w	r3, r3, #1
 80029ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029cc:	4b24      	ldr	r3, [pc, #144]	@ (8002a60 <HAL_ADC_MspInit+0x108>)
 80029ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	60bb      	str	r3, [r7, #8]
 80029d6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Current_sensor_Pin;
 80029d8:	2301      	movs	r3, #1
 80029da:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029dc:	2303      	movs	r3, #3
 80029de:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e0:	2300      	movs	r3, #0
 80029e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(Current_sensor_GPIO_Port, &GPIO_InitStruct);
 80029e4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80029e8:	4619      	mov	r1, r3
 80029ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029ee:	f002 fda5 	bl	800553c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80029f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 80029f4:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <HAL_ADC_MspInit+0x110>)
 80029f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80029f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 80029fa:	2205      	movs	r2, #5
 80029fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029fe:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a04:	4b17      	ldr	r3, [pc, #92]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a0a:	4b16      	ldr	r3, [pc, #88]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002a0c:	2280      	movs	r2, #128	@ 0x80
 8002a0e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a10:	4b14      	ldr	r3, [pc, #80]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002a12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a16:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a18:	4b12      	ldr	r3, [pc, #72]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002a1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a1e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a20:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002a22:	2220      	movs	r2, #32
 8002a24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a26:	4b0f      	ldr	r3, [pc, #60]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a2c:	480d      	ldr	r0, [pc, #52]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002a2e:	f002 fa53 	bl	8004ed8 <HAL_DMA_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8002a38:	f7ff fa90 	bl	8001f5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	4a09      	ldr	r2, [pc, #36]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a42:	4a08      	ldr	r2, [pc, #32]	@ (8002a64 <HAL_ADC_MspInit+0x10c>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002a48:	2200      	movs	r2, #0
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	2012      	movs	r0, #18
 8002a4e:	f002 fa0e 	bl	8004e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a52:	2012      	movs	r0, #18
 8002a54:	f002 fa25 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a58:	bf00      	nop
 8002a5a:	3778      	adds	r7, #120	@ 0x78
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40021000 	.word	0x40021000
 8002a64:	20000584 	.word	0x20000584
 8002a68:	40020008 	.word	0x40020008

08002a6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a34      	ldr	r2, [pc, #208]	@ (8002b4c <HAL_TIM_Base_MspInit+0xe0>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d114      	bne.n	8002aa8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a7e:	4b34      	ldr	r3, [pc, #208]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a82:	4a33      	ldr	r2, [pc, #204]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002a84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a88:	6613      	str	r3, [r2, #96]	@ 0x60
 8002a8a:	4b31      	ldr	r3, [pc, #196]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002a8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a8e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002a96:	2200      	movs	r2, #0
 8002a98:	2100      	movs	r1, #0
 8002a9a:	2019      	movs	r0, #25
 8002a9c:	f002 f9e7 	bl	8004e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002aa0:	2019      	movs	r0, #25
 8002aa2:	f002 f9fe 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002aa6:	e04c      	b.n	8002b42 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM3)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a29      	ldr	r2, [pc, #164]	@ (8002b54 <HAL_TIM_Base_MspInit+0xe8>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d114      	bne.n	8002adc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ab2:	4b27      	ldr	r3, [pc, #156]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	4a26      	ldr	r2, [pc, #152]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002ab8:	f043 0302 	orr.w	r3, r3, #2
 8002abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002abe:	4b24      	ldr	r3, [pc, #144]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002aca:	2200      	movs	r2, #0
 8002acc:	2100      	movs	r1, #0
 8002ace:	201d      	movs	r0, #29
 8002ad0:	f002 f9cd 	bl	8004e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ad4:	201d      	movs	r0, #29
 8002ad6:	f002 f9e4 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
}
 8002ada:	e032      	b.n	8002b42 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM5)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b58 <HAL_TIM_Base_MspInit+0xec>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d114      	bne.n	8002b10 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aea:	4a19      	ldr	r2, [pc, #100]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002af2:	4b17      	ldr	r3, [pc, #92]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	60fb      	str	r3, [r7, #12]
 8002afc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2100      	movs	r1, #0
 8002b02:	2032      	movs	r0, #50	@ 0x32
 8002b04:	f002 f9b3 	bl	8004e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002b08:	2032      	movs	r0, #50	@ 0x32
 8002b0a:	f002 f9ca 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
}
 8002b0e:	e018      	b.n	8002b42 <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a11      	ldr	r2, [pc, #68]	@ (8002b5c <HAL_TIM_Base_MspInit+0xf0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d113      	bne.n	8002b42 <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b24:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b26:	4b0a      	ldr	r3, [pc, #40]	@ (8002b50 <HAL_TIM_Base_MspInit+0xe4>)
 8002b28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b2e:	60bb      	str	r3, [r7, #8]
 8002b30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002b32:	2200      	movs	r2, #0
 8002b34:	2100      	movs	r1, #0
 8002b36:	2019      	movs	r0, #25
 8002b38:	f002 f999 	bl	8004e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002b3c:	2019      	movs	r0, #25
 8002b3e:	f002 f9b0 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000c00 	.word	0x40000c00
 8002b5c:	40014400 	.word	0x40014400

08002b60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	@ 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf0 <HAL_TIM_Encoder_MspInit+0x90>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d131      	bne.n	8002be6 <HAL_TIM_Encoder_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b82:	4b1c      	ldr	r3, [pc, #112]	@ (8002bf4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b86:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b8e:	4b19      	ldr	r3, [pc, #100]	@ (8002bf4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	613b      	str	r3, [r7, #16]
 8002b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9a:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9e:	4a15      	ldr	r2, [pc, #84]	@ (8002bf4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002ba0:	f043 0301 	orr.w	r3, r3, #1
 8002ba4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ba6:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <HAL_TIM_Encoder_MspInit+0x94>)
 8002ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = Encoder_A_Pin|Encoder_B_Pin;
 8002bb2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002bc4:	230a      	movs	r3, #10
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bd2:	f002 fcb3 	bl	800553c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	201e      	movs	r0, #30
 8002bdc:	f002 f947 	bl	8004e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002be0:	201e      	movs	r0, #30
 8002be2:	f002 f95e 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002be6:	bf00      	nop
 8002be8:	3728      	adds	r7, #40	@ 0x28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40000800 	.word	0x40000800
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 030c 	add.w	r3, r7, #12
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a11      	ldr	r2, [pc, #68]	@ (8002c5c <HAL_TIM_MspPostInit+0x64>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d11b      	bne.n	8002c52 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c1a:	4b11      	ldr	r3, [pc, #68]	@ (8002c60 <HAL_TIM_MspPostInit+0x68>)
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1e:	4a10      	ldr	r2, [pc, #64]	@ (8002c60 <HAL_TIM_MspPostInit+0x68>)
 8002c20:	f043 0304 	orr.w	r3, r3, #4
 8002c24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c26:	4b0e      	ldr	r3, [pc, #56]	@ (8002c60 <HAL_TIM_MspPostInit+0x68>)
 8002c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_signal_Pin;
 8002c32:	2301      	movs	r3, #1
 8002c34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c42:	2302      	movs	r3, #2
 8002c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_signal_GPIO_Port, &GPIO_InitStruct);
 8002c46:	f107 030c 	add.w	r3, r7, #12
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4805      	ldr	r0, [pc, #20]	@ (8002c64 <HAL_TIM_MspPostInit+0x6c>)
 8002c4e:	f002 fc75 	bl	800553c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c52:	bf00      	nop
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40021000 	.word	0x40021000
 8002c64:	48000800 	.word	0x48000800

08002c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b09e      	sub	sp, #120	@ 0x78
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c70:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
 8002c7c:	60da      	str	r2, [r3, #12]
 8002c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c80:	f107 0310 	add.w	r3, r7, #16
 8002c84:	2254      	movs	r2, #84	@ 0x54
 8002c86:	2100      	movs	r1, #0
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f007 fd57 	bl	800a73c <memset>
  if(huart->Instance==USART2)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a4d      	ldr	r2, [pc, #308]	@ (8002dc8 <HAL_UART_MspInit+0x160>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	f040 8092 	bne.w	8002dbe <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ca2:	f107 0310 	add.w	r3, r7, #16
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f003 fbf4 	bl	8006494 <HAL_RCCEx_PeriphCLKConfig>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d001      	beq.n	8002cb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002cb2:	f7ff f953 	bl	8001f5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cb6:	4b45      	ldr	r3, [pc, #276]	@ (8002dcc <HAL_UART_MspInit+0x164>)
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cba:	4a44      	ldr	r2, [pc, #272]	@ (8002dcc <HAL_UART_MspInit+0x164>)
 8002cbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cc2:	4b42      	ldr	r3, [pc, #264]	@ (8002dcc <HAL_UART_MspInit+0x164>)
 8002cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	60fb      	str	r3, [r7, #12]
 8002ccc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	4b3f      	ldr	r3, [pc, #252]	@ (8002dcc <HAL_UART_MspInit+0x164>)
 8002cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8002dcc <HAL_UART_MspInit+0x164>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002cda:	4b3c      	ldr	r3, [pc, #240]	@ (8002dcc <HAL_UART_MspInit+0x164>)
 8002cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60bb      	str	r3, [r7, #8]
 8002ce4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ce6:	230c      	movs	r3, #12
 8002ce8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002cfe:	4619      	mov	r1, r3
 8002d00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d04:	f002 fc1a 	bl	800553c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8002d08:	4b31      	ldr	r3, [pc, #196]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d0a:	4a32      	ldr	r2, [pc, #200]	@ (8002dd4 <HAL_UART_MspInit+0x16c>)
 8002d0c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002d0e:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d10:	221a      	movs	r2, #26
 8002d12:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d14:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d1a:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d20:	4b2b      	ldr	r3, [pc, #172]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d22:	2280      	movs	r2, #128	@ 0x80
 8002d24:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d26:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d2c:	4b28      	ldr	r3, [pc, #160]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002d32:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d38:	4b25      	ldr	r3, [pc, #148]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d3e:	4824      	ldr	r0, [pc, #144]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d40:	f002 f8ca 	bl	8004ed8 <HAL_DMA_Init>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8002d4a:	f7ff f907 	bl	8001f5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a1f      	ldr	r2, [pc, #124]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002d56:	4a1e      	ldr	r2, [pc, #120]	@ (8002dd0 <HAL_UART_MspInit+0x168>)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel3;
 8002d5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002ddc <HAL_UART_MspInit+0x174>)
 8002d60:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002d62:	4b1d      	ldr	r3, [pc, #116]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002d64:	221b      	movs	r2, #27
 8002d66:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002d6a:	2210      	movs	r2, #16
 8002d6c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d74:	4b18      	ldr	r3, [pc, #96]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002d76:	2280      	movs	r2, #128	@ 0x80
 8002d78:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d7a:	4b17      	ldr	r3, [pc, #92]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d80:	4b15      	ldr	r3, [pc, #84]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002d86:	4b14      	ldr	r3, [pc, #80]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d8c:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d92:	4811      	ldr	r0, [pc, #68]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002d94:	f002 f8a0 	bl	8004ed8 <HAL_DMA_Init>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8002d9e:	f7ff f8dd 	bl	8001f5c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002da6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002da8:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd8 <HAL_UART_MspInit+0x170>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	2026      	movs	r0, #38	@ 0x26
 8002db4:	f002 f85b 	bl	8004e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002db8:	2026      	movs	r0, #38	@ 0x26
 8002dba:	f002 f872 	bl	8004ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002dbe:	bf00      	nop
 8002dc0:	3778      	adds	r7, #120	@ 0x78
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40004400 	.word	0x40004400
 8002dcc:	40021000 	.word	0x40021000
 8002dd0:	20000aac 	.word	0x20000aac
 8002dd4:	4002001c 	.word	0x4002001c
 8002dd8:	20000b0c 	.word	0x20000b0c
 8002ddc:	40020030 	.word	0x40020030

08002de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <NMI_Handler+0x4>

08002de8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dec:	bf00      	nop
 8002dee:	e7fd      	b.n	8002dec <HardFault_Handler+0x4>

08002df0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <MemManage_Handler+0x4>

08002df8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dfc:	bf00      	nop
 8002dfe:	e7fd      	b.n	8002dfc <BusFault_Handler+0x4>

08002e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e04:	bf00      	nop
 8002e06:	e7fd      	b.n	8002e04 <UsageFault_Handler+0x4>

08002e08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e36:	f000 f8ff 	bl	8003038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e44:	4802      	ldr	r0, [pc, #8]	@ (8002e50 <DMA1_Channel1_IRQHandler+0x10>)
 8002e46:	f002 fa2a 	bl	800529e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000584 	.word	0x20000584

08002e54 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002e58:	4802      	ldr	r0, [pc, #8]	@ (8002e64 <DMA1_Channel2_IRQHandler+0x10>)
 8002e5a:	f002 fa20 	bl	800529e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002e5e:	bf00      	nop
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000aac 	.word	0x20000aac

08002e68 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002e6c:	4802      	ldr	r0, [pc, #8]	@ (8002e78 <DMA1_Channel3_IRQHandler+0x10>)
 8002e6e:	f002 fa16 	bl	800529e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000b0c 	.word	0x20000b0c

08002e7c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002e80:	4802      	ldr	r0, [pc, #8]	@ (8002e8c <ADC1_2_IRQHandler+0x10>)
 8002e82:	f000 fdc7 	bl	8003a14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000518 	.word	0x20000518

08002e90 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002e94:	4803      	ldr	r0, [pc, #12]	@ (8002ea4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002e96:	f004 fa4f 	bl	8007338 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8002e9a:	4803      	ldr	r0, [pc, #12]	@ (8002ea8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8002e9c:	f004 fa4c 	bl	8007338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002ea0:	bf00      	nop
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	200005e4 	.word	0x200005e4
 8002ea8:	20000914 	.word	0x20000914

08002eac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002eb0:	4802      	ldr	r0, [pc, #8]	@ (8002ebc <TIM3_IRQHandler+0x10>)
 8002eb2:	f004 fa41 	bl	8007338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	200006b0 	.word	0x200006b0

08002ec0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ec4:	4802      	ldr	r0, [pc, #8]	@ (8002ed0 <TIM4_IRQHandler+0x10>)
 8002ec6:	f004 fa37 	bl	8007338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	2000077c 	.word	0x2000077c

08002ed4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002ed8:	4802      	ldr	r0, [pc, #8]	@ (8002ee4 <USART2_IRQHandler+0x10>)
 8002eda:	f005 ff81 	bl	8008de0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	200009e0 	.word	0x200009e0

08002ee8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_Pin);
 8002eec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002ef0:	f002 fcd6 	bl	80058a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002ef4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ef8:	f002 fcd2 	bl	80058a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Emergency_switch_Pin);
 8002efc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002f00:	f002 fcce 	bl	80058a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f04:	bf00      	nop
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f0c:	4802      	ldr	r0, [pc, #8]	@ (8002f18 <TIM5_IRQHandler+0x10>)
 8002f0e:	f004 fa13 	bl	8007338 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f12:	bf00      	nop
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	20000848 	.word	0x20000848

08002f1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002f20:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <SystemInit+0x20>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f26:	4a05      	ldr	r2, [pc, #20]	@ (8002f3c <SystemInit+0x20>)
 8002f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f30:	bf00      	nop
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	e000ed00 	.word	0xe000ed00

08002f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002f40:	480d      	ldr	r0, [pc, #52]	@ (8002f78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002f42:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002f44:	f7ff ffea 	bl	8002f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002f48:	480c      	ldr	r0, [pc, #48]	@ (8002f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8002f4a:	490d      	ldr	r1, [pc, #52]	@ (8002f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f84 <LoopForever+0xe>)
  movs r3, #0
 8002f4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002f50:	e002      	b.n	8002f58 <LoopCopyDataInit>

08002f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f56:	3304      	adds	r3, #4

08002f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f5c:	d3f9      	bcc.n	8002f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002f60:	4c0a      	ldr	r4, [pc, #40]	@ (8002f8c <LoopForever+0x16>)
  movs r3, #0
 8002f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f64:	e001      	b.n	8002f6a <LoopFillZerobss>

08002f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f68:	3204      	adds	r2, #4

08002f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f6c:	d3fb      	bcc.n	8002f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f6e:	f007 fbed 	bl	800a74c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002f72:	f7fe f90f 	bl	8001194 <main>

08002f76 <LoopForever>:

LoopForever:
    b LoopForever
 8002f76:	e7fe      	b.n	8002f76 <LoopForever>
  ldr   r0, =_estack
 8002f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f80:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002f84:	0800a7fc 	.word	0x0800a7fc
  ldr r2, =_sbss
 8002f88:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002f8c:	20000ecc 	.word	0x20000ecc

08002f90 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002f90:	e7fe      	b.n	8002f90 <ADC3_IRQHandler>

08002f92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f9c:	2003      	movs	r0, #3
 8002f9e:	f001 ff5b 	bl	8004e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fa2:	2000      	movs	r0, #0
 8002fa4:	f000 f80e 	bl	8002fc4 <HAL_InitTick>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d002      	beq.n	8002fb4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	71fb      	strb	r3, [r7, #7]
 8002fb2:	e001      	b.n	8002fb8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002fb4:	f7ff fcac 	bl	8002910 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002fb8:	79fb      	ldrb	r3, [r7, #7]

}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002fd0:	4b16      	ldr	r3, [pc, #88]	@ (800302c <HAL_InitTick+0x68>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d022      	beq.n	800301e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002fd8:	4b15      	ldr	r3, [pc, #84]	@ (8003030 <HAL_InitTick+0x6c>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	4b13      	ldr	r3, [pc, #76]	@ (800302c <HAL_InitTick+0x68>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fec:	4618      	mov	r0, r3
 8002fee:	f001 ff66 	bl	8004ebe <HAL_SYSTICK_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10f      	bne.n	8003018 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b0f      	cmp	r3, #15
 8002ffc:	d809      	bhi.n	8003012 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ffe:	2200      	movs	r2, #0
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	f04f 30ff 	mov.w	r0, #4294967295
 8003006:	f001 ff32 	bl	8004e6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800300a:	4a0a      	ldr	r2, [pc, #40]	@ (8003034 <HAL_InitTick+0x70>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6013      	str	r3, [r2, #0]
 8003010:	e007      	b.n	8003022 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	73fb      	strb	r3, [r7, #15]
 8003016:	e004      	b.n	8003022 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	73fb      	strb	r3, [r7, #15]
 800301c:	e001      	b.n	8003022 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003022:	7bfb      	ldrb	r3, [r7, #15]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	20000014 	.word	0x20000014
 8003030:	2000000c 	.word	0x2000000c
 8003034:	20000010 	.word	0x20000010

08003038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800303c:	4b05      	ldr	r3, [pc, #20]	@ (8003054 <HAL_IncTick+0x1c>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b05      	ldr	r3, [pc, #20]	@ (8003058 <HAL_IncTick+0x20>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4413      	add	r3, r2
 8003046:	4a03      	ldr	r2, [pc, #12]	@ (8003054 <HAL_IncTick+0x1c>)
 8003048:	6013      	str	r3, [r2, #0]
}
 800304a:	bf00      	nop
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	20000ec8 	.word	0x20000ec8
 8003058:	20000014 	.word	0x20000014

0800305c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800305c:	b480      	push	{r7}
 800305e:	af00      	add	r7, sp, #0
  return uwTick;
 8003060:	4b03      	ldr	r3, [pc, #12]	@ (8003070 <HAL_GetTick+0x14>)
 8003062:	681b      	ldr	r3, [r3, #0]
}
 8003064:	4618      	mov	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000ec8 	.word	0x20000ec8

08003074 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	431a      	orrs	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	609a      	str	r2, [r3, #8]
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800309a:	b480      	push	{r7}
 800309c:	b083      	sub	sp, #12
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	609a      	str	r2, [r3, #8]
}
 80030b4:	bf00      	nop
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030dc:	b480      	push	{r7}
 80030de:	b087      	sub	sp, #28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	3360      	adds	r3, #96	@ 0x60
 80030ee:	461a      	mov	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	4b08      	ldr	r3, [pc, #32]	@ (8003120 <LL_ADC_SetOffset+0x44>)
 80030fe:	4013      	ands	r3, r2
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	4313      	orrs	r3, r2
 800310c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003114:	bf00      	nop
 8003116:	371c      	adds	r7, #28
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	03fff000 	.word	0x03fff000

08003124 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003124:	b480      	push	{r7}
 8003126:	b085      	sub	sp, #20
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3360      	adds	r3, #96	@ 0x60
 8003132:	461a      	mov	r2, r3
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003144:	4618      	mov	r0, r3
 8003146:	3714      	adds	r7, #20
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	3360      	adds	r3, #96	@ 0x60
 8003160:	461a      	mov	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	431a      	orrs	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003186:	b480      	push	{r7}
 8003188:	b087      	sub	sp, #28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	3360      	adds	r3, #96	@ 0x60
 8003196:	461a      	mov	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80031b0:	bf00      	nop
 80031b2:	371c      	adds	r7, #28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3360      	adds	r3, #96	@ 0x60
 80031cc:	461a      	mov	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	431a      	orrs	r2, r3
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80031e6:	bf00      	nop
 80031e8:	371c      	adds	r7, #28
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr

080031f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80031f2:	b480      	push	{r7}
 80031f4:	b083      	sub	sp, #12
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	695b      	ldr	r3, [r3, #20]
 8003200:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	615a      	str	r2, [r3, #20]
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800323e:	b480      	push	{r7}
 8003240:	b087      	sub	sp, #28
 8003242:	af00      	add	r7, sp, #0
 8003244:	60f8      	str	r0, [r7, #12]
 8003246:	60b9      	str	r1, [r7, #8]
 8003248:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3330      	adds	r3, #48	@ 0x30
 800324e:	461a      	mov	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	0a1b      	lsrs	r3, r3, #8
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	4413      	add	r3, r2
 800325c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	211f      	movs	r1, #31
 800326a:	fa01 f303 	lsl.w	r3, r1, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	401a      	ands	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0e9b      	lsrs	r3, r3, #26
 8003276:	f003 011f 	and.w	r1, r3, #31
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	fa01 f303 	lsl.w	r3, r1, r3
 8003284:	431a      	orrs	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003296:	b480      	push	{r7}
 8003298:	b083      	sub	sp, #12
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032a2:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3314      	adds	r3, #20
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	0e5b      	lsrs	r3, r3, #25
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	f003 0304 	and.w	r3, r3, #4
 80032d8:	4413      	add	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	0d1b      	lsrs	r3, r3, #20
 80032e4:	f003 031f 	and.w	r3, r3, #31
 80032e8:	2107      	movs	r1, #7
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	401a      	ands	r2, r3
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	0d1b      	lsrs	r3, r3, #20
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003300:	431a      	orrs	r2, r3
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332c:	43db      	mvns	r3, r3
 800332e:	401a      	ands	r2, r3
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f003 0318 	and.w	r3, r3, #24
 8003336:	4908      	ldr	r1, [pc, #32]	@ (8003358 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003338:	40d9      	lsrs	r1, r3
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	400b      	ands	r3, r1
 800333e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003342:	431a      	orrs	r2, r3
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	0007ffff 	.word	0x0007ffff

0800335c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 031f 	and.w	r3, r3, #31
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8003388:	4618      	mov	r0, r3
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80033a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6093      	str	r3, [r2, #8]
}
 80033ac:	bf00      	nop
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033cc:	d101      	bne.n	80033d2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80033f0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80033f4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003418:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800341c:	d101      	bne.n	8003422 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800341e:	2301      	movs	r3, #1
 8003420:	e000      	b.n	8003424 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003440:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003444:	f043 0201 	orr.w	r2, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b01      	cmp	r3, #1
 800346a:	d101      	bne.n	8003470 <LL_ADC_IsEnabled+0x18>
 800346c:	2301      	movs	r3, #1
 800346e:	e000      	b.n	8003472 <LL_ADC_IsEnabled+0x1a>
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800348e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003492:	f043 0204 	orr.w	r2, r3, #4
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800349a:	bf00      	nop
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 0304 	and.w	r3, r3, #4
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d101      	bne.n	80034be <LL_ADC_REG_IsConversionOngoing+0x18>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d101      	bne.n	80034e4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80034e0:	2301      	movs	r3, #1
 80034e2:	e000      	b.n	80034e6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80034f4:	b590      	push	{r4, r7, lr}
 80034f6:	b089      	sub	sp, #36	@ 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e1a9      	b.n	8003862 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff fa1b 	bl	8002958 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff ff3f 	bl	80033b8 <LL_ADC_IsDeepPowerDownEnabled>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d004      	beq.n	800354a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff25 	bl	8003394 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff5a 	bl	8003408 <LL_ADC_IsInternalRegulatorEnabled>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d115      	bne.n	8003586 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff ff3e 	bl	80033e0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003564:	4b9c      	ldr	r3, [pc, #624]	@ (80037d8 <HAL_ADC_Init+0x2e4>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	4a9c      	ldr	r2, [pc, #624]	@ (80037dc <HAL_ADC_Init+0x2e8>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	099b      	lsrs	r3, r3, #6
 8003572:	3301      	adds	r3, #1
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003578:	e002      	b.n	8003580 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	3b01      	subs	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1f9      	bne.n	800357a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff ff3c 	bl	8003408 <LL_ADC_IsInternalRegulatorEnabled>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10d      	bne.n	80035b2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800359a:	f043 0210 	orr.w	r2, r3, #16
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ff75 	bl	80034a6 <LL_ADC_REG_IsConversionOngoing>
 80035bc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	f040 8142 	bne.w	8003850 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	f040 813e 	bne.w	8003850 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035d8:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80035dc:	f043 0202 	orr.w	r2, r3, #2
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff35 	bl	8003458 <LL_ADC_IsEnabled>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d141      	bne.n	8003678 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80035fc:	d004      	beq.n	8003608 <HAL_ADC_Init+0x114>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a77      	ldr	r2, [pc, #476]	@ (80037e0 <HAL_ADC_Init+0x2ec>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d10f      	bne.n	8003628 <HAL_ADC_Init+0x134>
 8003608:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800360c:	f7ff ff24 	bl	8003458 <LL_ADC_IsEnabled>
 8003610:	4604      	mov	r4, r0
 8003612:	4873      	ldr	r0, [pc, #460]	@ (80037e0 <HAL_ADC_Init+0x2ec>)
 8003614:	f7ff ff20 	bl	8003458 <LL_ADC_IsEnabled>
 8003618:	4603      	mov	r3, r0
 800361a:	4323      	orrs	r3, r4
 800361c:	2b00      	cmp	r3, #0
 800361e:	bf0c      	ite	eq
 8003620:	2301      	moveq	r3, #1
 8003622:	2300      	movne	r3, #0
 8003624:	b2db      	uxtb	r3, r3
 8003626:	e012      	b.n	800364e <HAL_ADC_Init+0x15a>
 8003628:	486e      	ldr	r0, [pc, #440]	@ (80037e4 <HAL_ADC_Init+0x2f0>)
 800362a:	f7ff ff15 	bl	8003458 <LL_ADC_IsEnabled>
 800362e:	4604      	mov	r4, r0
 8003630:	486d      	ldr	r0, [pc, #436]	@ (80037e8 <HAL_ADC_Init+0x2f4>)
 8003632:	f7ff ff11 	bl	8003458 <LL_ADC_IsEnabled>
 8003636:	4603      	mov	r3, r0
 8003638:	431c      	orrs	r4, r3
 800363a:	486c      	ldr	r0, [pc, #432]	@ (80037ec <HAL_ADC_Init+0x2f8>)
 800363c:	f7ff ff0c 	bl	8003458 <LL_ADC_IsEnabled>
 8003640:	4603      	mov	r3, r0
 8003642:	4323      	orrs	r3, r4
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d012      	beq.n	8003678 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800365a:	d004      	beq.n	8003666 <HAL_ADC_Init+0x172>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a5f      	ldr	r2, [pc, #380]	@ (80037e0 <HAL_ADC_Init+0x2ec>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_ADC_Init+0x176>
 8003666:	4a62      	ldr	r2, [pc, #392]	@ (80037f0 <HAL_ADC_Init+0x2fc>)
 8003668:	e000      	b.n	800366c <HAL_ADC_Init+0x178>
 800366a:	4a62      	ldr	r2, [pc, #392]	@ (80037f4 <HAL_ADC_Init+0x300>)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f7ff fcfe 	bl	8003074 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	7f5b      	ldrb	r3, [r3, #29]
 800367c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003682:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003688:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800368e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003696:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003698:	4313      	orrs	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d106      	bne.n	80036b4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	045b      	lsls	r3, r3, #17
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d009      	beq.n	80036d0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c0:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68da      	ldr	r2, [r3, #12]
 80036d6:	4b48      	ldr	r3, [pc, #288]	@ (80037f8 <HAL_ADC_Init+0x304>)
 80036d8:	4013      	ands	r3, r2
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6812      	ldr	r2, [r2, #0]
 80036de:	69b9      	ldr	r1, [r7, #24]
 80036e0:	430b      	orrs	r3, r1
 80036e2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	430a      	orrs	r2, r1
 80036f8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff fee4 	bl	80034cc <LL_ADC_INJ_IsConversionOngoing>
 8003704:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d17f      	bne.n	800380c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d17c      	bne.n	800380c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003716:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800371e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003720:	4313      	orrs	r3, r2
 8003722:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800372e:	f023 0302 	bic.w	r3, r3, #2
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6812      	ldr	r2, [r2, #0]
 8003736:	69b9      	ldr	r1, [r7, #24]
 8003738:	430b      	orrs	r3, r1
 800373a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003752:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800375c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003760:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6911      	ldr	r1, [r2, #16]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	430b      	orrs	r3, r1
 800376e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003772:	e013      	b.n	800379c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691a      	ldr	r2, [r3, #16]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003782:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003794:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003798:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d12a      	bne.n	80037fc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80037bc:	4311      	orrs	r1, r2
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80037c8:	430a      	orrs	r2, r1
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f042 0201 	orr.w	r2, r2, #1
 80037d4:	611a      	str	r2, [r3, #16]
 80037d6:	e019      	b.n	800380c <HAL_ADC_Init+0x318>
 80037d8:	2000000c 	.word	0x2000000c
 80037dc:	053e2d63 	.word	0x053e2d63
 80037e0:	50000100 	.word	0x50000100
 80037e4:	50000400 	.word	0x50000400
 80037e8:	50000500 	.word	0x50000500
 80037ec:	50000600 	.word	0x50000600
 80037f0:	50000300 	.word	0x50000300
 80037f4:	50000700 	.word	0x50000700
 80037f8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	691a      	ldr	r2, [r3, #16]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0201 	bic.w	r2, r2, #1
 800380a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d10c      	bne.n	800382e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381a:	f023 010f 	bic.w	r1, r3, #15
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	1e5a      	subs	r2, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	430a      	orrs	r2, r1
 800382a:	631a      	str	r2, [r3, #48]	@ 0x30
 800382c:	e007      	b.n	800383e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f022 020f 	bic.w	r2, r2, #15
 800383c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	f043 0201 	orr.w	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800384e:	e007      	b.n	8003860 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003854:	f043 0210 	orr.w	r2, r3, #16
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003860:	7ffb      	ldrb	r3, [r7, #31]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3724      	adds	r7, #36	@ 0x24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd90      	pop	{r4, r7, pc}
 800386a:	bf00      	nop

0800386c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003880:	d004      	beq.n	800388c <HAL_ADC_Start_DMA+0x20>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a5a      	ldr	r2, [pc, #360]	@ (80039f0 <HAL_ADC_Start_DMA+0x184>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_ADC_Start_DMA+0x24>
 800388c:	4b59      	ldr	r3, [pc, #356]	@ (80039f4 <HAL_ADC_Start_DMA+0x188>)
 800388e:	e000      	b.n	8003892 <HAL_ADC_Start_DMA+0x26>
 8003890:	4b59      	ldr	r3, [pc, #356]	@ (80039f8 <HAL_ADC_Start_DMA+0x18c>)
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff fd62 	bl	800335c <LL_ADC_GetMultimode>
 8003898:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff fe01 	bl	80034a6 <LL_ADC_REG_IsConversionOngoing>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f040 809b 	bne.w	80039e2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d101      	bne.n	80038ba <HAL_ADC_Start_DMA+0x4e>
 80038b6:	2302      	movs	r3, #2
 80038b8:	e096      	b.n	80039e8 <HAL_ADC_Start_DMA+0x17c>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a4d      	ldr	r2, [pc, #308]	@ (80039fc <HAL_ADC_Start_DMA+0x190>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d008      	beq.n	80038de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d005      	beq.n	80038de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d002      	beq.n	80038de <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b09      	cmp	r3, #9
 80038dc:	d17a      	bne.n	80039d4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80038de:	68f8      	ldr	r0, [r7, #12]
 80038e0:	f000 ff60 	bl	80047a4 <ADC_Enable>
 80038e4:	4603      	mov	r3, r0
 80038e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80038e8:	7dfb      	ldrb	r3, [r7, #23]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d16d      	bne.n	80039ca <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038f6:	f023 0301 	bic.w	r3, r3, #1
 80038fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a3a      	ldr	r2, [pc, #232]	@ (80039f0 <HAL_ADC_Start_DMA+0x184>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d009      	beq.n	8003920 <HAL_ADC_Start_DMA+0xb4>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a3b      	ldr	r2, [pc, #236]	@ (8003a00 <HAL_ADC_Start_DMA+0x194>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d002      	beq.n	800391c <HAL_ADC_Start_DMA+0xb0>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	e003      	b.n	8003924 <HAL_ADC_Start_DMA+0xb8>
 800391c:	4b39      	ldr	r3, [pc, #228]	@ (8003a04 <HAL_ADC_Start_DMA+0x198>)
 800391e:	e001      	b.n	8003924 <HAL_ADC_Start_DMA+0xb8>
 8003920:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	4293      	cmp	r3, r2
 800392a:	d002      	beq.n	8003932 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d105      	bne.n	800393e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003936:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003942:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d006      	beq.n	8003958 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800394e:	f023 0206 	bic.w	r2, r3, #6
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	661a      	str	r2, [r3, #96]	@ 0x60
 8003956:	e002      	b.n	800395e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003962:	4a29      	ldr	r2, [pc, #164]	@ (8003a08 <HAL_ADC_Start_DMA+0x19c>)
 8003964:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396a:	4a28      	ldr	r2, [pc, #160]	@ (8003a0c <HAL_ADC_Start_DMA+0x1a0>)
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003972:	4a27      	ldr	r2, [pc, #156]	@ (8003a10 <HAL_ADC_Start_DMA+0x1a4>)
 8003974:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	221c      	movs	r2, #28
 800397c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0210 	orr.w	r2, r2, #16
 8003994:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	68da      	ldr	r2, [r3, #12]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f042 0201 	orr.w	r2, r2, #1
 80039a4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	3340      	adds	r3, #64	@ 0x40
 80039b0:	4619      	mov	r1, r3
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f001 fb37 	bl	8005028 <HAL_DMA_Start_IT>
 80039ba:	4603      	mov	r3, r0
 80039bc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff fd5b 	bl	800347e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80039c8:	e00d      	b.n	80039e6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80039d2:	e008      	b.n	80039e6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80039e0:	e001      	b.n	80039e6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039e2:	2302      	movs	r3, #2
 80039e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3718      	adds	r7, #24
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	50000100 	.word	0x50000100
 80039f4:	50000300 	.word	0x50000300
 80039f8:	50000700 	.word	0x50000700
 80039fc:	50000600 	.word	0x50000600
 8003a00:	50000500 	.word	0x50000500
 8003a04:	50000400 	.word	0x50000400
 8003a08:	080048d1 	.word	0x080048d1
 8003a0c:	080049a9 	.word	0x080049a9
 8003a10:	080049c5 	.word	0x080049c5

08003a14 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	@ 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a38:	d004      	beq.n	8003a44 <HAL_ADC_IRQHandler+0x30>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a8e      	ldr	r2, [pc, #568]	@ (8003c78 <HAL_ADC_IRQHandler+0x264>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d101      	bne.n	8003a48 <HAL_ADC_IRQHandler+0x34>
 8003a44:	4b8d      	ldr	r3, [pc, #564]	@ (8003c7c <HAL_ADC_IRQHandler+0x268>)
 8003a46:	e000      	b.n	8003a4a <HAL_ADC_IRQHandler+0x36>
 8003a48:	4b8d      	ldr	r3, [pc, #564]	@ (8003c80 <HAL_ADC_IRQHandler+0x26c>)
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff fc86 	bl	800335c <LL_ADC_GetMultimode>
 8003a50:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d017      	beq.n	8003a8c <HAL_ADC_IRQHandler+0x78>
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	f003 0302 	and.w	r3, r3, #2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d012      	beq.n	8003a8c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d105      	bne.n	8003a7e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a76:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f001 f808 	bl	8004a94 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2202      	movs	r2, #2
 8003a8a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d004      	beq.n	8003aa0 <HAL_ADC_IRQHandler+0x8c>
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d10b      	bne.n	8003ab8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f000 8094 	beq.w	8003bd4 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 808e 	beq.w	8003bd4 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d105      	bne.n	8003ad0 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7ff fb9f 	bl	8003218 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d072      	beq.n	8003bc6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a64      	ldr	r2, [pc, #400]	@ (8003c78 <HAL_ADC_IRQHandler+0x264>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d009      	beq.n	8003afe <HAL_ADC_IRQHandler+0xea>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a65      	ldr	r2, [pc, #404]	@ (8003c84 <HAL_ADC_IRQHandler+0x270>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d002      	beq.n	8003afa <HAL_ADC_IRQHandler+0xe6>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	e003      	b.n	8003b02 <HAL_ADC_IRQHandler+0xee>
 8003afa:	4b63      	ldr	r3, [pc, #396]	@ (8003c88 <HAL_ADC_IRQHandler+0x274>)
 8003afc:	e001      	b.n	8003b02 <HAL_ADC_IRQHandler+0xee>
 8003afe:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6812      	ldr	r2, [r2, #0]
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d008      	beq.n	8003b1c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	2b05      	cmp	r3, #5
 8003b14:	d002      	beq.n	8003b1c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2b09      	cmp	r3, #9
 8003b1a:	d104      	bne.n	8003b26 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	623b      	str	r3, [r7, #32]
 8003b24:	e014      	b.n	8003b50 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a53      	ldr	r2, [pc, #332]	@ (8003c78 <HAL_ADC_IRQHandler+0x264>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <HAL_ADC_IRQHandler+0x130>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a53      	ldr	r2, [pc, #332]	@ (8003c84 <HAL_ADC_IRQHandler+0x270>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d002      	beq.n	8003b40 <HAL_ADC_IRQHandler+0x12c>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	e003      	b.n	8003b48 <HAL_ADC_IRQHandler+0x134>
 8003b40:	4b51      	ldr	r3, [pc, #324]	@ (8003c88 <HAL_ADC_IRQHandler+0x274>)
 8003b42:	e001      	b.n	8003b48 <HAL_ADC_IRQHandler+0x134>
 8003b44:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b48:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d135      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0308 	and.w	r3, r3, #8
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d12e      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7ff fc9a 	bl	80034a6 <LL_ADC_REG_IsConversionOngoing>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d11a      	bne.n	8003bae <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f022 020c 	bic.w	r2, r2, #12
 8003b86:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b8c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d112      	bne.n	8003bc6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba4:	f043 0201 	orr.w	r2, r3, #1
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003bac:	e00b      	b.n	8003bc6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb2:	f043 0210 	orr.w	r2, r3, #16
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bbe:	f043 0201 	orr.w	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 f984 	bl	8003ed4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	220c      	movs	r2, #12
 8003bd2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <HAL_ADC_IRQHandler+0x1d4>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10b      	bne.n	8003c00 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80b3 	beq.w	8003d5a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	f000 80ad 	beq.w	8003d5a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d105      	bne.n	8003c18 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c10:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fb3a 	bl	8003296 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003c22:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff faf5 	bl	8003218 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c2e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a10      	ldr	r2, [pc, #64]	@ (8003c78 <HAL_ADC_IRQHandler+0x264>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d009      	beq.n	8003c4e <HAL_ADC_IRQHandler+0x23a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a11      	ldr	r2, [pc, #68]	@ (8003c84 <HAL_ADC_IRQHandler+0x270>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d002      	beq.n	8003c4a <HAL_ADC_IRQHandler+0x236>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	e003      	b.n	8003c52 <HAL_ADC_IRQHandler+0x23e>
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c88 <HAL_ADC_IRQHandler+0x274>)
 8003c4c:	e001      	b.n	8003c52 <HAL_ADC_IRQHandler+0x23e>
 8003c4e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d008      	beq.n	8003c6c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d002      	beq.n	8003c6c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b07      	cmp	r3, #7
 8003c6a:	d10f      	bne.n	8003c8c <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	623b      	str	r3, [r7, #32]
 8003c74:	e01f      	b.n	8003cb6 <HAL_ADC_IRQHandler+0x2a2>
 8003c76:	bf00      	nop
 8003c78:	50000100 	.word	0x50000100
 8003c7c:	50000300 	.word	0x50000300
 8003c80:	50000700 	.word	0x50000700
 8003c84:	50000500 	.word	0x50000500
 8003c88:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a8b      	ldr	r2, [pc, #556]	@ (8003ec0 <HAL_ADC_IRQHandler+0x4ac>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d009      	beq.n	8003caa <HAL_ADC_IRQHandler+0x296>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a8a      	ldr	r2, [pc, #552]	@ (8003ec4 <HAL_ADC_IRQHandler+0x4b0>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d002      	beq.n	8003ca6 <HAL_ADC_IRQHandler+0x292>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	e003      	b.n	8003cae <HAL_ADC_IRQHandler+0x29a>
 8003ca6:	4b88      	ldr	r3, [pc, #544]	@ (8003ec8 <HAL_ADC_IRQHandler+0x4b4>)
 8003ca8:	e001      	b.n	8003cae <HAL_ADC_IRQHandler+0x29a>
 8003caa:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003cae:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d047      	beq.n	8003d4c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_ADC_IRQHandler+0x2c2>
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d03f      	beq.n	8003d4c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d13a      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce0:	2b40      	cmp	r3, #64	@ 0x40
 8003ce2:	d133      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d12e      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7ff fbea 	bl	80034cc <LL_ADC_INJ_IsConversionOngoing>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d11a      	bne.n	8003d34 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d0c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d112      	bne.n	8003d4c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d2a:	f043 0201 	orr.w	r2, r3, #1
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003d32:	e00b      	b.n	8003d4c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d38:	f043 0210 	orr.w	r2, r3, #16
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d44:	f043 0201 	orr.w	r2, r3, #1
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fe79 	bl	8004a44 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2260      	movs	r2, #96	@ 0x60
 8003d58:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d011      	beq.n	8003d88 <HAL_ADC_IRQHandler+0x374>
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00c      	beq.n	8003d88 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d72:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f8be 	bl	8003efc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2280      	movs	r2, #128	@ 0x80
 8003d86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d012      	beq.n	8003db8 <HAL_ADC_IRQHandler+0x3a4>
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00d      	beq.n	8003db8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da0:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fe5f 	bl	8004a6c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003db6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d012      	beq.n	8003de8 <HAL_ADC_IRQHandler+0x3d4>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00d      	beq.n	8003de8 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dd0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fe51 	bl	8004a80 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003de6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0310 	and.w	r3, r3, #16
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d043      	beq.n	8003e7a <HAL_ADC_IRQHandler+0x466>
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d03e      	beq.n	8003e7a <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d102      	bne.n	8003e0a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003e04:	2301      	movs	r3, #1
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e08:	e021      	b.n	8003e4e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d015      	beq.n	8003e3c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e18:	d004      	beq.n	8003e24 <HAL_ADC_IRQHandler+0x410>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a28      	ldr	r2, [pc, #160]	@ (8003ec0 <HAL_ADC_IRQHandler+0x4ac>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d101      	bne.n	8003e28 <HAL_ADC_IRQHandler+0x414>
 8003e24:	4b29      	ldr	r3, [pc, #164]	@ (8003ecc <HAL_ADC_IRQHandler+0x4b8>)
 8003e26:	e000      	b.n	8003e2a <HAL_ADC_IRQHandler+0x416>
 8003e28:	4b29      	ldr	r3, [pc, #164]	@ (8003ed0 <HAL_ADC_IRQHandler+0x4bc>)
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7ff faa4 	bl	8003378 <LL_ADC_GetMultiDMATransfer>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00b      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003e36:	2301      	movs	r3, #1
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e3a:	e008      	b.n	8003e4e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d10e      	bne.n	8003e72 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e58:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e64:	f043 0202 	orr.w	r2, r3, #2
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f84f 	bl	8003f10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2210      	movs	r2, #16
 8003e78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d018      	beq.n	8003eb6 <HAL_ADC_IRQHandler+0x4a2>
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d013      	beq.n	8003eb6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e92:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e9e:	f043 0208 	orr.w	r2, r3, #8
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003eae:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 fdd1 	bl	8004a58 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003eb6:	bf00      	nop
 8003eb8:	3728      	adds	r7, #40	@ 0x28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	50000100 	.word	0x50000100
 8003ec4:	50000500 	.word	0x50000500
 8003ec8:	50000400 	.word	0x50000400
 8003ecc:	50000300 	.word	0x50000300
 8003ed0:	50000700 	.word	0x50000700

08003ed4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003f18:	bf00      	nop
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b0b6      	sub	sp, #216	@ 0xd8
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d102      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x24>
 8003f42:	2302      	movs	r3, #2
 8003f44:	f000 bc13 	b.w	800476e <HAL_ADC_ConfigChannel+0x84a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff faa6 	bl	80034a6 <LL_ADC_REG_IsConversionOngoing>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	f040 83f3 	bne.w	8004748 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	f7ff f965 	bl	800323e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fa94 	bl	80034a6 <LL_ADC_REG_IsConversionOngoing>
 8003f7e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4618      	mov	r0, r3
 8003f88:	f7ff faa0 	bl	80034cc <LL_ADC_INJ_IsConversionOngoing>
 8003f8c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003f90:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 81d9 	bne.w	800434c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003f9a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f040 81d4 	bne.w	800434c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003fac:	d10f      	bne.n	8003fce <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6818      	ldr	r0, [r3, #0]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	4619      	mov	r1, r3
 8003fba:	f7ff f97f 	bl	80032bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f7ff f913 	bl	80031f2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003fcc:	e00e      	b.n	8003fec <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6818      	ldr	r0, [r3, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	6819      	ldr	r1, [r3, #0]
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	f7ff f96e 	bl	80032bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2100      	movs	r1, #0
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7ff f903 	bl	80031f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	08db      	lsrs	r3, r3, #3
 8003ff8:	f003 0303 	and.w	r3, r3, #3
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b04      	cmp	r3, #4
 800400c:	d022      	beq.n	8004054 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	6919      	ldr	r1, [r3, #16]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800401e:	f7ff f85d 	bl	80030dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6818      	ldr	r0, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	6919      	ldr	r1, [r3, #16]
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	461a      	mov	r2, r3
 8004030:	f7ff f8a9 	bl	8003186 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8004040:	2b01      	cmp	r3, #1
 8004042:	d102      	bne.n	800404a <HAL_ADC_ConfigChannel+0x126>
 8004044:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004048:	e000      	b.n	800404c <HAL_ADC_ConfigChannel+0x128>
 800404a:	2300      	movs	r3, #0
 800404c:	461a      	mov	r2, r3
 800404e:	f7ff f8b5 	bl	80031bc <LL_ADC_SetOffsetSaturation>
 8004052:	e17b      	b.n	800434c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2100      	movs	r1, #0
 800405a:	4618      	mov	r0, r3
 800405c:	f7ff f862 	bl	8003124 <LL_ADC_GetOffsetChannel>
 8004060:	4603      	mov	r3, r0
 8004062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x15c>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2100      	movs	r1, #0
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff f857 	bl	8003124 <LL_ADC_GetOffsetChannel>
 8004076:	4603      	mov	r3, r0
 8004078:	0e9b      	lsrs	r3, r3, #26
 800407a:	f003 021f 	and.w	r2, r3, #31
 800407e:	e01e      	b.n	80040be <HAL_ADC_ConfigChannel+0x19a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2100      	movs	r1, #0
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff f84c 	bl	8003124 <LL_ADC_GetOffsetChannel>
 800408c:	4603      	mov	r3, r0
 800408e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004092:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004096:	fa93 f3a3 	rbit	r3, r3
 800409a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800409e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80040a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80040a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d101      	bne.n	80040b2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80040ae:	2320      	movs	r3, #32
 80040b0:	e004      	b.n	80040bc <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80040b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80040b6:	fab3 f383 	clz	r3, r3
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d105      	bne.n	80040d6 <HAL_ADC_ConfigChannel+0x1b2>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	0e9b      	lsrs	r3, r3, #26
 80040d0:	f003 031f 	and.w	r3, r3, #31
 80040d4:	e018      	b.n	8004108 <HAL_ADC_ConfigChannel+0x1e4>
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80040e2:	fa93 f3a3 	rbit	r3, r3
 80040e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 80040ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 80040f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80040fa:	2320      	movs	r3, #32
 80040fc:	e004      	b.n	8004108 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80040fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004102:	fab3 f383 	clz	r3, r3
 8004106:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004108:	429a      	cmp	r2, r3
 800410a:	d106      	bne.n	800411a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2200      	movs	r2, #0
 8004112:	2100      	movs	r1, #0
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff f81b 	bl	8003150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2101      	movs	r1, #1
 8004120:	4618      	mov	r0, r3
 8004122:	f7fe ffff 	bl	8003124 <LL_ADC_GetOffsetChannel>
 8004126:	4603      	mov	r3, r0
 8004128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800412c:	2b00      	cmp	r3, #0
 800412e:	d10a      	bne.n	8004146 <HAL_ADC_ConfigChannel+0x222>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2101      	movs	r1, #1
 8004136:	4618      	mov	r0, r3
 8004138:	f7fe fff4 	bl	8003124 <LL_ADC_GetOffsetChannel>
 800413c:	4603      	mov	r3, r0
 800413e:	0e9b      	lsrs	r3, r3, #26
 8004140:	f003 021f 	and.w	r2, r3, #31
 8004144:	e01e      	b.n	8004184 <HAL_ADC_ConfigChannel+0x260>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2101      	movs	r1, #1
 800414c:	4618      	mov	r0, r3
 800414e:	f7fe ffe9 	bl	8003124 <LL_ADC_GetOffsetChannel>
 8004152:	4603      	mov	r3, r0
 8004154:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004158:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800415c:	fa93 f3a3 	rbit	r3, r3
 8004160:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8004164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004168:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800416c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8004174:	2320      	movs	r3, #32
 8004176:	e004      	b.n	8004182 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8004178:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800417c:	fab3 f383 	clz	r3, r3
 8004180:	b2db      	uxtb	r3, r3
 8004182:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <HAL_ADC_ConfigChannel+0x278>
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	0e9b      	lsrs	r3, r3, #26
 8004196:	f003 031f 	and.w	r3, r3, #31
 800419a:	e018      	b.n	80041ce <HAL_ADC_ConfigChannel+0x2aa>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80041a8:	fa93 f3a3 	rbit	r3, r3
 80041ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80041b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80041b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80041c0:	2320      	movs	r3, #32
 80041c2:	e004      	b.n	80041ce <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80041c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80041c8:	fab3 f383 	clz	r3, r3
 80041cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d106      	bne.n	80041e0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2200      	movs	r2, #0
 80041d8:	2101      	movs	r1, #1
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fe ffb8 	bl	8003150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2102      	movs	r1, #2
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fe ff9c 	bl	8003124 <LL_ADC_GetOffsetChannel>
 80041ec:	4603      	mov	r3, r0
 80041ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10a      	bne.n	800420c <HAL_ADC_ConfigChannel+0x2e8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2102      	movs	r1, #2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe ff91 	bl	8003124 <LL_ADC_GetOffsetChannel>
 8004202:	4603      	mov	r3, r0
 8004204:	0e9b      	lsrs	r3, r3, #26
 8004206:	f003 021f 	and.w	r2, r3, #31
 800420a:	e01e      	b.n	800424a <HAL_ADC_ConfigChannel+0x326>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2102      	movs	r1, #2
 8004212:	4618      	mov	r0, r3
 8004214:	f7fe ff86 	bl	8003124 <LL_ADC_GetOffsetChannel>
 8004218:	4603      	mov	r3, r0
 800421a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800421e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004222:	fa93 f3a3 	rbit	r3, r3
 8004226:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 800422a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800422e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8004232:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800423a:	2320      	movs	r3, #32
 800423c:	e004      	b.n	8004248 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800423e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004242:	fab3 f383 	clz	r3, r3
 8004246:	b2db      	uxtb	r3, r3
 8004248:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004252:	2b00      	cmp	r3, #0
 8004254:	d105      	bne.n	8004262 <HAL_ADC_ConfigChannel+0x33e>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	0e9b      	lsrs	r3, r3, #26
 800425c:	f003 031f 	and.w	r3, r3, #31
 8004260:	e016      	b.n	8004290 <HAL_ADC_ConfigChannel+0x36c>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800426a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800426e:	fa93 f3a3 	rbit	r3, r3
 8004272:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8004274:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004276:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800427a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8004282:	2320      	movs	r3, #32
 8004284:	e004      	b.n	8004290 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8004286:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800428a:	fab3 f383 	clz	r3, r3
 800428e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004290:	429a      	cmp	r2, r3
 8004292:	d106      	bne.n	80042a2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2200      	movs	r2, #0
 800429a:	2102      	movs	r1, #2
 800429c:	4618      	mov	r0, r3
 800429e:	f7fe ff57 	bl	8003150 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2103      	movs	r1, #3
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fe ff3b 	bl	8003124 <LL_ADC_GetOffsetChannel>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <HAL_ADC_ConfigChannel+0x3aa>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2103      	movs	r1, #3
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fe ff30 	bl	8003124 <LL_ADC_GetOffsetChannel>
 80042c4:	4603      	mov	r3, r0
 80042c6:	0e9b      	lsrs	r3, r3, #26
 80042c8:	f003 021f 	and.w	r2, r3, #31
 80042cc:	e017      	b.n	80042fe <HAL_ADC_ConfigChannel+0x3da>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2103      	movs	r1, #3
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fe ff25 	bl	8003124 <LL_ADC_GetOffsetChannel>
 80042da:	4603      	mov	r3, r0
 80042dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80042e0:	fa93 f3a3 	rbit	r3, r3
 80042e4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80042e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042e8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 80042ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d101      	bne.n	80042f4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80042f0:	2320      	movs	r3, #32
 80042f2:	e003      	b.n	80042fc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80042f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004306:	2b00      	cmp	r3, #0
 8004308:	d105      	bne.n	8004316 <HAL_ADC_ConfigChannel+0x3f2>
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	0e9b      	lsrs	r3, r3, #26
 8004310:	f003 031f 	and.w	r3, r3, #31
 8004314:	e011      	b.n	800433a <HAL_ADC_ConfigChannel+0x416>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800431c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800431e:	fa93 f3a3 	rbit	r3, r3
 8004322:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004324:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004326:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004328:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800432e:	2320      	movs	r3, #32
 8004330:	e003      	b.n	800433a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8004332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004334:	fab3 f383 	clz	r3, r3
 8004338:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800433a:	429a      	cmp	r2, r3
 800433c:	d106      	bne.n	800434c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2200      	movs	r2, #0
 8004344:	2103      	movs	r1, #3
 8004346:	4618      	mov	r0, r3
 8004348:	f7fe ff02 	bl	8003150 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff f881 	bl	8003458 <LL_ADC_IsEnabled>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	f040 813d 	bne.w	80045d8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6818      	ldr	r0, [r3, #0]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	6819      	ldr	r1, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	461a      	mov	r2, r3
 800436c:	f7fe ffd2 	bl	8003314 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4aa2      	ldr	r2, [pc, #648]	@ (8004600 <HAL_ADC_ConfigChannel+0x6dc>)
 8004376:	4293      	cmp	r3, r2
 8004378:	f040 812e 	bne.w	80045d8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10b      	bne.n	80043a4 <HAL_ADC_ConfigChannel+0x480>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	0e9b      	lsrs	r3, r3, #26
 8004392:	3301      	adds	r3, #1
 8004394:	f003 031f 	and.w	r3, r3, #31
 8004398:	2b09      	cmp	r3, #9
 800439a:	bf94      	ite	ls
 800439c:	2301      	movls	r3, #1
 800439e:	2300      	movhi	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e019      	b.n	80043d8 <HAL_ADC_ConfigChannel+0x4b4>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80043ac:	fa93 f3a3 	rbit	r3, r3
 80043b0:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 80043b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80043b4:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 80043b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80043bc:	2320      	movs	r3, #32
 80043be:	e003      	b.n	80043c8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80043c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80043c2:	fab3 f383 	clz	r3, r3
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	3301      	adds	r3, #1
 80043ca:	f003 031f 	and.w	r3, r3, #31
 80043ce:	2b09      	cmp	r3, #9
 80043d0:	bf94      	ite	ls
 80043d2:	2301      	movls	r3, #1
 80043d4:	2300      	movhi	r3, #0
 80043d6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d079      	beq.n	80044d0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d107      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x4d4>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	0e9b      	lsrs	r3, r3, #26
 80043ee:	3301      	adds	r3, #1
 80043f0:	069b      	lsls	r3, r3, #26
 80043f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80043f6:	e015      	b.n	8004424 <HAL_ADC_ConfigChannel+0x500>
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004400:	fa93 f3a3 	rbit	r3, r3
 8004404:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004406:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004408:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800440a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8004410:	2320      	movs	r3, #32
 8004412:	e003      	b.n	800441c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8004414:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004416:	fab3 f383 	clz	r3, r3
 800441a:	b2db      	uxtb	r3, r3
 800441c:	3301      	adds	r3, #1
 800441e:	069b      	lsls	r3, r3, #26
 8004420:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800442c:	2b00      	cmp	r3, #0
 800442e:	d109      	bne.n	8004444 <HAL_ADC_ConfigChannel+0x520>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	0e9b      	lsrs	r3, r3, #26
 8004436:	3301      	adds	r3, #1
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	e017      	b.n	8004474 <HAL_ADC_ConfigChannel+0x550>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800444a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800444c:	fa93 f3a3 	rbit	r3, r3
 8004450:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004452:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004454:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800445c:	2320      	movs	r3, #32
 800445e:	e003      	b.n	8004468 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	3301      	adds	r3, #1
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	2101      	movs	r1, #1
 8004470:	fa01 f303 	lsl.w	r3, r1, r3
 8004474:	ea42 0103 	orr.w	r1, r2, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <HAL_ADC_ConfigChannel+0x576>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	0e9b      	lsrs	r3, r3, #26
 800448a:	3301      	adds	r3, #1
 800448c:	f003 021f 	and.w	r2, r3, #31
 8004490:	4613      	mov	r3, r2
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	4413      	add	r3, r2
 8004496:	051b      	lsls	r3, r3, #20
 8004498:	e018      	b.n	80044cc <HAL_ADC_ConfigChannel+0x5a8>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a2:	fa93 f3a3 	rbit	r3, r3
 80044a6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80044a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 80044ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d101      	bne.n	80044b6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80044b2:	2320      	movs	r3, #32
 80044b4:	e003      	b.n	80044be <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80044b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b8:	fab3 f383 	clz	r3, r3
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	3301      	adds	r3, #1
 80044c0:	f003 021f 	and.w	r2, r3, #31
 80044c4:	4613      	mov	r3, r2
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	4413      	add	r3, r2
 80044ca:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044cc:	430b      	orrs	r3, r1
 80044ce:	e07e      	b.n	80045ce <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d107      	bne.n	80044ec <HAL_ADC_ConfigChannel+0x5c8>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	0e9b      	lsrs	r3, r3, #26
 80044e2:	3301      	adds	r3, #1
 80044e4:	069b      	lsls	r3, r3, #26
 80044e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80044ea:	e015      	b.n	8004518 <HAL_ADC_ConfigChannel+0x5f4>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f4:	fa93 f3a3 	rbit	r3, r3
 80044f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80044fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044fc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8004504:	2320      	movs	r3, #32
 8004506:	e003      	b.n	8004510 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450a:	fab3 f383 	clz	r3, r3
 800450e:	b2db      	uxtb	r3, r3
 8004510:	3301      	adds	r3, #1
 8004512:	069b      	lsls	r3, r3, #26
 8004514:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004520:	2b00      	cmp	r3, #0
 8004522:	d109      	bne.n	8004538 <HAL_ADC_ConfigChannel+0x614>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	0e9b      	lsrs	r3, r3, #26
 800452a:	3301      	adds	r3, #1
 800452c:	f003 031f 	and.w	r3, r3, #31
 8004530:	2101      	movs	r1, #1
 8004532:	fa01 f303 	lsl.w	r3, r1, r3
 8004536:	e017      	b.n	8004568 <HAL_ADC_ConfigChannel+0x644>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	6a3b      	ldr	r3, [r7, #32]
 8004540:	fa93 f3a3 	rbit	r3, r3
 8004544:	61fb      	str	r3, [r7, #28]
  return result;
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800454a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454c:	2b00      	cmp	r3, #0
 800454e:	d101      	bne.n	8004554 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004550:	2320      	movs	r3, #32
 8004552:	e003      	b.n	800455c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004556:	fab3 f383 	clz	r3, r3
 800455a:	b2db      	uxtb	r3, r3
 800455c:	3301      	adds	r3, #1
 800455e:	f003 031f 	and.w	r3, r3, #31
 8004562:	2101      	movs	r1, #1
 8004564:	fa01 f303 	lsl.w	r3, r1, r3
 8004568:	ea42 0103 	orr.w	r1, r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004574:	2b00      	cmp	r3, #0
 8004576:	d10d      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x670>
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	0e9b      	lsrs	r3, r3, #26
 800457e:	3301      	adds	r3, #1
 8004580:	f003 021f 	and.w	r2, r3, #31
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	3b1e      	subs	r3, #30
 800458c:	051b      	lsls	r3, r3, #20
 800458e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004592:	e01b      	b.n	80045cc <HAL_ADC_ConfigChannel+0x6a8>
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	fa93 f3a3 	rbit	r3, r3
 80045a0:	613b      	str	r3, [r7, #16]
  return result;
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80045ac:	2320      	movs	r3, #32
 80045ae:	e003      	b.n	80045b8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	fab3 f383 	clz	r3, r3
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	3301      	adds	r3, #1
 80045ba:	f003 021f 	and.w	r2, r3, #31
 80045be:	4613      	mov	r3, r2
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	4413      	add	r3, r2
 80045c4:	3b1e      	subs	r3, #30
 80045c6:	051b      	lsls	r3, r3, #20
 80045c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80045d2:	4619      	mov	r1, r3
 80045d4:	f7fe fe72 	bl	80032bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	4b09      	ldr	r3, [pc, #36]	@ (8004604 <HAL_ADC_ConfigChannel+0x6e0>)
 80045de:	4013      	ands	r3, r2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f000 80be 	beq.w	8004762 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80045ee:	d004      	beq.n	80045fa <HAL_ADC_ConfigChannel+0x6d6>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a04      	ldr	r2, [pc, #16]	@ (8004608 <HAL_ADC_ConfigChannel+0x6e4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d10a      	bne.n	8004610 <HAL_ADC_ConfigChannel+0x6ec>
 80045fa:	4b04      	ldr	r3, [pc, #16]	@ (800460c <HAL_ADC_ConfigChannel+0x6e8>)
 80045fc:	e009      	b.n	8004612 <HAL_ADC_ConfigChannel+0x6ee>
 80045fe:	bf00      	nop
 8004600:	407f0000 	.word	0x407f0000
 8004604:	80080000 	.word	0x80080000
 8004608:	50000100 	.word	0x50000100
 800460c:	50000300 	.word	0x50000300
 8004610:	4b59      	ldr	r3, [pc, #356]	@ (8004778 <HAL_ADC_ConfigChannel+0x854>)
 8004612:	4618      	mov	r0, r3
 8004614:	f7fe fd54 	bl	80030c0 <LL_ADC_GetCommonPathInternalCh>
 8004618:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a56      	ldr	r2, [pc, #344]	@ (800477c <HAL_ADC_ConfigChannel+0x858>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d004      	beq.n	8004630 <HAL_ADC_ConfigChannel+0x70c>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a55      	ldr	r2, [pc, #340]	@ (8004780 <HAL_ADC_ConfigChannel+0x85c>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d13a      	bne.n	80046a6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004630:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004634:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d134      	bne.n	80046a6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004644:	d005      	beq.n	8004652 <HAL_ADC_ConfigChannel+0x72e>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a4e      	ldr	r2, [pc, #312]	@ (8004784 <HAL_ADC_ConfigChannel+0x860>)
 800464c:	4293      	cmp	r3, r2
 800464e:	f040 8085 	bne.w	800475c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800465a:	d004      	beq.n	8004666 <HAL_ADC_ConfigChannel+0x742>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4a49      	ldr	r2, [pc, #292]	@ (8004788 <HAL_ADC_ConfigChannel+0x864>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d101      	bne.n	800466a <HAL_ADC_ConfigChannel+0x746>
 8004666:	4a49      	ldr	r2, [pc, #292]	@ (800478c <HAL_ADC_ConfigChannel+0x868>)
 8004668:	e000      	b.n	800466c <HAL_ADC_ConfigChannel+0x748>
 800466a:	4a43      	ldr	r2, [pc, #268]	@ (8004778 <HAL_ADC_ConfigChannel+0x854>)
 800466c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004670:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004674:	4619      	mov	r1, r3
 8004676:	4610      	mov	r0, r2
 8004678:	f7fe fd0f 	bl	800309a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800467c:	4b44      	ldr	r3, [pc, #272]	@ (8004790 <HAL_ADC_ConfigChannel+0x86c>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	099b      	lsrs	r3, r3, #6
 8004682:	4a44      	ldr	r2, [pc, #272]	@ (8004794 <HAL_ADC_ConfigChannel+0x870>)
 8004684:	fba2 2303 	umull	r2, r3, r2, r3
 8004688:	099b      	lsrs	r3, r3, #6
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	4613      	mov	r3, r2
 800468e:	005b      	lsls	r3, r3, #1
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004696:	e002      	b.n	800469e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	3b01      	subs	r3, #1
 800469c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1f9      	bne.n	8004698 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80046a4:	e05a      	b.n	800475c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a3b      	ldr	r2, [pc, #236]	@ (8004798 <HAL_ADC_ConfigChannel+0x874>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d125      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80046b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d11f      	bne.n	80046fc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a31      	ldr	r2, [pc, #196]	@ (8004788 <HAL_ADC_ConfigChannel+0x864>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d104      	bne.n	80046d0 <HAL_ADC_ConfigChannel+0x7ac>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a34      	ldr	r2, [pc, #208]	@ (800479c <HAL_ADC_ConfigChannel+0x878>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d047      	beq.n	8004760 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80046d8:	d004      	beq.n	80046e4 <HAL_ADC_ConfigChannel+0x7c0>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a2a      	ldr	r2, [pc, #168]	@ (8004788 <HAL_ADC_ConfigChannel+0x864>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d101      	bne.n	80046e8 <HAL_ADC_ConfigChannel+0x7c4>
 80046e4:	4a29      	ldr	r2, [pc, #164]	@ (800478c <HAL_ADC_ConfigChannel+0x868>)
 80046e6:	e000      	b.n	80046ea <HAL_ADC_ConfigChannel+0x7c6>
 80046e8:	4a23      	ldr	r2, [pc, #140]	@ (8004778 <HAL_ADC_ConfigChannel+0x854>)
 80046ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80046ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046f2:	4619      	mov	r1, r3
 80046f4:	4610      	mov	r0, r2
 80046f6:	f7fe fcd0 	bl	800309a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80046fa:	e031      	b.n	8004760 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a27      	ldr	r2, [pc, #156]	@ (80047a0 <HAL_ADC_ConfigChannel+0x87c>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d12d      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004706:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800470a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d127      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a1c      	ldr	r2, [pc, #112]	@ (8004788 <HAL_ADC_ConfigChannel+0x864>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004724:	d004      	beq.n	8004730 <HAL_ADC_ConfigChannel+0x80c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a17      	ldr	r2, [pc, #92]	@ (8004788 <HAL_ADC_ConfigChannel+0x864>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d101      	bne.n	8004734 <HAL_ADC_ConfigChannel+0x810>
 8004730:	4a16      	ldr	r2, [pc, #88]	@ (800478c <HAL_ADC_ConfigChannel+0x868>)
 8004732:	e000      	b.n	8004736 <HAL_ADC_ConfigChannel+0x812>
 8004734:	4a10      	ldr	r2, [pc, #64]	@ (8004778 <HAL_ADC_ConfigChannel+0x854>)
 8004736:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800473a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f7fe fcaa 	bl	800309a <LL_ADC_SetCommonPathInternalCh>
 8004746:	e00c      	b.n	8004762 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474c:	f043 0220 	orr.w	r2, r3, #32
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800475a:	e002      	b.n	8004762 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800475c:	bf00      	nop
 800475e:	e000      	b.n	8004762 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004760:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800476a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800476e:	4618      	mov	r0, r3
 8004770:	37d8      	adds	r7, #216	@ 0xd8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	50000700 	.word	0x50000700
 800477c:	c3210000 	.word	0xc3210000
 8004780:	90c00010 	.word	0x90c00010
 8004784:	50000600 	.word	0x50000600
 8004788:	50000100 	.word	0x50000100
 800478c:	50000300 	.word	0x50000300
 8004790:	2000000c 	.word	0x2000000c
 8004794:	053e2d63 	.word	0x053e2d63
 8004798:	c7520000 	.word	0xc7520000
 800479c:	50000500 	.word	0x50000500
 80047a0:	cb840000 	.word	0xcb840000

080047a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7fe fe4f 	bl	8003458 <LL_ADC_IsEnabled>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d176      	bne.n	80048ae <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	689a      	ldr	r2, [r3, #8]
 80047c6:	4b3c      	ldr	r3, [pc, #240]	@ (80048b8 <ADC_Enable+0x114>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00d      	beq.n	80047ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047d2:	f043 0210 	orr.w	r2, r3, #16
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047de:	f043 0201 	orr.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e062      	b.n	80048b0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fe fe1e 	bl	8003430 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80047fc:	d004      	beq.n	8004808 <ADC_Enable+0x64>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a2e      	ldr	r2, [pc, #184]	@ (80048bc <ADC_Enable+0x118>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d101      	bne.n	800480c <ADC_Enable+0x68>
 8004808:	4b2d      	ldr	r3, [pc, #180]	@ (80048c0 <ADC_Enable+0x11c>)
 800480a:	e000      	b.n	800480e <ADC_Enable+0x6a>
 800480c:	4b2d      	ldr	r3, [pc, #180]	@ (80048c4 <ADC_Enable+0x120>)
 800480e:	4618      	mov	r0, r3
 8004810:	f7fe fc56 	bl	80030c0 <LL_ADC_GetCommonPathInternalCh>
 8004814:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800481a:	2b00      	cmp	r3, #0
 800481c:	d013      	beq.n	8004846 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800481e:	4b2a      	ldr	r3, [pc, #168]	@ (80048c8 <ADC_Enable+0x124>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	099b      	lsrs	r3, r3, #6
 8004824:	4a29      	ldr	r2, [pc, #164]	@ (80048cc <ADC_Enable+0x128>)
 8004826:	fba2 2303 	umull	r2, r3, r2, r3
 800482a:	099b      	lsrs	r3, r3, #6
 800482c:	1c5a      	adds	r2, r3, #1
 800482e:	4613      	mov	r3, r2
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004838:	e002      	b.n	8004840 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	3b01      	subs	r3, #1
 800483e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d1f9      	bne.n	800483a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004846:	f7fe fc09 	bl	800305c <HAL_GetTick>
 800484a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800484c:	e028      	b.n	80048a0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f7fe fe00 	bl	8003458 <LL_ADC_IsEnabled>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d104      	bne.n	8004868 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fe fde4 	bl	8003430 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004868:	f7fe fbf8 	bl	800305c <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d914      	bls.n	80048a0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b01      	cmp	r3, #1
 8004882:	d00d      	beq.n	80048a0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004888:	f043 0210 	orr.w	r2, r3, #16
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004894:	f043 0201 	orr.w	r2, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e007      	b.n	80048b0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d1cf      	bne.n	800484e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	8000003f 	.word	0x8000003f
 80048bc:	50000100 	.word	0x50000100
 80048c0:	50000300 	.word	0x50000300
 80048c4:	50000700 	.word	0x50000700
 80048c8:	2000000c 	.word	0x2000000c
 80048cc:	053e2d63 	.word	0x053e2d63

080048d0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048dc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048e2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d14b      	bne.n	8004982 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b00      	cmp	r3, #0
 8004902:	d021      	beq.n	8004948 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f7fe fc85 	bl	8003218 <LL_ADC_REG_IsTriggerSourceSWStart>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d032      	beq.n	800497a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
 800491a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d12b      	bne.n	800497a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004926:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004932:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d11f      	bne.n	800497a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493e:	f043 0201 	orr.w	r2, r3, #1
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004946:	e018      	b.n	800497a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 0302 	and.w	r3, r3, #2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d111      	bne.n	800497a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004966:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d105      	bne.n	800497a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004972:	f043 0201 	orr.w	r2, r3, #1
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f7ff faaa 	bl	8003ed4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004980:	e00e      	b.n	80049a0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004986:	f003 0310 	and.w	r3, r3, #16
 800498a:	2b00      	cmp	r3, #0
 800498c:	d003      	beq.n	8004996 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f7ff fabe 	bl	8003f10 <HAL_ADC_ErrorCallback>
}
 8004994:	e004      	b.n	80049a0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	4798      	blx	r3
}
 80049a0:	bf00      	nop
 80049a2:	3710      	adds	r7, #16
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}

080049a8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f7ff fa96 	bl	8003ee8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049e2:	f043 0204 	orr.w	r2, r3, #4
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	f7ff fa90 	bl	8003f10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80049f0:	bf00      	nop
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <LL_ADC_IsEnabled>:
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0301 	and.w	r3, r3, #1
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <LL_ADC_IsEnabled+0x18>
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e000      	b.n	8004a12 <LL_ADC_IsEnabled+0x1a>
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <LL_ADC_REG_IsConversionOngoing>:
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d101      	bne.n	8004a36 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004a36:	2300      	movs	r3, #0
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004a74:	bf00      	nop
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004a88:	bf00      	nop
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004aa8:	b590      	push	{r4, r7, lr}
 8004aaa:	b0a1      	sub	sp, #132	@ 0x84
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	e0e7      	b.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2201      	movs	r2, #1
 8004aca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004ace:	2300      	movs	r3, #0
 8004ad0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004ade:	d102      	bne.n	8004ae6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004ae0:	4b6f      	ldr	r3, [pc, #444]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	e009      	b.n	8004afa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a6e      	ldr	r2, [pc, #440]	@ (8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d102      	bne.n	8004af6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004af0:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	e001      	b.n	8004afa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004af6:	2300      	movs	r3, #0
 8004af8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10b      	bne.n	8004b18 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b04:	f043 0220 	orr.w	r2, r3, #32
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	e0be      	b.n	8004c96 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f7ff ff7f 	bl	8004a1e <LL_ADC_REG_IsConversionOngoing>
 8004b20:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff ff79 	bl	8004a1e <LL_ADC_REG_IsConversionOngoing>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 80a0 	bne.w	8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004b34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f040 809c 	bne.w	8004c74 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b44:	d004      	beq.n	8004b50 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a55      	ldr	r2, [pc, #340]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d101      	bne.n	8004b54 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004b50:	4b56      	ldr	r3, [pc, #344]	@ (8004cac <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004b52:	e000      	b.n	8004b56 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004b54:	4b56      	ldr	r3, [pc, #344]	@ (8004cb0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004b56:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d04b      	beq.n	8004bf8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004b60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	6859      	ldr	r1, [r3, #4]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004b72:	035b      	lsls	r3, r3, #13
 8004b74:	430b      	orrs	r3, r1
 8004b76:	431a      	orrs	r2, r3
 8004b78:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b7a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004b84:	d004      	beq.n	8004b90 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a45      	ldr	r2, [pc, #276]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10f      	bne.n	8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004b90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004b94:	f7ff ff30 	bl	80049f8 <LL_ADC_IsEnabled>
 8004b98:	4604      	mov	r4, r0
 8004b9a:	4841      	ldr	r0, [pc, #260]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b9c:	f7ff ff2c 	bl	80049f8 <LL_ADC_IsEnabled>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	4323      	orrs	r3, r4
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	bf0c      	ite	eq
 8004ba8:	2301      	moveq	r3, #1
 8004baa:	2300      	movne	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	e012      	b.n	8004bd6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004bb0:	483c      	ldr	r0, [pc, #240]	@ (8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004bb2:	f7ff ff21 	bl	80049f8 <LL_ADC_IsEnabled>
 8004bb6:	4604      	mov	r4, r0
 8004bb8:	483b      	ldr	r0, [pc, #236]	@ (8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004bba:	f7ff ff1d 	bl	80049f8 <LL_ADC_IsEnabled>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	431c      	orrs	r4, r3
 8004bc2:	483c      	ldr	r0, [pc, #240]	@ (8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004bc4:	f7ff ff18 	bl	80049f8 <LL_ADC_IsEnabled>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4323      	orrs	r3, r4
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d056      	beq.n	8004c88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004be2:	f023 030f 	bic.w	r3, r3, #15
 8004be6:	683a      	ldr	r2, [r7, #0]
 8004be8:	6811      	ldr	r1, [r2, #0]
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	6892      	ldr	r2, [r2, #8]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bf4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004bf6:	e047      	b.n	8004c88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004bf8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004c00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c02:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004c0c:	d004      	beq.n	8004c18 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a23      	ldr	r2, [pc, #140]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d10f      	bne.n	8004c38 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004c18:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004c1c:	f7ff feec 	bl	80049f8 <LL_ADC_IsEnabled>
 8004c20:	4604      	mov	r4, r0
 8004c22:	481f      	ldr	r0, [pc, #124]	@ (8004ca0 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004c24:	f7ff fee8 	bl	80049f8 <LL_ADC_IsEnabled>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4323      	orrs	r3, r4
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	bf0c      	ite	eq
 8004c30:	2301      	moveq	r3, #1
 8004c32:	2300      	movne	r3, #0
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	e012      	b.n	8004c5e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004c38:	481a      	ldr	r0, [pc, #104]	@ (8004ca4 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004c3a:	f7ff fedd 	bl	80049f8 <LL_ADC_IsEnabled>
 8004c3e:	4604      	mov	r4, r0
 8004c40:	4819      	ldr	r0, [pc, #100]	@ (8004ca8 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004c42:	f7ff fed9 	bl	80049f8 <LL_ADC_IsEnabled>
 8004c46:	4603      	mov	r3, r0
 8004c48:	431c      	orrs	r4, r3
 8004c4a:	481a      	ldr	r0, [pc, #104]	@ (8004cb4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004c4c:	f7ff fed4 	bl	80049f8 <LL_ADC_IsEnabled>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4323      	orrs	r3, r4
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf0c      	ite	eq
 8004c58:	2301      	moveq	r3, #1
 8004c5a:	2300      	movne	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d012      	beq.n	8004c88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004c62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004c6a:	f023 030f 	bic.w	r3, r3, #15
 8004c6e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c70:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c72:	e009      	b.n	8004c88 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c78:	f043 0220 	orr.w	r2, r3, #32
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004c86:	e000      	b.n	8004c8a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004c88:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004c92:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3784      	adds	r7, #132	@ 0x84
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd90      	pop	{r4, r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	50000100 	.word	0x50000100
 8004ca4:	50000400 	.word	0x50000400
 8004ca8:	50000500 	.word	0x50000500
 8004cac:	50000300 	.word	0x50000300
 8004cb0:	50000700 	.word	0x50000700
 8004cb4:	50000600 	.word	0x50000600

08004cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f003 0307 	and.w	r3, r3, #7
 8004cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cfc <__NVIC_SetPriorityGrouping+0x44>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ce0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ce4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cea:	4a04      	ldr	r2, [pc, #16]	@ (8004cfc <__NVIC_SetPriorityGrouping+0x44>)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	60d3      	str	r3, [r2, #12]
}
 8004cf0:	bf00      	nop
 8004cf2:	3714      	adds	r7, #20
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr
 8004cfc:	e000ed00 	.word	0xe000ed00

08004d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d04:	4b04      	ldr	r3, [pc, #16]	@ (8004d18 <__NVIC_GetPriorityGrouping+0x18>)
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	0a1b      	lsrs	r3, r3, #8
 8004d0a:	f003 0307 	and.w	r3, r3, #7
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	e000ed00 	.word	0xe000ed00

08004d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	db0b      	blt.n	8004d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	f003 021f 	and.w	r2, r3, #31
 8004d34:	4907      	ldr	r1, [pc, #28]	@ (8004d54 <__NVIC_EnableIRQ+0x38>)
 8004d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d3a:	095b      	lsrs	r3, r3, #5
 8004d3c:	2001      	movs	r0, #1
 8004d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8004d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	e000e100 	.word	0xe000e100

08004d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	4603      	mov	r3, r0
 8004d60:	6039      	str	r1, [r7, #0]
 8004d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	db0a      	blt.n	8004d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	490c      	ldr	r1, [pc, #48]	@ (8004da4 <__NVIC_SetPriority+0x4c>)
 8004d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d76:	0112      	lsls	r2, r2, #4
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d80:	e00a      	b.n	8004d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	4908      	ldr	r1, [pc, #32]	@ (8004da8 <__NVIC_SetPriority+0x50>)
 8004d88:	79fb      	ldrb	r3, [r7, #7]
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	3b04      	subs	r3, #4
 8004d90:	0112      	lsls	r2, r2, #4
 8004d92:	b2d2      	uxtb	r2, r2
 8004d94:	440b      	add	r3, r1
 8004d96:	761a      	strb	r2, [r3, #24]
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr
 8004da4:	e000e100 	.word	0xe000e100
 8004da8:	e000ed00 	.word	0xe000ed00

08004dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b089      	sub	sp, #36	@ 0x24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dc0:	69fb      	ldr	r3, [r7, #28]
 8004dc2:	f1c3 0307 	rsb	r3, r3, #7
 8004dc6:	2b04      	cmp	r3, #4
 8004dc8:	bf28      	it	cs
 8004dca:	2304      	movcs	r3, #4
 8004dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	2b06      	cmp	r3, #6
 8004dd4:	d902      	bls.n	8004ddc <NVIC_EncodePriority+0x30>
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	3b03      	subs	r3, #3
 8004dda:	e000      	b.n	8004dde <NVIC_EncodePriority+0x32>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de0:	f04f 32ff 	mov.w	r2, #4294967295
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dea:	43da      	mvns	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	401a      	ands	r2, r3
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004df4:	f04f 31ff 	mov.w	r1, #4294967295
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfe:	43d9      	mvns	r1, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e04:	4313      	orrs	r3, r2
         );
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3724      	adds	r7, #36	@ 0x24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
	...

08004e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e24:	d301      	bcc.n	8004e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e26:	2301      	movs	r3, #1
 8004e28:	e00f      	b.n	8004e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004e54 <SysTick_Config+0x40>)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e32:	210f      	movs	r1, #15
 8004e34:	f04f 30ff 	mov.w	r0, #4294967295
 8004e38:	f7ff ff8e 	bl	8004d58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e3c:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <SysTick_Config+0x40>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e42:	4b04      	ldr	r3, [pc, #16]	@ (8004e54 <SysTick_Config+0x40>)
 8004e44:	2207      	movs	r2, #7
 8004e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	e000e010 	.word	0xe000e010

08004e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff ff29 	bl	8004cb8 <__NVIC_SetPriorityGrouping>
}
 8004e66:	bf00      	nop
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b086      	sub	sp, #24
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	4603      	mov	r3, r0
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e7c:	f7ff ff40 	bl	8004d00 <__NVIC_GetPriorityGrouping>
 8004e80:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	6978      	ldr	r0, [r7, #20]
 8004e88:	f7ff ff90 	bl	8004dac <NVIC_EncodePriority>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e92:	4611      	mov	r1, r2
 8004e94:	4618      	mov	r0, r3
 8004e96:	f7ff ff5f 	bl	8004d58 <__NVIC_SetPriority>
}
 8004e9a:	bf00      	nop
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b082      	sub	sp, #8
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f7ff ff33 	bl	8004d1c <__NVIC_EnableIRQ>
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}

08004ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ebe:	b580      	push	{r7, lr}
 8004ec0:	b082      	sub	sp, #8
 8004ec2:	af00      	add	r7, sp, #0
 8004ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff ffa4 	bl	8004e14 <SysTick_Config>
 8004ecc:	4603      	mov	r3, r0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
	...

08004ed8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e08d      	b.n	8005006 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	4b47      	ldr	r3, [pc, #284]	@ (8005010 <HAL_DMA_Init+0x138>)
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d80f      	bhi.n	8004f16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	461a      	mov	r2, r3
 8004efc:	4b45      	ldr	r3, [pc, #276]	@ (8005014 <HAL_DMA_Init+0x13c>)
 8004efe:	4413      	add	r3, r2
 8004f00:	4a45      	ldr	r2, [pc, #276]	@ (8005018 <HAL_DMA_Init+0x140>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	091b      	lsrs	r3, r3, #4
 8004f08:	009a      	lsls	r2, r3, #2
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a42      	ldr	r2, [pc, #264]	@ (800501c <HAL_DMA_Init+0x144>)
 8004f12:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f14:	e00e      	b.n	8004f34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	4b40      	ldr	r3, [pc, #256]	@ (8005020 <HAL_DMA_Init+0x148>)
 8004f1e:	4413      	add	r3, r2
 8004f20:	4a3d      	ldr	r2, [pc, #244]	@ (8005018 <HAL_DMA_Init+0x140>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	091b      	lsrs	r3, r3, #4
 8004f28:	009a      	lsls	r2, r3, #2
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a3c      	ldr	r2, [pc, #240]	@ (8005024 <HAL_DMA_Init+0x14c>)
 8004f32:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004f4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004f58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 fa76 	bl	8005478 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f94:	d102      	bne.n	8004f9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fa4:	b2d2      	uxtb	r2, r2
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fb0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d010      	beq.n	8004fdc <HAL_DMA_Init+0x104>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b04      	cmp	r3, #4
 8004fc0:	d80c      	bhi.n	8004fdc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fa96 	bl	80054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004fd8:	605a      	str	r2, [r3, #4]
 8004fda:	e008      	b.n	8004fee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40020407 	.word	0x40020407
 8005014:	bffdfff8 	.word	0xbffdfff8
 8005018:	cccccccd 	.word	0xcccccccd
 800501c:	40020000 	.word	0x40020000
 8005020:	bffdfbf8 	.word	0xbffdfbf8
 8005024:	40020400 	.word	0x40020400

08005028 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_DMA_Start_IT+0x20>
 8005044:	2302      	movs	r3, #2
 8005046:	e066      	b.n	8005116 <HAL_DMA_Start_IT+0xee>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b01      	cmp	r3, #1
 800505a:	d155      	bne.n	8005108 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2200      	movs	r2, #0
 8005068:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f022 0201 	bic.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	68f8      	ldr	r0, [r7, #12]
 8005082:	f000 f9bb 	bl	80053fc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800508a:	2b00      	cmp	r3, #0
 800508c:	d008      	beq.n	80050a0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 020e 	orr.w	r2, r2, #14
 800509c:	601a      	str	r2, [r3, #0]
 800509e:	e00f      	b.n	80050c0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f022 0204 	bic.w	r2, r2, #4
 80050ae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 020a 	orr.w	r2, r2, #10
 80050be:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d007      	beq.n	80050de <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050dc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f042 0201 	orr.w	r2, r2, #1
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	e005      	b.n	8005114 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005110:	2302      	movs	r3, #2
 8005112:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005114:	7dfb      	ldrb	r3, [r7, #23]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d005      	beq.n	8005142 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2204      	movs	r2, #4
 800513a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	73fb      	strb	r3, [r7, #15]
 8005140:	e037      	b.n	80051b2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 020e 	bic.w	r2, r2, #14
 8005150:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800515c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005160:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0201 	bic.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	f003 021f 	and.w	r2, r3, #31
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	2101      	movs	r1, #1
 8005180:	fa01 f202 	lsl.w	r2, r1, r2
 8005184:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800518e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00c      	beq.n	80051b2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80051a6:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80051b0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3714      	adds	r7, #20
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d00d      	beq.n	8005204 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2204      	movs	r2, #4
 80051ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	73fb      	strb	r3, [r7, #15]
 8005202:	e047      	b.n	8005294 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f022 020e 	bic.w	r2, r2, #14
 8005212:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f022 0201 	bic.w	r2, r2, #1
 8005222:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800522e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005232:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005238:	f003 021f 	and.w	r2, r3, #31
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f202 	lsl.w	r2, r1, r2
 8005246:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005250:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00c      	beq.n	8005274 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005264:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005268:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005272:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	2b00      	cmp	r3, #0
 800528a:	d003      	beq.n	8005294 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	4798      	blx	r3
    }
  }
  return status;
 8005294:	7bfb      	ldrb	r3, [r7, #15]
}
 8005296:	4618      	mov	r0, r3
 8005298:	3710      	adds	r7, #16
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800529e:	b580      	push	{r7, lr}
 80052a0:	b084      	sub	sp, #16
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	2204      	movs	r2, #4
 80052c0:	409a      	lsls	r2, r3
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d026      	beq.n	8005318 <HAL_DMA_IRQHandler+0x7a>
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d021      	beq.n	8005318 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0320 	and.w	r3, r3, #32
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d107      	bne.n	80052f2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 0204 	bic.w	r2, r2, #4
 80052f0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052f6:	f003 021f 	and.w	r2, r3, #31
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fe:	2104      	movs	r1, #4
 8005300:	fa01 f202 	lsl.w	r2, r1, r2
 8005304:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800530a:	2b00      	cmp	r3, #0
 800530c:	d071      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005316:	e06c      	b.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800531c:	f003 031f 	and.w	r3, r3, #31
 8005320:	2202      	movs	r2, #2
 8005322:	409a      	lsls	r2, r3
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4013      	ands	r3, r2
 8005328:	2b00      	cmp	r3, #0
 800532a:	d02e      	beq.n	800538a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0302 	and.w	r3, r3, #2
 8005332:	2b00      	cmp	r3, #0
 8005334:	d029      	beq.n	800538a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10b      	bne.n	800535c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 020a 	bic.w	r2, r2, #10
 8005352:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005360:	f003 021f 	and.w	r2, r3, #31
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005368:	2102      	movs	r1, #2
 800536a:	fa01 f202 	lsl.w	r2, r1, r2
 800536e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	2b00      	cmp	r3, #0
 800537e:	d038      	beq.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005388:	e033      	b.n	80053f2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800538e:	f003 031f 	and.w	r3, r3, #31
 8005392:	2208      	movs	r2, #8
 8005394:	409a      	lsls	r2, r3
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	4013      	ands	r3, r2
 800539a:	2b00      	cmp	r3, #0
 800539c:	d02a      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d025      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f022 020e 	bic.w	r2, r2, #14
 80053b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053bc:	f003 021f 	and.w	r2, r3, #31
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c4:	2101      	movs	r1, #1
 80053c6:	fa01 f202 	lsl.w	r2, r1, r2
 80053ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d004      	beq.n	80053f4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
}
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8005412:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005418:	2b00      	cmp	r3, #0
 800541a:	d004      	beq.n	8005426 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8005424:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800542a:	f003 021f 	and.w	r2, r3, #31
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005432:	2101      	movs	r1, #1
 8005434:	fa01 f202 	lsl.w	r2, r1, r2
 8005438:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	2b10      	cmp	r3, #16
 8005448:	d108      	bne.n	800545c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68ba      	ldr	r2, [r7, #8]
 8005458:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800545a:	e007      	b.n	800546c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	60da      	str	r2, [r3, #12]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	461a      	mov	r2, r3
 8005486:	4b16      	ldr	r3, [pc, #88]	@ (80054e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005488:	429a      	cmp	r2, r3
 800548a:	d802      	bhi.n	8005492 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800548c:	4b15      	ldr	r3, [pc, #84]	@ (80054e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	e001      	b.n	8005496 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005492:	4b15      	ldr	r3, [pc, #84]	@ (80054e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005494:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	3b08      	subs	r3, #8
 80054a2:	4a12      	ldr	r2, [pc, #72]	@ (80054ec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80054a4:	fba2 2303 	umull	r2, r3, r2, r3
 80054a8:	091b      	lsrs	r3, r3, #4
 80054aa:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054b0:	089b      	lsrs	r3, r3, #2
 80054b2:	009a      	lsls	r2, r3, #2
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4413      	add	r3, r2
 80054b8:	461a      	mov	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a0b      	ldr	r2, [pc, #44]	@ (80054f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80054c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f003 031f 	and.w	r3, r3, #31
 80054ca:	2201      	movs	r2, #1
 80054cc:	409a      	lsls	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80054d2:	bf00      	nop
 80054d4:	371c      	adds	r7, #28
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40020407 	.word	0x40020407
 80054e4:	40020800 	.word	0x40020800
 80054e8:	40020820 	.word	0x40020820
 80054ec:	cccccccd 	.word	0xcccccccd
 80054f0:	40020880 	.word	0x40020880

080054f4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	461a      	mov	r2, r3
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	4a08      	ldr	r2, [pc, #32]	@ (8005538 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8005516:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3b01      	subs	r3, #1
 800551c:	f003 031f 	and.w	r3, r3, #31
 8005520:	2201      	movs	r2, #1
 8005522:	409a      	lsls	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8005528:	bf00      	nop
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr
 8005534:	1000823f 	.word	0x1000823f
 8005538:	40020940 	.word	0x40020940

0800553c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800553c:	b480      	push	{r7}
 800553e:	b087      	sub	sp, #28
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005546:	2300      	movs	r3, #0
 8005548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800554a:	e15a      	b.n	8005802 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	2101      	movs	r1, #1
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	4013      	ands	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 814c 	beq.w	80057fc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d005      	beq.n	800557c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005578:	2b02      	cmp	r3, #2
 800557a:	d130      	bne.n	80055de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	2203      	movs	r2, #3
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	693a      	ldr	r2, [r7, #16]
 8005590:	4013      	ands	r3, r2
 8005592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055b2:	2201      	movs	r2, #1
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	4013      	ands	r3, r2
 80055c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	f003 0201 	and.w	r2, r3, #1
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d017      	beq.n	800561a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	2203      	movs	r2, #3
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4013      	ands	r3, r2
 8005600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d123      	bne.n	800566e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	08da      	lsrs	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3208      	adds	r2, #8
 800562e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005632:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	220f      	movs	r2, #15
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	693a      	ldr	r2, [r7, #16]
 8005646:	4013      	ands	r3, r2
 8005648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	4313      	orrs	r3, r2
 800565e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	08da      	lsrs	r2, r3, #3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3208      	adds	r2, #8
 8005668:	6939      	ldr	r1, [r7, #16]
 800566a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	2203      	movs	r2, #3
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4013      	ands	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f003 0203 	and.w	r2, r3, #3
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80a6 	beq.w	80057fc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b0:	4b5b      	ldr	r3, [pc, #364]	@ (8005820 <HAL_GPIO_Init+0x2e4>)
 80056b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005820 <HAL_GPIO_Init+0x2e4>)
 80056b6:	f043 0301 	orr.w	r3, r3, #1
 80056ba:	6613      	str	r3, [r2, #96]	@ 0x60
 80056bc:	4b58      	ldr	r3, [pc, #352]	@ (8005820 <HAL_GPIO_Init+0x2e4>)
 80056be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056c8:	4a56      	ldr	r2, [pc, #344]	@ (8005824 <HAL_GPIO_Init+0x2e8>)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	089b      	lsrs	r3, r3, #2
 80056ce:	3302      	adds	r3, #2
 80056d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f003 0303 	and.w	r3, r3, #3
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	220f      	movs	r2, #15
 80056e0:	fa02 f303 	lsl.w	r3, r2, r3
 80056e4:	43db      	mvns	r3, r3
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	4013      	ands	r3, r2
 80056ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80056f2:	d01f      	beq.n	8005734 <HAL_GPIO_Init+0x1f8>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005828 <HAL_GPIO_Init+0x2ec>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d019      	beq.n	8005730 <HAL_GPIO_Init+0x1f4>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a4b      	ldr	r2, [pc, #300]	@ (800582c <HAL_GPIO_Init+0x2f0>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d013      	beq.n	800572c <HAL_GPIO_Init+0x1f0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a4a      	ldr	r2, [pc, #296]	@ (8005830 <HAL_GPIO_Init+0x2f4>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d00d      	beq.n	8005728 <HAL_GPIO_Init+0x1ec>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a49      	ldr	r2, [pc, #292]	@ (8005834 <HAL_GPIO_Init+0x2f8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d007      	beq.n	8005724 <HAL_GPIO_Init+0x1e8>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a48      	ldr	r2, [pc, #288]	@ (8005838 <HAL_GPIO_Init+0x2fc>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d101      	bne.n	8005720 <HAL_GPIO_Init+0x1e4>
 800571c:	2305      	movs	r3, #5
 800571e:	e00a      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 8005720:	2306      	movs	r3, #6
 8005722:	e008      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 8005724:	2304      	movs	r3, #4
 8005726:	e006      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 8005728:	2303      	movs	r3, #3
 800572a:	e004      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 800572c:	2302      	movs	r3, #2
 800572e:	e002      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 8005730:	2301      	movs	r3, #1
 8005732:	e000      	b.n	8005736 <HAL_GPIO_Init+0x1fa>
 8005734:	2300      	movs	r3, #0
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	f002 0203 	and.w	r2, r2, #3
 800573c:	0092      	lsls	r2, r2, #2
 800573e:	4093      	lsls	r3, r2
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	4313      	orrs	r3, r2
 8005744:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005746:	4937      	ldr	r1, [pc, #220]	@ (8005824 <HAL_GPIO_Init+0x2e8>)
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	089b      	lsrs	r3, r3, #2
 800574c:	3302      	adds	r3, #2
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005754:	4b39      	ldr	r3, [pc, #228]	@ (800583c <HAL_GPIO_Init+0x300>)
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	43db      	mvns	r3, r3
 800575e:	693a      	ldr	r2, [r7, #16]
 8005760:	4013      	ands	r3, r2
 8005762:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005770:	693a      	ldr	r2, [r7, #16]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	4313      	orrs	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005778:	4a30      	ldr	r2, [pc, #192]	@ (800583c <HAL_GPIO_Init+0x300>)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800577e:	4b2f      	ldr	r3, [pc, #188]	@ (800583c <HAL_GPIO_Init+0x300>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	43db      	mvns	r3, r3
 8005788:	693a      	ldr	r2, [r7, #16]
 800578a:	4013      	ands	r3, r2
 800578c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d003      	beq.n	80057a2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800579a:	693a      	ldr	r2, [r7, #16]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80057a2:	4a26      	ldr	r2, [pc, #152]	@ (800583c <HAL_GPIO_Init+0x300>)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80057a8:	4b24      	ldr	r3, [pc, #144]	@ (800583c <HAL_GPIO_Init+0x300>)
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	43db      	mvns	r3, r3
 80057b2:	693a      	ldr	r2, [r7, #16]
 80057b4:	4013      	ands	r3, r2
 80057b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d003      	beq.n	80057cc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80057cc:	4a1b      	ldr	r2, [pc, #108]	@ (800583c <HAL_GPIO_Init+0x300>)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80057d2:	4b1a      	ldr	r3, [pc, #104]	@ (800583c <HAL_GPIO_Init+0x300>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	43db      	mvns	r3, r3
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	4013      	ands	r3, r2
 80057e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80057f6:	4a11      	ldr	r2, [pc, #68]	@ (800583c <HAL_GPIO_Init+0x300>)
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	3301      	adds	r3, #1
 8005800:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	fa22 f303 	lsr.w	r3, r2, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	f47f ae9d 	bne.w	800554c <HAL_GPIO_Init+0x10>
  }
}
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	371c      	adds	r7, #28
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	40021000 	.word	0x40021000
 8005824:	40010000 	.word	0x40010000
 8005828:	48000400 	.word	0x48000400
 800582c:	48000800 	.word	0x48000800
 8005830:	48000c00 	.word	0x48000c00
 8005834:	48001000 	.word	0x48001000
 8005838:	48001400 	.word	0x48001400
 800583c:	40010400 	.word	0x40010400

08005840 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691a      	ldr	r2, [r3, #16]
 8005850:	887b      	ldrh	r3, [r7, #2]
 8005852:	4013      	ands	r3, r2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005858:	2301      	movs	r3, #1
 800585a:	73fb      	strb	r3, [r7, #15]
 800585c:	e001      	b.n	8005862 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	807b      	strh	r3, [r7, #2]
 800587c:	4613      	mov	r3, r2
 800587e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005880:	787b      	ldrb	r3, [r7, #1]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d003      	beq.n	800588e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005886:	887a      	ldrh	r2, [r7, #2]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800588c:	e002      	b.n	8005894 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800588e:	887a      	ldrh	r2, [r7, #2]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	4603      	mov	r3, r0
 80058a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80058aa:	4b08      	ldr	r3, [pc, #32]	@ (80058cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058ac:	695a      	ldr	r2, [r3, #20]
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	4013      	ands	r3, r2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d006      	beq.n	80058c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80058b6:	4a05      	ldr	r2, [pc, #20]	@ (80058cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80058b8:	88fb      	ldrh	r3, [r7, #6]
 80058ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80058bc:	88fb      	ldrh	r3, [r7, #6]
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fc faa8 	bl	8001e14 <HAL_GPIO_EXTI_Callback>
  }
}
 80058c4:	bf00      	nop
 80058c6:	3708      	adds	r7, #8
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}
 80058cc:	40010400 	.word	0x40010400

080058d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b085      	sub	sp, #20
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d141      	bne.n	8005962 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058de:	4b4b      	ldr	r3, [pc, #300]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ea:	d131      	bne.n	8005950 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058ec:	4b47      	ldr	r3, [pc, #284]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058f2:	4a46      	ldr	r2, [pc, #280]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058fc:	4b43      	ldr	r3, [pc, #268]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005904:	4a41      	ldr	r2, [pc, #260]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005906:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800590a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800590c:	4b40      	ldr	r3, [pc, #256]	@ (8005a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2232      	movs	r2, #50	@ 0x32
 8005912:	fb02 f303 	mul.w	r3, r2, r3
 8005916:	4a3f      	ldr	r2, [pc, #252]	@ (8005a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005918:	fba2 2303 	umull	r2, r3, r2, r3
 800591c:	0c9b      	lsrs	r3, r3, #18
 800591e:	3301      	adds	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005922:	e002      	b.n	800592a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	3b01      	subs	r3, #1
 8005928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800592a:	4b38      	ldr	r3, [pc, #224]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005936:	d102      	bne.n	800593e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f2      	bne.n	8005924 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800593e:	4b33      	ldr	r3, [pc, #204]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005940:	695b      	ldr	r3, [r3, #20]
 8005942:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005946:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800594a:	d158      	bne.n	80059fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800594c:	2303      	movs	r3, #3
 800594e:	e057      	b.n	8005a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005950:	4b2e      	ldr	r3, [pc, #184]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005956:	4a2d      	ldr	r2, [pc, #180]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005958:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800595c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005960:	e04d      	b.n	80059fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005968:	d141      	bne.n	80059ee <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800596a:	4b28      	ldr	r3, [pc, #160]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005976:	d131      	bne.n	80059dc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005978:	4b24      	ldr	r3, [pc, #144]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800597a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800597e:	4a23      	ldr	r2, [pc, #140]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005984:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005988:	4b20      	ldr	r3, [pc, #128]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005990:	4a1e      	ldr	r2, [pc, #120]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005992:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005996:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005998:	4b1d      	ldr	r3, [pc, #116]	@ (8005a10 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	2232      	movs	r2, #50	@ 0x32
 800599e:	fb02 f303 	mul.w	r3, r2, r3
 80059a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a14 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80059a4:	fba2 2303 	umull	r2, r3, r2, r3
 80059a8:	0c9b      	lsrs	r3, r3, #18
 80059aa:	3301      	adds	r3, #1
 80059ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059ae:	e002      	b.n	80059b6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80059b6:	4b15      	ldr	r3, [pc, #84]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059c2:	d102      	bne.n	80059ca <HAL_PWREx_ControlVoltageScaling+0xfa>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1f2      	bne.n	80059b0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059ca:	4b10      	ldr	r3, [pc, #64]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059d6:	d112      	bne.n	80059fe <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e011      	b.n	8005a00 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059dc:	4b0b      	ldr	r3, [pc, #44]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059e2:	4a0a      	ldr	r2, [pc, #40]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80059ec:	e007      	b.n	80059fe <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059ee:	4b07      	ldr	r3, [pc, #28]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059f6:	4a05      	ldr	r2, [pc, #20]	@ (8005a0c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059f8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059fc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	40007000 	.word	0x40007000
 8005a10:	2000000c 	.word	0x2000000c
 8005a14:	431bde83 	.word	0x431bde83

08005a18 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005a1c:	4b05      	ldr	r3, [pc, #20]	@ (8005a34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	4a04      	ldr	r2, [pc, #16]	@ (8005a34 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005a22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005a26:	6093      	str	r3, [r2, #8]
}
 8005a28:	bf00      	nop
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	40007000 	.word	0x40007000

08005a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e2fe      	b.n	8006048 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d075      	beq.n	8005b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a56:	4b97      	ldr	r3, [pc, #604]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a60:	4b94      	ldr	r3, [pc, #592]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	2b0c      	cmp	r3, #12
 8005a6e:	d102      	bne.n	8005a76 <HAL_RCC_OscConfig+0x3e>
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	2b03      	cmp	r3, #3
 8005a74:	d002      	beq.n	8005a7c <HAL_RCC_OscConfig+0x44>
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d10b      	bne.n	8005a94 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a7c:	4b8d      	ldr	r3, [pc, #564]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d05b      	beq.n	8005b40 <HAL_RCC_OscConfig+0x108>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d157      	bne.n	8005b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e2d9      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a9c:	d106      	bne.n	8005aac <HAL_RCC_OscConfig+0x74>
 8005a9e:	4b85      	ldr	r3, [pc, #532]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a84      	ldr	r2, [pc, #528]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005aa4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e01d      	b.n	8005ae8 <HAL_RCC_OscConfig+0xb0>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x98>
 8005ab6:	4b7f      	ldr	r3, [pc, #508]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a7e      	ldr	r2, [pc, #504]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005abc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	4b7c      	ldr	r3, [pc, #496]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a7b      	ldr	r2, [pc, #492]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005ac8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	e00b      	b.n	8005ae8 <HAL_RCC_OscConfig+0xb0>
 8005ad0:	4b78      	ldr	r3, [pc, #480]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a77      	ldr	r2, [pc, #476]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005ad6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	4b75      	ldr	r3, [pc, #468]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a74      	ldr	r2, [pc, #464]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005ae2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d013      	beq.n	8005b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fd fab4 	bl	800305c <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005af8:	f7fd fab0 	bl	800305c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b64      	cmp	r3, #100	@ 0x64
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e29e      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0xc0>
 8005b16:	e014      	b.n	8005b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b18:	f7fd faa0 	bl	800305c <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b20:	f7fd fa9c 	bl	800305c <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b64      	cmp	r3, #100	@ 0x64
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e28a      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b32:	4b60      	ldr	r3, [pc, #384]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f0      	bne.n	8005b20 <HAL_RCC_OscConfig+0xe8>
 8005b3e:	e000      	b.n	8005b42 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d075      	beq.n	8005c3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4e:	4b59      	ldr	r3, [pc, #356]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
 8005b56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b58:	4b56      	ldr	r3, [pc, #344]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	f003 0303 	and.w	r3, r3, #3
 8005b60:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b0c      	cmp	r3, #12
 8005b66:	d102      	bne.n	8005b6e <HAL_RCC_OscConfig+0x136>
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d002      	beq.n	8005b74 <HAL_RCC_OscConfig+0x13c>
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b04      	cmp	r3, #4
 8005b72:	d11f      	bne.n	8005bb4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b74:	4b4f      	ldr	r3, [pc, #316]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d005      	beq.n	8005b8c <HAL_RCC_OscConfig+0x154>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d101      	bne.n	8005b8c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e25d      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8c:	4b49      	ldr	r3, [pc, #292]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	691b      	ldr	r3, [r3, #16]
 8005b98:	061b      	lsls	r3, r3, #24
 8005b9a:	4946      	ldr	r1, [pc, #280]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005b9c:	4313      	orrs	r3, r2
 8005b9e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005ba0:	4b45      	ldr	r3, [pc, #276]	@ (8005cb8 <HAL_RCC_OscConfig+0x280>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fd fa0d 	bl	8002fc4 <HAL_InitTick>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d043      	beq.n	8005c38 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e249      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d023      	beq.n	8005c04 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005bbc:	4b3d      	ldr	r3, [pc, #244]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bc8:	f7fd fa48 	bl	800305c <HAL_GetTick>
 8005bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bd0:	f7fd fa44 	bl	800305c <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e232      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005be2:	4b34      	ldr	r3, [pc, #208]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bee:	4b31      	ldr	r3, [pc, #196]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	061b      	lsls	r3, r3, #24
 8005bfc:	492d      	ldr	r1, [pc, #180]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	604b      	str	r3, [r1, #4]
 8005c02:	e01a      	b.n	8005c3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c04:	4b2b      	ldr	r3, [pc, #172]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a2a      	ldr	r2, [pc, #168]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005c0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c10:	f7fd fa24 	bl	800305c <HAL_GetTick>
 8005c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c16:	e008      	b.n	8005c2a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c18:	f7fd fa20 	bl	800305c <HAL_GetTick>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d901      	bls.n	8005c2a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e20e      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c2a:	4b22      	ldr	r3, [pc, #136]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f0      	bne.n	8005c18 <HAL_RCC_OscConfig+0x1e0>
 8005c36:	e000      	b.n	8005c3a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c38:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d041      	beq.n	8005cca <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	695b      	ldr	r3, [r3, #20]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d01c      	beq.n	8005c88 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c4e:	4b19      	ldr	r3, [pc, #100]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005c50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c54:	4a17      	ldr	r2, [pc, #92]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005c56:	f043 0301 	orr.w	r3, r3, #1
 8005c5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5e:	f7fd f9fd 	bl	800305c <HAL_GetTick>
 8005c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c64:	e008      	b.n	8005c78 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c66:	f7fd f9f9 	bl	800305c <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d901      	bls.n	8005c78 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e1e7      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c78:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0ef      	beq.n	8005c66 <HAL_RCC_OscConfig+0x22e>
 8005c86:	e020      	b.n	8005cca <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c88:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c8e:	4a09      	ldr	r2, [pc, #36]	@ (8005cb4 <HAL_RCC_OscConfig+0x27c>)
 8005c90:	f023 0301 	bic.w	r3, r3, #1
 8005c94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c98:	f7fd f9e0 	bl	800305c <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c9e:	e00d      	b.n	8005cbc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ca0:	f7fd f9dc 	bl	800305c <HAL_GetTick>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	1ad3      	subs	r3, r2, r3
 8005caa:	2b02      	cmp	r3, #2
 8005cac:	d906      	bls.n	8005cbc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e1ca      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
 8005cb2:	bf00      	nop
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005cbc:	4b8c      	ldr	r3, [pc, #560]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1ea      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 80a6 	beq.w	8005e24 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005cdc:	4b84      	ldr	r3, [pc, #528]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <HAL_RCC_OscConfig+0x2b4>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <HAL_RCC_OscConfig+0x2b6>
 8005cec:	2300      	movs	r3, #0
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00d      	beq.n	8005d0e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cf2:	4b7f      	ldr	r3, [pc, #508]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cf6:	4a7e      	ldr	r2, [pc, #504]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cfe:	4b7c      	ldr	r3, [pc, #496]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d06:	60fb      	str	r3, [r7, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d0e:	4b79      	ldr	r3, [pc, #484]	@ (8005ef4 <HAL_RCC_OscConfig+0x4bc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d118      	bne.n	8005d4c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d1a:	4b76      	ldr	r3, [pc, #472]	@ (8005ef4 <HAL_RCC_OscConfig+0x4bc>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a75      	ldr	r2, [pc, #468]	@ (8005ef4 <HAL_RCC_OscConfig+0x4bc>)
 8005d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d26:	f7fd f999 	bl	800305c <HAL_GetTick>
 8005d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d2c:	e008      	b.n	8005d40 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d2e:	f7fd f995 	bl	800305c <HAL_GetTick>
 8005d32:	4602      	mov	r2, r0
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d901      	bls.n	8005d40 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005d3c:	2303      	movs	r3, #3
 8005d3e:	e183      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d40:	4b6c      	ldr	r3, [pc, #432]	@ (8005ef4 <HAL_RCC_OscConfig+0x4bc>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0f0      	beq.n	8005d2e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d108      	bne.n	8005d66 <HAL_RCC_OscConfig+0x32e>
 8005d54:	4b66      	ldr	r3, [pc, #408]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d5a:	4a65      	ldr	r2, [pc, #404]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005d5c:	f043 0301 	orr.w	r3, r3, #1
 8005d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d64:	e024      	b.n	8005db0 <HAL_RCC_OscConfig+0x378>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	2b05      	cmp	r3, #5
 8005d6c:	d110      	bne.n	8005d90 <HAL_RCC_OscConfig+0x358>
 8005d6e:	4b60      	ldr	r3, [pc, #384]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d74:	4a5e      	ldr	r2, [pc, #376]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005d76:	f043 0304 	orr.w	r3, r3, #4
 8005d7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d7e:	4b5c      	ldr	r3, [pc, #368]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d84:	4a5a      	ldr	r2, [pc, #360]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005d86:	f043 0301 	orr.w	r3, r3, #1
 8005d8a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d8e:	e00f      	b.n	8005db0 <HAL_RCC_OscConfig+0x378>
 8005d90:	4b57      	ldr	r3, [pc, #348]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d96:	4a56      	ldr	r2, [pc, #344]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005da0:	4b53      	ldr	r3, [pc, #332]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005da6:	4a52      	ldr	r2, [pc, #328]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005da8:	f023 0304 	bic.w	r3, r3, #4
 8005dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d016      	beq.n	8005de6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db8:	f7fd f950 	bl	800305c <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dbe:	e00a      	b.n	8005dd6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc0:	f7fd f94c 	bl	800305c <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e138      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dd6:	4b46      	ldr	r3, [pc, #280]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0ed      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x388>
 8005de4:	e015      	b.n	8005e12 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005de6:	f7fd f939 	bl	800305c <HAL_GetTick>
 8005dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dec:	e00a      	b.n	8005e04 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dee:	f7fd f935 	bl	800305c <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d901      	bls.n	8005e04 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e121      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e04:	4b3a      	ldr	r3, [pc, #232]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1ed      	bne.n	8005dee <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e12:	7ffb      	ldrb	r3, [r7, #31]
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d105      	bne.n	8005e24 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e18:	4b35      	ldr	r3, [pc, #212]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1c:	4a34      	ldr	r2, [pc, #208]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005e1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e22:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f003 0320 	and.w	r3, r3, #32
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d03c      	beq.n	8005eaa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d01c      	beq.n	8005e72 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e38:	4b2d      	ldr	r3, [pc, #180]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005e40:	f043 0301 	orr.w	r3, r3, #1
 8005e44:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e48:	f7fd f908 	bl	800305c <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e50:	f7fd f904 	bl	800305c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e0f2      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e62:	4b23      	ldr	r3, [pc, #140]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e68:	f003 0302 	and.w	r3, r3, #2
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d0ef      	beq.n	8005e50 <HAL_RCC_OscConfig+0x418>
 8005e70:	e01b      	b.n	8005eaa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e72:	4b1f      	ldr	r3, [pc, #124]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e78:	4a1d      	ldr	r2, [pc, #116]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005e7a:	f023 0301 	bic.w	r3, r3, #1
 8005e7e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e82:	f7fd f8eb 	bl	800305c <HAL_GetTick>
 8005e86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e88:	e008      	b.n	8005e9c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e8a:	f7fd f8e7 	bl	800305c <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e0d5      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e9c:	4b14      	ldr	r3, [pc, #80]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1ef      	bne.n	8005e8a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69db      	ldr	r3, [r3, #28]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	f000 80c9 	beq.w	8006046 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f003 030c 	and.w	r3, r3, #12
 8005ebc:	2b0c      	cmp	r3, #12
 8005ebe:	f000 8083 	beq.w	8005fc8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	d15e      	bne.n	8005f88 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005eca:	4b09      	ldr	r3, [pc, #36]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a08      	ldr	r2, [pc, #32]	@ (8005ef0 <HAL_RCC_OscConfig+0x4b8>)
 8005ed0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005ed4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ed6:	f7fd f8c1 	bl	800305c <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005edc:	e00c      	b.n	8005ef8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ede:	f7fd f8bd 	bl	800305c <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d905      	bls.n	8005ef8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e0ab      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
 8005ef0:	40021000 	.word	0x40021000
 8005ef4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ef8:	4b55      	ldr	r3, [pc, #340]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1ec      	bne.n	8005ede <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005f04:	4b52      	ldr	r3, [pc, #328]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005f06:	68da      	ldr	r2, [r3, #12]
 8005f08:	4b52      	ldr	r3, [pc, #328]	@ (8006054 <HAL_RCC_OscConfig+0x61c>)
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	6a11      	ldr	r1, [r2, #32]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f14:	3a01      	subs	r2, #1
 8005f16:	0112      	lsls	r2, r2, #4
 8005f18:	4311      	orrs	r1, r2
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005f1e:	0212      	lsls	r2, r2, #8
 8005f20:	4311      	orrs	r1, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005f26:	0852      	lsrs	r2, r2, #1
 8005f28:	3a01      	subs	r2, #1
 8005f2a:	0552      	lsls	r2, r2, #21
 8005f2c:	4311      	orrs	r1, r2
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f32:	0852      	lsrs	r2, r2, #1
 8005f34:	3a01      	subs	r2, #1
 8005f36:	0652      	lsls	r2, r2, #25
 8005f38:	4311      	orrs	r1, r2
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f3e:	06d2      	lsls	r2, r2, #27
 8005f40:	430a      	orrs	r2, r1
 8005f42:	4943      	ldr	r1, [pc, #268]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f48:	4b41      	ldr	r3, [pc, #260]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a40      	ldr	r2, [pc, #256]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005f4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f52:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f54:	4b3e      	ldr	r3, [pc, #248]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	4a3d      	ldr	r2, [pc, #244]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005f5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f60:	f7fd f87c 	bl	800305c <HAL_GetTick>
 8005f64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f66:	e008      	b.n	8005f7a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f68:	f7fd f878 	bl	800305c <HAL_GetTick>
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d901      	bls.n	8005f7a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005f76:	2303      	movs	r3, #3
 8005f78:	e066      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f7a:	4b35      	ldr	r3, [pc, #212]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0f0      	beq.n	8005f68 <HAL_RCC_OscConfig+0x530>
 8005f86:	e05e      	b.n	8006046 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f88:	4b31      	ldr	r3, [pc, #196]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a30      	ldr	r2, [pc, #192]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005f8e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f94:	f7fd f862 	bl	800305c <HAL_GetTick>
 8005f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f9a:	e008      	b.n	8005fae <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f9c:	f7fd f85e 	bl	800305c <HAL_GetTick>
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	1ad3      	subs	r3, r2, r3
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d901      	bls.n	8005fae <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005faa:	2303      	movs	r3, #3
 8005fac:	e04c      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fae:	4b28      	ldr	r3, [pc, #160]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f0      	bne.n	8005f9c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005fba:	4b25      	ldr	r3, [pc, #148]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	4924      	ldr	r1, [pc, #144]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005fc0:	4b25      	ldr	r3, [pc, #148]	@ (8006058 <HAL_RCC_OscConfig+0x620>)
 8005fc2:	4013      	ands	r3, r2
 8005fc4:	60cb      	str	r3, [r1, #12]
 8005fc6:	e03e      	b.n	8006046 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d101      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	e039      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8006050 <HAL_RCC_OscConfig+0x618>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	f003 0203 	and.w	r2, r3, #3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a1b      	ldr	r3, [r3, #32]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d12c      	bne.n	8006042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d123      	bne.n	8006042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006004:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006006:	429a      	cmp	r2, r3
 8006008:	d11b      	bne.n	8006042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006014:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006016:	429a      	cmp	r2, r3
 8006018:	d113      	bne.n	8006042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006024:	085b      	lsrs	r3, r3, #1
 8006026:	3b01      	subs	r3, #1
 8006028:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800602a:	429a      	cmp	r2, r3
 800602c:	d109      	bne.n	8006042 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006038:	085b      	lsrs	r3, r3, #1
 800603a:	3b01      	subs	r3, #1
 800603c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800603e:	429a      	cmp	r2, r3
 8006040:	d001      	beq.n	8006046 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	3720      	adds	r7, #32
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40021000 	.word	0x40021000
 8006054:	019f800c 	.word	0x019f800c
 8006058:	feeefffc 	.word	0xfeeefffc

0800605c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b086      	sub	sp, #24
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d101      	bne.n	8006074 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e11e      	b.n	80062b2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006074:	4b91      	ldr	r3, [pc, #580]	@ (80062bc <HAL_RCC_ClockConfig+0x260>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	683a      	ldr	r2, [r7, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d910      	bls.n	80060a4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006082:	4b8e      	ldr	r3, [pc, #568]	@ (80062bc <HAL_RCC_ClockConfig+0x260>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f023 020f 	bic.w	r2, r3, #15
 800608a:	498c      	ldr	r1, [pc, #560]	@ (80062bc <HAL_RCC_ClockConfig+0x260>)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	4313      	orrs	r3, r2
 8006090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006092:	4b8a      	ldr	r3, [pc, #552]	@ (80062bc <HAL_RCC_ClockConfig+0x260>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f003 030f 	and.w	r3, r3, #15
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d001      	beq.n	80060a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e106      	b.n	80062b2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d073      	beq.n	8006198 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	2b03      	cmp	r3, #3
 80060b6:	d129      	bne.n	800610c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060b8:	4b81      	ldr	r3, [pc, #516]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e0f4      	b.n	80062b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80060c8:	f000 f99e 	bl	8006408 <RCC_GetSysClockFreqFromPLLSource>
 80060cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4a7c      	ldr	r2, [pc, #496]	@ (80062c4 <HAL_RCC_ClockConfig+0x268>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d93f      	bls.n	8006156 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80060d6:	4b7a      	ldr	r3, [pc, #488]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d033      	beq.n	8006156 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d12f      	bne.n	8006156 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060f6:	4b72      	ldr	r3, [pc, #456]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060fe:	4a70      	ldr	r2, [pc, #448]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 8006100:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006104:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006106:	2380      	movs	r3, #128	@ 0x80
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	e024      	b.n	8006156 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d107      	bne.n	8006124 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006114:	4b6a      	ldr	r3, [pc, #424]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800611c:	2b00      	cmp	r3, #0
 800611e:	d109      	bne.n	8006134 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0c6      	b.n	80062b2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006124:	4b66      	ldr	r3, [pc, #408]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800612c:	2b00      	cmp	r3, #0
 800612e:	d101      	bne.n	8006134 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e0be      	b.n	80062b2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006134:	f000 f8ce 	bl	80062d4 <HAL_RCC_GetSysClockFreq>
 8006138:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	4a61      	ldr	r2, [pc, #388]	@ (80062c4 <HAL_RCC_ClockConfig+0x268>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d909      	bls.n	8006156 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006142:	4b5f      	ldr	r3, [pc, #380]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800614a:	4a5d      	ldr	r2, [pc, #372]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 800614c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006150:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006152:	2380      	movs	r3, #128	@ 0x80
 8006154:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006156:	4b5a      	ldr	r3, [pc, #360]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f023 0203 	bic.w	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	4957      	ldr	r1, [pc, #348]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 8006164:	4313      	orrs	r3, r2
 8006166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006168:	f7fc ff78 	bl	800305c <HAL_GetTick>
 800616c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800616e:	e00a      	b.n	8006186 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006170:	f7fc ff74 	bl	800305c <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800617e:	4293      	cmp	r3, r2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e095      	b.n	80062b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006186:	4b4e      	ldr	r3, [pc, #312]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f003 020c 	and.w	r2, r3, #12
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	429a      	cmp	r2, r3
 8006196:	d1eb      	bne.n	8006170 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f003 0302 	and.w	r3, r3, #2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d023      	beq.n	80061ec <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061b0:	4b43      	ldr	r3, [pc, #268]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	4a42      	ldr	r2, [pc, #264]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 80061b6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80061ba:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 0308 	and.w	r3, r3, #8
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d007      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80061c8:	4b3d      	ldr	r3, [pc, #244]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80061d0:	4a3b      	ldr	r2, [pc, #236]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 80061d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80061d6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061d8:	4b39      	ldr	r3, [pc, #228]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	4936      	ldr	r1, [pc, #216]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	608b      	str	r3, [r1, #8]
 80061ea:	e008      	b.n	80061fe <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	2b80      	cmp	r3, #128	@ 0x80
 80061f0:	d105      	bne.n	80061fe <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80061f2:	4b33      	ldr	r3, [pc, #204]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	4a32      	ldr	r2, [pc, #200]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 80061f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061fc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061fe:	4b2f      	ldr	r3, [pc, #188]	@ (80062bc <HAL_RCC_ClockConfig+0x260>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f003 030f 	and.w	r3, r3, #15
 8006206:	683a      	ldr	r2, [r7, #0]
 8006208:	429a      	cmp	r2, r3
 800620a:	d21d      	bcs.n	8006248 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620c:	4b2b      	ldr	r3, [pc, #172]	@ (80062bc <HAL_RCC_ClockConfig+0x260>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f023 020f 	bic.w	r2, r3, #15
 8006214:	4929      	ldr	r1, [pc, #164]	@ (80062bc <HAL_RCC_ClockConfig+0x260>)
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	4313      	orrs	r3, r2
 800621a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800621c:	f7fc ff1e 	bl	800305c <HAL_GetTick>
 8006220:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006222:	e00a      	b.n	800623a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006224:	f7fc ff1a 	bl	800305c <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e03b      	b.n	80062b2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800623a:	4b20      	ldr	r3, [pc, #128]	@ (80062bc <HAL_RCC_ClockConfig+0x260>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	683a      	ldr	r2, [r7, #0]
 8006244:	429a      	cmp	r2, r3
 8006246:	d1ed      	bne.n	8006224 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	d008      	beq.n	8006266 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006254:	4b1a      	ldr	r3, [pc, #104]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	4917      	ldr	r1, [pc, #92]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 8006262:	4313      	orrs	r3, r2
 8006264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d009      	beq.n	8006286 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006272:	4b13      	ldr	r3, [pc, #76]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	691b      	ldr	r3, [r3, #16]
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	490f      	ldr	r1, [pc, #60]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 8006282:	4313      	orrs	r3, r2
 8006284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006286:	f000 f825 	bl	80062d4 <HAL_RCC_GetSysClockFreq>
 800628a:	4602      	mov	r2, r0
 800628c:	4b0c      	ldr	r3, [pc, #48]	@ (80062c0 <HAL_RCC_ClockConfig+0x264>)
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	091b      	lsrs	r3, r3, #4
 8006292:	f003 030f 	and.w	r3, r3, #15
 8006296:	490c      	ldr	r1, [pc, #48]	@ (80062c8 <HAL_RCC_ClockConfig+0x26c>)
 8006298:	5ccb      	ldrb	r3, [r1, r3]
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	fa22 f303 	lsr.w	r3, r2, r3
 80062a2:	4a0a      	ldr	r2, [pc, #40]	@ (80062cc <HAL_RCC_ClockConfig+0x270>)
 80062a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80062a6:	4b0a      	ldr	r3, [pc, #40]	@ (80062d0 <HAL_RCC_ClockConfig+0x274>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fc fe8a 	bl	8002fc4 <HAL_InitTick>
 80062b0:	4603      	mov	r3, r0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	40022000 	.word	0x40022000
 80062c0:	40021000 	.word	0x40021000
 80062c4:	04c4b400 	.word	0x04c4b400
 80062c8:	0800a7ac 	.word	0x0800a7ac
 80062cc:	2000000c 	.word	0x2000000c
 80062d0:	20000010 	.word	0x20000010

080062d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80062da:	4b2c      	ldr	r3, [pc, #176]	@ (800638c <HAL_RCC_GetSysClockFreq+0xb8>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 030c 	and.w	r3, r3, #12
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d102      	bne.n	80062ec <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062e6:	4b2a      	ldr	r3, [pc, #168]	@ (8006390 <HAL_RCC_GetSysClockFreq+0xbc>)
 80062e8:	613b      	str	r3, [r7, #16]
 80062ea:	e047      	b.n	800637c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80062ec:	4b27      	ldr	r3, [pc, #156]	@ (800638c <HAL_RCC_GetSysClockFreq+0xb8>)
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	f003 030c 	and.w	r3, r3, #12
 80062f4:	2b08      	cmp	r3, #8
 80062f6:	d102      	bne.n	80062fe <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062f8:	4b26      	ldr	r3, [pc, #152]	@ (8006394 <HAL_RCC_GetSysClockFreq+0xc0>)
 80062fa:	613b      	str	r3, [r7, #16]
 80062fc:	e03e      	b.n	800637c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80062fe:	4b23      	ldr	r3, [pc, #140]	@ (800638c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 030c 	and.w	r3, r3, #12
 8006306:	2b0c      	cmp	r3, #12
 8006308:	d136      	bne.n	8006378 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800630a:	4b20      	ldr	r3, [pc, #128]	@ (800638c <HAL_RCC_GetSysClockFreq+0xb8>)
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006314:	4b1d      	ldr	r3, [pc, #116]	@ (800638c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	3301      	adds	r3, #1
 8006320:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2b03      	cmp	r3, #3
 8006326:	d10c      	bne.n	8006342 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006328:	4a1a      	ldr	r2, [pc, #104]	@ (8006394 <HAL_RCC_GetSysClockFreq+0xc0>)
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006330:	4a16      	ldr	r2, [pc, #88]	@ (800638c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006332:	68d2      	ldr	r2, [r2, #12]
 8006334:	0a12      	lsrs	r2, r2, #8
 8006336:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800633a:	fb02 f303 	mul.w	r3, r2, r3
 800633e:	617b      	str	r3, [r7, #20]
      break;
 8006340:	e00c      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006342:	4a13      	ldr	r2, [pc, #76]	@ (8006390 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	fbb2 f3f3 	udiv	r3, r2, r3
 800634a:	4a10      	ldr	r2, [pc, #64]	@ (800638c <HAL_RCC_GetSysClockFreq+0xb8>)
 800634c:	68d2      	ldr	r2, [r2, #12]
 800634e:	0a12      	lsrs	r2, r2, #8
 8006350:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006354:	fb02 f303 	mul.w	r3, r2, r3
 8006358:	617b      	str	r3, [r7, #20]
      break;
 800635a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800635c:	4b0b      	ldr	r3, [pc, #44]	@ (800638c <HAL_RCC_GetSysClockFreq+0xb8>)
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	0e5b      	lsrs	r3, r3, #25
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	3301      	adds	r3, #1
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	613b      	str	r3, [r7, #16]
 8006376:	e001      	b.n	800637c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006378:	2300      	movs	r3, #0
 800637a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800637c:	693b      	ldr	r3, [r7, #16]
}
 800637e:	4618      	mov	r0, r3
 8006380:	371c      	adds	r7, #28
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40021000 	.word	0x40021000
 8006390:	00f42400 	.word	0x00f42400
 8006394:	016e3600 	.word	0x016e3600

08006398 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800639c:	4b03      	ldr	r3, [pc, #12]	@ (80063ac <HAL_RCC_GetHCLKFreq+0x14>)
 800639e:	681b      	ldr	r3, [r3, #0]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	2000000c 	.word	0x2000000c

080063b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80063b4:	f7ff fff0 	bl	8006398 <HAL_RCC_GetHCLKFreq>
 80063b8:	4602      	mov	r2, r0
 80063ba:	4b06      	ldr	r3, [pc, #24]	@ (80063d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	0a1b      	lsrs	r3, r3, #8
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	4904      	ldr	r1, [pc, #16]	@ (80063d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80063c6:	5ccb      	ldrb	r3, [r1, r3]
 80063c8:	f003 031f 	and.w	r3, r3, #31
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40021000 	.word	0x40021000
 80063d8:	0800a7bc 	.word	0x0800a7bc

080063dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063e0:	f7ff ffda 	bl	8006398 <HAL_RCC_GetHCLKFreq>
 80063e4:	4602      	mov	r2, r0
 80063e6:	4b06      	ldr	r3, [pc, #24]	@ (8006400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	0adb      	lsrs	r3, r3, #11
 80063ec:	f003 0307 	and.w	r3, r3, #7
 80063f0:	4904      	ldr	r1, [pc, #16]	@ (8006404 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063f2:	5ccb      	ldrb	r3, [r1, r3]
 80063f4:	f003 031f 	and.w	r3, r3, #31
 80063f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063fc:	4618      	mov	r0, r3
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	40021000 	.word	0x40021000
 8006404:	0800a7bc 	.word	0x0800a7bc

08006408 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006408:	b480      	push	{r7}
 800640a:	b087      	sub	sp, #28
 800640c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800640e:	4b1e      	ldr	r3, [pc, #120]	@ (8006488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f003 0303 	and.w	r3, r3, #3
 8006416:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006418:	4b1b      	ldr	r3, [pc, #108]	@ (8006488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	091b      	lsrs	r3, r3, #4
 800641e:	f003 030f 	and.w	r3, r3, #15
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	2b03      	cmp	r3, #3
 800642a:	d10c      	bne.n	8006446 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800642c:	4a17      	ldr	r2, [pc, #92]	@ (800648c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	fbb2 f3f3 	udiv	r3, r2, r3
 8006434:	4a14      	ldr	r2, [pc, #80]	@ (8006488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006436:	68d2      	ldr	r2, [r2, #12]
 8006438:	0a12      	lsrs	r2, r2, #8
 800643a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800643e:	fb02 f303 	mul.w	r3, r2, r3
 8006442:	617b      	str	r3, [r7, #20]
    break;
 8006444:	e00c      	b.n	8006460 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006446:	4a12      	ldr	r2, [pc, #72]	@ (8006490 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	fbb2 f3f3 	udiv	r3, r2, r3
 800644e:	4a0e      	ldr	r2, [pc, #56]	@ (8006488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006450:	68d2      	ldr	r2, [r2, #12]
 8006452:	0a12      	lsrs	r2, r2, #8
 8006454:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006458:	fb02 f303 	mul.w	r3, r2, r3
 800645c:	617b      	str	r3, [r7, #20]
    break;
 800645e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006460:	4b09      	ldr	r3, [pc, #36]	@ (8006488 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	0e5b      	lsrs	r3, r3, #25
 8006466:	f003 0303 	and.w	r3, r3, #3
 800646a:	3301      	adds	r3, #1
 800646c:	005b      	lsls	r3, r3, #1
 800646e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	fbb2 f3f3 	udiv	r3, r2, r3
 8006478:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800647a:	687b      	ldr	r3, [r7, #4]
}
 800647c:	4618      	mov	r0, r3
 800647e:	371c      	adds	r7, #28
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr
 8006488:	40021000 	.word	0x40021000
 800648c:	016e3600 	.word	0x016e3600
 8006490:	00f42400 	.word	0x00f42400

08006494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800649c:	2300      	movs	r3, #0
 800649e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80064a0:	2300      	movs	r3, #0
 80064a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f000 8098 	beq.w	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80064b2:	2300      	movs	r3, #0
 80064b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064b6:	4b43      	ldr	r3, [pc, #268]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d10d      	bne.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064c2:	4b40      	ldr	r3, [pc, #256]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064c6:	4a3f      	ldr	r2, [pc, #252]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ce:	4b3d      	ldr	r3, [pc, #244]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064d6:	60bb      	str	r3, [r7, #8]
 80064d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064da:	2301      	movs	r3, #1
 80064dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064de:	4b3a      	ldr	r3, [pc, #232]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a39      	ldr	r2, [pc, #228]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064ea:	f7fc fdb7 	bl	800305c <HAL_GetTick>
 80064ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064f0:	e009      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064f2:	f7fc fdb3 	bl	800305c <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d902      	bls.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	74fb      	strb	r3, [r7, #19]
        break;
 8006504:	e005      	b.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006506:	4b30      	ldr	r3, [pc, #192]	@ (80065c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800650e:	2b00      	cmp	r3, #0
 8006510:	d0ef      	beq.n	80064f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006512:	7cfb      	ldrb	r3, [r7, #19]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d159      	bne.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006518:	4b2a      	ldr	r3, [pc, #168]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800651a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800651e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006522:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d01e      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	429a      	cmp	r2, r3
 8006532:	d019      	beq.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006534:	4b23      	ldr	r3, [pc, #140]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800653a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800653e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006540:	4b20      	ldr	r3, [pc, #128]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006546:	4a1f      	ldr	r2, [pc, #124]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800654c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006550:	4b1c      	ldr	r3, [pc, #112]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006556:	4a1b      	ldr	r2, [pc, #108]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006558:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800655c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006560:	4a18      	ldr	r2, [pc, #96]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f003 0301 	and.w	r3, r3, #1
 800656e:	2b00      	cmp	r3, #0
 8006570:	d016      	beq.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006572:	f7fc fd73 	bl	800305c <HAL_GetTick>
 8006576:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006578:	e00b      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800657a:	f7fc fd6f 	bl	800305c <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006588:	4293      	cmp	r3, r2
 800658a:	d902      	bls.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	74fb      	strb	r3, [r7, #19]
            break;
 8006590:	e006      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006592:	4b0c      	ldr	r3, [pc, #48]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006598:	f003 0302 	and.w	r3, r3, #2
 800659c:	2b00      	cmp	r3, #0
 800659e:	d0ec      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80065a0:	7cfb      	ldrb	r3, [r7, #19]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10b      	bne.n	80065be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80065a6:	4b07      	ldr	r3, [pc, #28]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065b4:	4903      	ldr	r1, [pc, #12]	@ (80065c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80065bc:	e008      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80065be:	7cfb      	ldrb	r3, [r7, #19]
 80065c0:	74bb      	strb	r3, [r7, #18]
 80065c2:	e005      	b.n	80065d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80065c4:	40021000 	.word	0x40021000
 80065c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065cc:	7cfb      	ldrb	r3, [r7, #19]
 80065ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065d0:	7c7b      	ldrb	r3, [r7, #17]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d105      	bne.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065d6:	4ba7      	ldr	r3, [pc, #668]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065da:	4aa6      	ldr	r2, [pc, #664]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065e0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065ee:	4ba1      	ldr	r3, [pc, #644]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065f4:	f023 0203 	bic.w	r2, r3, #3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	499d      	ldr	r1, [pc, #628]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80065fe:	4313      	orrs	r3, r2
 8006600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006610:	4b98      	ldr	r3, [pc, #608]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006616:	f023 020c 	bic.w	r2, r3, #12
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	4995      	ldr	r1, [pc, #596]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006620:	4313      	orrs	r3, r2
 8006622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 0304 	and.w	r3, r3, #4
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006632:	4b90      	ldr	r3, [pc, #576]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006638:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	68db      	ldr	r3, [r3, #12]
 8006640:	498c      	ldr	r1, [pc, #560]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006642:	4313      	orrs	r3, r2
 8006644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f003 0308 	and.w	r3, r3, #8
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006654:	4b87      	ldr	r3, [pc, #540]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800665a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	4984      	ldr	r1, [pc, #528]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006664:	4313      	orrs	r3, r2
 8006666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f003 0310 	and.w	r3, r3, #16
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006676:	4b7f      	ldr	r3, [pc, #508]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800667c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	497b      	ldr	r1, [pc, #492]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006686:	4313      	orrs	r3, r2
 8006688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00a      	beq.n	80066ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006698:	4b76      	ldr	r3, [pc, #472]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800669a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	4973      	ldr	r1, [pc, #460]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a8:	4313      	orrs	r3, r2
 80066aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066ba:	4b6e      	ldr	r3, [pc, #440]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066c0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	496a      	ldr	r1, [pc, #424]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00a      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066dc:	4b65      	ldr	r3, [pc, #404]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066e2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	4962      	ldr	r1, [pc, #392]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066fe:	4b5d      	ldr	r3, [pc, #372]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006704:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670c:	4959      	ldr	r1, [pc, #356]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006720:	4b54      	ldr	r3, [pc, #336]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006722:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006726:	f023 0203 	bic.w	r2, r3, #3
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800672e:	4951      	ldr	r1, [pc, #324]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006742:	4b4c      	ldr	r3, [pc, #304]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006748:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006750:	4948      	ldr	r1, [pc, #288]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006760:	2b00      	cmp	r3, #0
 8006762:	d015      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006764:	4b43      	ldr	r3, [pc, #268]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006772:	4940      	ldr	r1, [pc, #256]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006774:	4313      	orrs	r3, r2
 8006776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006782:	d105      	bne.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006784:	4b3b      	ldr	r3, [pc, #236]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	4a3a      	ldr	r2, [pc, #232]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800678a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800678e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006798:	2b00      	cmp	r3, #0
 800679a:	d015      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800679c:	4b35      	ldr	r3, [pc, #212]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800679e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067aa:	4932      	ldr	r1, [pc, #200]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067ac:	4313      	orrs	r3, r2
 80067ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80067ba:	d105      	bne.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	4a2c      	ldr	r2, [pc, #176]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067c6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d015      	beq.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80067d4:	4b27      	ldr	r3, [pc, #156]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067da:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067e2:	4924      	ldr	r1, [pc, #144]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067f2:	d105      	bne.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067f4:	4b1f      	ldr	r3, [pc, #124]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	4a1e      	ldr	r2, [pc, #120]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067fe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d015      	beq.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800680c:	4b19      	ldr	r3, [pc, #100]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800680e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006812:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681a:	4916      	ldr	r1, [pc, #88]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800681c:	4313      	orrs	r3, r2
 800681e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006826:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800682a:	d105      	bne.n	8006838 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800682c:	4b11      	ldr	r3, [pc, #68]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	4a10      	ldr	r2, [pc, #64]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006832:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006836:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d019      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006844:	4b0b      	ldr	r3, [pc, #44]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800684a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006852:	4908      	ldr	r1, [pc, #32]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006854:	4313      	orrs	r3, r2
 8006856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006862:	d109      	bne.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006864:	4b03      	ldr	r3, [pc, #12]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	4a02      	ldr	r2, [pc, #8]	@ (8006874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800686a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800686e:	60d3      	str	r3, [r2, #12]
 8006870:	e002      	b.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006872:	bf00      	nop
 8006874:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006880:	2b00      	cmp	r3, #0
 8006882:	d015      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006884:	4b29      	ldr	r3, [pc, #164]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006886:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800688a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	4926      	ldr	r1, [pc, #152]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006894:	4313      	orrs	r3, r2
 8006896:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068a2:	d105      	bne.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068a4:	4b21      	ldr	r3, [pc, #132]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	4a20      	ldr	r2, [pc, #128]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068ae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d015      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80068bc:	4b1b      	ldr	r3, [pc, #108]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068c2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068ca:	4918      	ldr	r1, [pc, #96]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068cc:	4313      	orrs	r3, r2
 80068ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80068d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068da:	d105      	bne.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80068dc:	4b13      	ldr	r3, [pc, #76]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	4a12      	ldr	r2, [pc, #72]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068e6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d015      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80068f4:	4b0d      	ldr	r3, [pc, #52]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80068f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068fa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006902:	490a      	ldr	r1, [pc, #40]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006904:	4313      	orrs	r3, r2
 8006906:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800690e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006912:	d105      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006914:	4b05      	ldr	r3, [pc, #20]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	4a04      	ldr	r2, [pc, #16]	@ (800692c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800691a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800691e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006920:	7cbb      	ldrb	r3, [r7, #18]
}
 8006922:	4618      	mov	r0, r3
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	40021000 	.word	0x40021000

08006930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b082      	sub	sp, #8
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d101      	bne.n	8006942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e054      	b.n	80069ec <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d111      	bne.n	8006972 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f001 feec 	bl	8008734 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d102      	bne.n	800696a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a23      	ldr	r2, [pc, #140]	@ (80069f4 <HAL_TIM_Base_Init+0xc4>)
 8006968:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2202      	movs	r2, #2
 8006976:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3304      	adds	r3, #4
 8006982:	4619      	mov	r1, r3
 8006984:	4610      	mov	r0, r2
 8006986:	f001 fa35 	bl	8007df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2201      	movs	r2, #1
 800699e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2201      	movs	r2, #1
 80069be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	08002a6d 	.word	0x08002a6d

080069f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d001      	beq.n	8006a10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e04c      	b.n	8006aaa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a26      	ldr	r2, [pc, #152]	@ (8006ab8 <HAL_TIM_Base_Start+0xc0>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d022      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a2a:	d01d      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a22      	ldr	r2, [pc, #136]	@ (8006abc <HAL_TIM_Base_Start+0xc4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d018      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a21      	ldr	r2, [pc, #132]	@ (8006ac0 <HAL_TIM_Base_Start+0xc8>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d013      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac4 <HAL_TIM_Base_Start+0xcc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d00e      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac8 <HAL_TIM_Base_Start+0xd0>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d009      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a1c      	ldr	r2, [pc, #112]	@ (8006acc <HAL_TIM_Base_Start+0xd4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d004      	beq.n	8006a68 <HAL_TIM_Base_Start+0x70>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4a1b      	ldr	r2, [pc, #108]	@ (8006ad0 <HAL_TIM_Base_Start+0xd8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d115      	bne.n	8006a94 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	689a      	ldr	r2, [r3, #8]
 8006a6e:	4b19      	ldr	r3, [pc, #100]	@ (8006ad4 <HAL_TIM_Base_Start+0xdc>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2b06      	cmp	r3, #6
 8006a78:	d015      	beq.n	8006aa6 <HAL_TIM_Base_Start+0xae>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a80:	d011      	beq.n	8006aa6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f042 0201 	orr.w	r2, r2, #1
 8006a90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a92:	e008      	b.n	8006aa6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681a      	ldr	r2, [r3, #0]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0201 	orr.w	r2, r2, #1
 8006aa2:	601a      	str	r2, [r3, #0]
 8006aa4:	e000      	b.n	8006aa8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aa6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006aa8:	2300      	movs	r3, #0
}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3714      	adds	r7, #20
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	40012c00 	.word	0x40012c00
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40014000 	.word	0x40014000
 8006ad0:	40015000 	.word	0x40015000
 8006ad4:	00010007 	.word	0x00010007

08006ad8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d001      	beq.n	8006af0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e054      	b.n	8006b9a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2202      	movs	r2, #2
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f042 0201 	orr.w	r2, r2, #1
 8006b06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a26      	ldr	r2, [pc, #152]	@ (8006ba8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d022      	beq.n	8006b58 <HAL_TIM_Base_Start_IT+0x80>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b1a:	d01d      	beq.n	8006b58 <HAL_TIM_Base_Start_IT+0x80>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a22      	ldr	r2, [pc, #136]	@ (8006bac <HAL_TIM_Base_Start_IT+0xd4>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d018      	beq.n	8006b58 <HAL_TIM_Base_Start_IT+0x80>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a21      	ldr	r2, [pc, #132]	@ (8006bb0 <HAL_TIM_Base_Start_IT+0xd8>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d013      	beq.n	8006b58 <HAL_TIM_Base_Start_IT+0x80>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a1f      	ldr	r2, [pc, #124]	@ (8006bb4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d00e      	beq.n	8006b58 <HAL_TIM_Base_Start_IT+0x80>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8006bb8 <HAL_TIM_Base_Start_IT+0xe0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d009      	beq.n	8006b58 <HAL_TIM_Base_Start_IT+0x80>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a1c      	ldr	r2, [pc, #112]	@ (8006bbc <HAL_TIM_Base_Start_IT+0xe4>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d004      	beq.n	8006b58 <HAL_TIM_Base_Start_IT+0x80>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a1b      	ldr	r2, [pc, #108]	@ (8006bc0 <HAL_TIM_Base_Start_IT+0xe8>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d115      	bne.n	8006b84 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	689a      	ldr	r2, [r3, #8]
 8006b5e:	4b19      	ldr	r3, [pc, #100]	@ (8006bc4 <HAL_TIM_Base_Start_IT+0xec>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b06      	cmp	r3, #6
 8006b68:	d015      	beq.n	8006b96 <HAL_TIM_Base_Start_IT+0xbe>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b70:	d011      	beq.n	8006b96 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f042 0201 	orr.w	r2, r2, #1
 8006b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b82:	e008      	b.n	8006b96 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e000      	b.n	8006b98 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b96:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	40012c00 	.word	0x40012c00
 8006bac:	40000400 	.word	0x40000400
 8006bb0:	40000800 	.word	0x40000800
 8006bb4:	40000c00 	.word	0x40000c00
 8006bb8:	40013400 	.word	0x40013400
 8006bbc:	40014000 	.word	0x40014000
 8006bc0:	40015000 	.word	0x40015000
 8006bc4:	00010007 	.word	0x00010007

08006bc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b082      	sub	sp, #8
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d101      	bne.n	8006bda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	e054      	b.n	8006c84 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d111      	bne.n	8006c0a <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f001 fda0 	bl	8008734 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d102      	bne.n	8006c02 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a23      	ldr	r2, [pc, #140]	@ (8006c8c <HAL_TIM_PWM_Init+0xc4>)
 8006c00:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2202      	movs	r2, #2
 8006c0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	4610      	mov	r0, r2
 8006c1e:	f001 f8e9 	bl	8007df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2201      	movs	r2, #1
 8006c36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c82:	2300      	movs	r3, #0
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3708      	adds	r7, #8
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}
 8006c8c:	08006c91 	.word	0x08006c91

08006c90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d109      	bne.n	8006cc8 <HAL_TIM_PWM_Start+0x24>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	bf14      	ite	ne
 8006cc0:	2301      	movne	r3, #1
 8006cc2:	2300      	moveq	r3, #0
 8006cc4:	b2db      	uxtb	r3, r3
 8006cc6:	e03c      	b.n	8006d42 <HAL_TIM_PWM_Start+0x9e>
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	2b04      	cmp	r3, #4
 8006ccc:	d109      	bne.n	8006ce2 <HAL_TIM_PWM_Start+0x3e>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006cd4:	b2db      	uxtb	r3, r3
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	bf14      	ite	ne
 8006cda:	2301      	movne	r3, #1
 8006cdc:	2300      	moveq	r3, #0
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	e02f      	b.n	8006d42 <HAL_TIM_PWM_Start+0x9e>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d109      	bne.n	8006cfc <HAL_TIM_PWM_Start+0x58>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	bf14      	ite	ne
 8006cf4:	2301      	movne	r3, #1
 8006cf6:	2300      	moveq	r3, #0
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	e022      	b.n	8006d42 <HAL_TIM_PWM_Start+0x9e>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	2b0c      	cmp	r3, #12
 8006d00:	d109      	bne.n	8006d16 <HAL_TIM_PWM_Start+0x72>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	bf14      	ite	ne
 8006d0e:	2301      	movne	r3, #1
 8006d10:	2300      	moveq	r3, #0
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	e015      	b.n	8006d42 <HAL_TIM_PWM_Start+0x9e>
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	2b10      	cmp	r3, #16
 8006d1a:	d109      	bne.n	8006d30 <HAL_TIM_PWM_Start+0x8c>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	bf14      	ite	ne
 8006d28:	2301      	movne	r3, #1
 8006d2a:	2300      	moveq	r3, #0
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	e008      	b.n	8006d42 <HAL_TIM_PWM_Start+0x9e>
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	bf14      	ite	ne
 8006d3c:	2301      	movne	r3, #1
 8006d3e:	2300      	moveq	r3, #0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d001      	beq.n	8006d4a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e0a6      	b.n	8006e98 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d104      	bne.n	8006d5a <HAL_TIM_PWM_Start+0xb6>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2202      	movs	r2, #2
 8006d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006d58:	e023      	b.n	8006da2 <HAL_TIM_PWM_Start+0xfe>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	2b04      	cmp	r3, #4
 8006d5e:	d104      	bne.n	8006d6a <HAL_TIM_PWM_Start+0xc6>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006d68:	e01b      	b.n	8006da2 <HAL_TIM_PWM_Start+0xfe>
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d104      	bne.n	8006d7a <HAL_TIM_PWM_Start+0xd6>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2202      	movs	r2, #2
 8006d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006d78:	e013      	b.n	8006da2 <HAL_TIM_PWM_Start+0xfe>
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	2b0c      	cmp	r3, #12
 8006d7e:	d104      	bne.n	8006d8a <HAL_TIM_PWM_Start+0xe6>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006d88:	e00b      	b.n	8006da2 <HAL_TIM_PWM_Start+0xfe>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b10      	cmp	r3, #16
 8006d8e:	d104      	bne.n	8006d9a <HAL_TIM_PWM_Start+0xf6>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2202      	movs	r2, #2
 8006d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006d98:	e003      	b.n	8006da2 <HAL_TIM_PWM_Start+0xfe>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2201      	movs	r2, #1
 8006da8:	6839      	ldr	r1, [r7, #0]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 fc9c 	bl	80086e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a3a      	ldr	r2, [pc, #232]	@ (8006ea0 <HAL_TIM_PWM_Start+0x1fc>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d018      	beq.n	8006dec <HAL_TIM_PWM_Start+0x148>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a39      	ldr	r2, [pc, #228]	@ (8006ea4 <HAL_TIM_PWM_Start+0x200>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d013      	beq.n	8006dec <HAL_TIM_PWM_Start+0x148>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a37      	ldr	r2, [pc, #220]	@ (8006ea8 <HAL_TIM_PWM_Start+0x204>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d00e      	beq.n	8006dec <HAL_TIM_PWM_Start+0x148>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a36      	ldr	r2, [pc, #216]	@ (8006eac <HAL_TIM_PWM_Start+0x208>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d009      	beq.n	8006dec <HAL_TIM_PWM_Start+0x148>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a34      	ldr	r2, [pc, #208]	@ (8006eb0 <HAL_TIM_PWM_Start+0x20c>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d004      	beq.n	8006dec <HAL_TIM_PWM_Start+0x148>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a33      	ldr	r2, [pc, #204]	@ (8006eb4 <HAL_TIM_PWM_Start+0x210>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d101      	bne.n	8006df0 <HAL_TIM_PWM_Start+0x14c>
 8006dec:	2301      	movs	r3, #1
 8006dee:	e000      	b.n	8006df2 <HAL_TIM_PWM_Start+0x14e>
 8006df0:	2300      	movs	r3, #0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a25      	ldr	r2, [pc, #148]	@ (8006ea0 <HAL_TIM_PWM_Start+0x1fc>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d022      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x1b2>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e18:	d01d      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x1b2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a26      	ldr	r2, [pc, #152]	@ (8006eb8 <HAL_TIM_PWM_Start+0x214>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d018      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x1b2>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a24      	ldr	r2, [pc, #144]	@ (8006ebc <HAL_TIM_PWM_Start+0x218>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d013      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x1b2>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a23      	ldr	r2, [pc, #140]	@ (8006ec0 <HAL_TIM_PWM_Start+0x21c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d00e      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x1b2>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a19      	ldr	r2, [pc, #100]	@ (8006ea4 <HAL_TIM_PWM_Start+0x200>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d009      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x1b2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a18      	ldr	r2, [pc, #96]	@ (8006ea8 <HAL_TIM_PWM_Start+0x204>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_TIM_PWM_Start+0x1b2>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a18      	ldr	r2, [pc, #96]	@ (8006eb4 <HAL_TIM_PWM_Start+0x210>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d115      	bne.n	8006e82 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	4b19      	ldr	r3, [pc, #100]	@ (8006ec4 <HAL_TIM_PWM_Start+0x220>)
 8006e5e:	4013      	ands	r3, r2
 8006e60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2b06      	cmp	r3, #6
 8006e66:	d015      	beq.n	8006e94 <HAL_TIM_PWM_Start+0x1f0>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e6e:	d011      	beq.n	8006e94 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e80:	e008      	b.n	8006e94 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0201 	orr.w	r2, r2, #1
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	e000      	b.n	8006e96 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	40012c00 	.word	0x40012c00
 8006ea4:	40013400 	.word	0x40013400
 8006ea8:	40014000 	.word	0x40014000
 8006eac:	40014400 	.word	0x40014400
 8006eb0:	40014800 	.word	0x40014800
 8006eb4:	40015000 	.word	0x40015000
 8006eb8:	40000400 	.word	0x40000400
 8006ebc:	40000800 	.word	0x40000800
 8006ec0:	40000c00 	.word	0x40000c00
 8006ec4:	00010007 	.word	0x00010007

08006ec8 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d101      	bne.n	8006edc <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	e04c      	b.n	8006f76 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d111      	bne.n	8006f0c <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f001 fc1f 	bl	8008734 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d102      	bne.n	8006f04 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	4a1f      	ldr	r2, [pc, #124]	@ (8006f80 <HAL_TIM_OnePulse_Init+0xb8>)
 8006f02:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3304      	adds	r3, #4
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	4610      	mov	r0, r2
 8006f20:	f000 ff68 	bl	8007df4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f022 0208 	bic.w	r2, r2, #8
 8006f32:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	6819      	ldr	r1, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2201      	movs	r2, #1
 8006f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2201      	movs	r2, #1
 8006f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	08006f85 	.word	0x08006f85

08006f84 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006fa8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006fb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fc0:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fc2:	7bfb      	ldrb	r3, [r7, #15]
 8006fc4:	2b01      	cmp	r3, #1
 8006fc6:	d108      	bne.n	8006fda <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d105      	bne.n	8006fda <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006fce:	7b7b      	ldrb	r3, [r7, #13]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d102      	bne.n	8006fda <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006fd4:	7b3b      	ldrb	r3, [r7, #12]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d001      	beq.n	8006fde <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e059      	b.n	8007092 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2202      	movs	r2, #2
 8006fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2202      	movs	r2, #2
 8006fea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2202      	movs	r2, #2
 8006ff2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2202      	movs	r2, #2
 8006ffa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68da      	ldr	r2, [r3, #12]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0202 	orr.w	r2, r2, #2
 800700c:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 0204 	orr.w	r2, r2, #4
 800701c:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2201      	movs	r2, #1
 8007024:	2100      	movs	r1, #0
 8007026:	4618      	mov	r0, r3
 8007028:	f001 fb5e 	bl	80086e8 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	2201      	movs	r2, #1
 8007032:	2104      	movs	r1, #4
 8007034:	4618      	mov	r0, r3
 8007036:	f001 fb57 	bl	80086e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a17      	ldr	r2, [pc, #92]	@ (800709c <HAL_TIM_OnePulse_Start_IT+0x104>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d018      	beq.n	8007076 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a15      	ldr	r2, [pc, #84]	@ (80070a0 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d013      	beq.n	8007076 <HAL_TIM_OnePulse_Start_IT+0xde>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a14      	ldr	r2, [pc, #80]	@ (80070a4 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d00e      	beq.n	8007076 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a12      	ldr	r2, [pc, #72]	@ (80070a8 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d009      	beq.n	8007076 <HAL_TIM_OnePulse_Start_IT+0xde>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a11      	ldr	r2, [pc, #68]	@ (80070ac <HAL_TIM_OnePulse_Start_IT+0x114>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d004      	beq.n	8007076 <HAL_TIM_OnePulse_Start_IT+0xde>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a0f      	ldr	r2, [pc, #60]	@ (80070b0 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d101      	bne.n	800707a <HAL_TIM_OnePulse_Start_IT+0xe2>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <HAL_TIM_OnePulse_Start_IT+0xe4>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d007      	beq.n	8007090 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800708e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	40012c00 	.word	0x40012c00
 80070a0:	40013400 	.word	0x40013400
 80070a4:	40014000 	.word	0x40014000
 80070a8:	40014400 	.word	0x40014400
 80070ac:	40014800 	.word	0x40014800
 80070b0:	40015000 	.word	0x40015000

080070b4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d101      	bne.n	80070c8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	e0a2      	b.n	800720e <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070ce:	b2db      	uxtb	r3, r3
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d111      	bne.n	80070f8 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f001 fb29 	bl	8008734 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d102      	bne.n	80070f0 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a4a      	ldr	r2, [pc, #296]	@ (8007218 <HAL_TIM_Encoder_Init+0x164>)
 80070ee:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2202      	movs	r2, #2
 80070fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	6812      	ldr	r2, [r2, #0]
 800710a:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 800710e:	f023 0307 	bic.w	r3, r3, #7
 8007112:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681a      	ldr	r2, [r3, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	3304      	adds	r3, #4
 800711c:	4619      	mov	r1, r3
 800711e:	4610      	mov	r0, r2
 8007120:	f000 fe68 	bl	8007df4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a1b      	ldr	r3, [r3, #32]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	697a      	ldr	r2, [r7, #20]
 8007142:	4313      	orrs	r3, r2
 8007144:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800714c:	f023 0303 	bic.w	r3, r3, #3
 8007150:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	689a      	ldr	r2, [r3, #8]
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	021b      	lsls	r3, r3, #8
 800715c:	4313      	orrs	r3, r2
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800716a:	f023 030c 	bic.w	r3, r3, #12
 800716e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007176:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800717a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	69db      	ldr	r3, [r3, #28]
 8007184:	021b      	lsls	r3, r3, #8
 8007186:	4313      	orrs	r3, r2
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	4313      	orrs	r3, r2
 800718c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	011a      	lsls	r2, r3, #4
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	031b      	lsls	r3, r3, #12
 800719a:	4313      	orrs	r3, r2
 800719c:	693a      	ldr	r2, [r7, #16]
 800719e:	4313      	orrs	r3, r2
 80071a0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80071a8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80071b0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	695b      	ldr	r3, [r3, #20]
 80071ba:	011b      	lsls	r3, r3, #4
 80071bc:	4313      	orrs	r3, r2
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	08002b61 	.word	0x08002b61

0800721c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800722c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007234:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800723c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007244:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d110      	bne.n	800726e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d102      	bne.n	8007258 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007252:	7b7b      	ldrb	r3, [r7, #13]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d001      	beq.n	800725c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e069      	b.n	8007330 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2202      	movs	r2, #2
 8007268:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800726c:	e031      	b.n	80072d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	2b04      	cmp	r3, #4
 8007272:	d110      	bne.n	8007296 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007274:	7bbb      	ldrb	r3, [r7, #14]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d102      	bne.n	8007280 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800727a:	7b3b      	ldrb	r3, [r7, #12]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d001      	beq.n	8007284 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e055      	b.n	8007330 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007294:	e01d      	b.n	80072d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007296:	7bfb      	ldrb	r3, [r7, #15]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d108      	bne.n	80072ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d105      	bne.n	80072ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80072a2:	7b7b      	ldrb	r3, [r7, #13]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d102      	bne.n	80072ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80072a8:	7b3b      	ldrb	r3, [r7, #12]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d001      	beq.n	80072b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e03e      	b.n	8007330 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2202      	movs	r2, #2
 80072b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2202      	movs	r2, #2
 80072be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2202      	movs	r2, #2
 80072c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2202      	movs	r2, #2
 80072ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <HAL_TIM_Encoder_Start+0xc4>
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d008      	beq.n	80072f0 <HAL_TIM_Encoder_Start+0xd4>
 80072de:	e00f      	b.n	8007300 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2201      	movs	r2, #1
 80072e6:	2100      	movs	r1, #0
 80072e8:	4618      	mov	r0, r3
 80072ea:	f001 f9fd 	bl	80086e8 <TIM_CCxChannelCmd>
      break;
 80072ee:	e016      	b.n	800731e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2201      	movs	r2, #1
 80072f6:	2104      	movs	r1, #4
 80072f8:	4618      	mov	r0, r3
 80072fa:	f001 f9f5 	bl	80086e8 <TIM_CCxChannelCmd>
      break;
 80072fe:	e00e      	b.n	800731e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	2201      	movs	r2, #1
 8007306:	2100      	movs	r1, #0
 8007308:	4618      	mov	r0, r3
 800730a:	f001 f9ed 	bl	80086e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2201      	movs	r2, #1
 8007314:	2104      	movs	r1, #4
 8007316:	4618      	mov	r0, r3
 8007318:	f001 f9e6 	bl	80086e8 <TIM_CCxChannelCmd>
      break;
 800731c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f042 0201 	orr.w	r2, r2, #1
 800732c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	68db      	ldr	r3, [r3, #12]
 8007346:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d026      	beq.n	80073a8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b00      	cmp	r3, #0
 8007362:	d021      	beq.n	80073a8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f06f 0202 	mvn.w	r2, #2
 800736c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d005      	beq.n	800738e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	4798      	blx	r3
 800738c:	e009      	b.n	80073a2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2200      	movs	r2, #0
 80073a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f003 0304 	and.w	r3, r3, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d026      	beq.n	8007400 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f003 0304 	and.w	r3, r3, #4
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d021      	beq.n	8007400 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f06f 0204 	mvn.w	r2, #4
 80073c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2202      	movs	r2, #2
 80073ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d005      	beq.n	80073e6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	4798      	blx	r3
 80073e4:	e009      	b.n	80073fa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	f003 0308 	and.w	r3, r3, #8
 8007406:	2b00      	cmp	r3, #0
 8007408:	d026      	beq.n	8007458 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f003 0308 	and.w	r3, r3, #8
 8007410:	2b00      	cmp	r3, #0
 8007412:	d021      	beq.n	8007458 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f06f 0208 	mvn.w	r2, #8
 800741c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2204      	movs	r2, #4
 8007422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	69db      	ldr	r3, [r3, #28]
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	2b00      	cmp	r3, #0
 8007430:	d005      	beq.n	800743e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	4798      	blx	r3
 800743c:	e009      	b.n	8007452 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	f003 0310 	and.w	r3, r3, #16
 800745e:	2b00      	cmp	r3, #0
 8007460:	d026      	beq.n	80074b0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b00      	cmp	r3, #0
 800746a:	d021      	beq.n	80074b0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0210 	mvn.w	r2, #16
 8007474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2208      	movs	r2, #8
 800747a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	69db      	ldr	r3, [r3, #28]
 8007482:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007486:	2b00      	cmp	r3, #0
 8007488:	d005      	beq.n	8007496 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	4798      	blx	r3
 8007494:	e009      	b.n	80074aa <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00e      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f003 0301 	and.w	r3, r3, #1
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d009      	beq.n	80074d8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f06f 0201 	mvn.w	r2, #1
 80074cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d104      	bne.n	80074ec <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d00e      	beq.n	800750a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d009      	beq.n	800750a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80074fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00e      	beq.n	8007532 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800751a:	2b00      	cmp	r3, #0
 800751c:	d009      	beq.n	8007532 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007526:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00e      	beq.n	800755a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007542:	2b00      	cmp	r3, #0
 8007544:	d009      	beq.n	800755a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800754e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	f003 0320 	and.w	r3, r3, #32
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00e      	beq.n	8007582 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f003 0320 	and.w	r3, r3, #32
 800756a:	2b00      	cmp	r3, #0
 800756c:	d009      	beq.n	8007582 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f06f 0220 	mvn.w	r2, #32
 8007576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00e      	beq.n	80075aa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d009      	beq.n	80075aa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800759e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00e      	beq.n	80075d2 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d009      	beq.n	80075d2 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80075c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00e      	beq.n	80075fa <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80075ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00e      	beq.n	8007622 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800760a:	2b00      	cmp	r3, #0
 800760c:	d009      	beq.n	8007622 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007622:	bf00      	nop
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
	...

0800762c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007638:	2300      	movs	r3, #0
 800763a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007642:	2b01      	cmp	r3, #1
 8007644:	d101      	bne.n	800764a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007646:	2302      	movs	r3, #2
 8007648:	e0ff      	b.n	800784a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2201      	movs	r2, #1
 800764e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b14      	cmp	r3, #20
 8007656:	f200 80f0 	bhi.w	800783a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800765a:	a201      	add	r2, pc, #4	@ (adr r2, 8007660 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800765c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007660:	080076b5 	.word	0x080076b5
 8007664:	0800783b 	.word	0x0800783b
 8007668:	0800783b 	.word	0x0800783b
 800766c:	0800783b 	.word	0x0800783b
 8007670:	080076f5 	.word	0x080076f5
 8007674:	0800783b 	.word	0x0800783b
 8007678:	0800783b 	.word	0x0800783b
 800767c:	0800783b 	.word	0x0800783b
 8007680:	08007737 	.word	0x08007737
 8007684:	0800783b 	.word	0x0800783b
 8007688:	0800783b 	.word	0x0800783b
 800768c:	0800783b 	.word	0x0800783b
 8007690:	08007777 	.word	0x08007777
 8007694:	0800783b 	.word	0x0800783b
 8007698:	0800783b 	.word	0x0800783b
 800769c:	0800783b 	.word	0x0800783b
 80076a0:	080077b9 	.word	0x080077b9
 80076a4:	0800783b 	.word	0x0800783b
 80076a8:	0800783b 	.word	0x0800783b
 80076ac:	0800783b 	.word	0x0800783b
 80076b0:	080077f9 	.word	0x080077f9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68b9      	ldr	r1, [r7, #8]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 fc4e 	bl	8007f5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699a      	ldr	r2, [r3, #24]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 0208 	orr.w	r2, r2, #8
 80076ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	699a      	ldr	r2, [r3, #24]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f022 0204 	bic.w	r2, r2, #4
 80076de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6999      	ldr	r1, [r3, #24]
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	691a      	ldr	r2, [r3, #16]
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	430a      	orrs	r2, r1
 80076f0:	619a      	str	r2, [r3, #24]
      break;
 80076f2:	e0a5      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68b9      	ldr	r1, [r7, #8]
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fcc8 	bl	8008090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800770e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	699a      	ldr	r2, [r3, #24]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800771e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	6999      	ldr	r1, [r3, #24]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	021a      	lsls	r2, r3, #8
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	619a      	str	r2, [r3, #24]
      break;
 8007734:	e084      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	4618      	mov	r0, r3
 800773e:	f000 fd3b 	bl	80081b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	69da      	ldr	r2, [r3, #28]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f042 0208 	orr.w	r2, r2, #8
 8007750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69da      	ldr	r2, [r3, #28]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f022 0204 	bic.w	r2, r2, #4
 8007760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	69d9      	ldr	r1, [r3, #28]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	430a      	orrs	r2, r1
 8007772:	61da      	str	r2, [r3, #28]
      break;
 8007774:	e064      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	68b9      	ldr	r1, [r7, #8]
 800777c:	4618      	mov	r0, r3
 800777e:	f000 fdad 	bl	80082dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	69da      	ldr	r2, [r3, #28]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	69da      	ldr	r2, [r3, #28]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69d9      	ldr	r1, [r3, #28]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	021a      	lsls	r2, r3, #8
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	430a      	orrs	r2, r1
 80077b4:	61da      	str	r2, [r3, #28]
      break;
 80077b6:	e043      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68b9      	ldr	r1, [r7, #8]
 80077be:	4618      	mov	r0, r3
 80077c0:	f000 fe20 	bl	8008404 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f042 0208 	orr.w	r2, r2, #8
 80077d2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 0204 	bic.w	r2, r2, #4
 80077e2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80077f6:	e023      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68b9      	ldr	r1, [r7, #8]
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fe6a 	bl	80084d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007812:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007822:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	021a      	lsls	r2, r3, #8
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	430a      	orrs	r2, r1
 8007836:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007838:	e002      	b.n	8007840 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	75fb      	strb	r3, [r7, #23]
      break;
 800783e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007848:	7dfb      	ldrb	r3, [r7, #23]
}
 800784a:	4618      	mov	r0, r3
 800784c:	3718      	adds	r7, #24
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop

08007854 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <HAL_TIM_ConfigClockSource+0x1c>
 800786c:	2302      	movs	r3, #2
 800786e:	e0f6      	b.n	8007a5e <HAL_TIM_ConfigClockSource+0x20a>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800788e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800789a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	68ba      	ldr	r2, [r7, #8]
 80078a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a6f      	ldr	r2, [pc, #444]	@ (8007a68 <HAL_TIM_ConfigClockSource+0x214>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	f000 80c1 	beq.w	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 80078b0:	4a6d      	ldr	r2, [pc, #436]	@ (8007a68 <HAL_TIM_ConfigClockSource+0x214>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	f200 80c6 	bhi.w	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 80078b8:	4a6c      	ldr	r2, [pc, #432]	@ (8007a6c <HAL_TIM_ConfigClockSource+0x218>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	f000 80b9 	beq.w	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 80078c0:	4a6a      	ldr	r2, [pc, #424]	@ (8007a6c <HAL_TIM_ConfigClockSource+0x218>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	f200 80be 	bhi.w	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 80078c8:	4a69      	ldr	r2, [pc, #420]	@ (8007a70 <HAL_TIM_ConfigClockSource+0x21c>)
 80078ca:	4293      	cmp	r3, r2
 80078cc:	f000 80b1 	beq.w	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 80078d0:	4a67      	ldr	r2, [pc, #412]	@ (8007a70 <HAL_TIM_ConfigClockSource+0x21c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	f200 80b6 	bhi.w	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 80078d8:	4a66      	ldr	r2, [pc, #408]	@ (8007a74 <HAL_TIM_ConfigClockSource+0x220>)
 80078da:	4293      	cmp	r3, r2
 80078dc:	f000 80a9 	beq.w	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 80078e0:	4a64      	ldr	r2, [pc, #400]	@ (8007a74 <HAL_TIM_ConfigClockSource+0x220>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	f200 80ae 	bhi.w	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 80078e8:	4a63      	ldr	r2, [pc, #396]	@ (8007a78 <HAL_TIM_ConfigClockSource+0x224>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	f000 80a1 	beq.w	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 80078f0:	4a61      	ldr	r2, [pc, #388]	@ (8007a78 <HAL_TIM_ConfigClockSource+0x224>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	f200 80a6 	bhi.w	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 80078f8:	4a60      	ldr	r2, [pc, #384]	@ (8007a7c <HAL_TIM_ConfigClockSource+0x228>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	f000 8099 	beq.w	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 8007900:	4a5e      	ldr	r2, [pc, #376]	@ (8007a7c <HAL_TIM_ConfigClockSource+0x228>)
 8007902:	4293      	cmp	r3, r2
 8007904:	f200 809e 	bhi.w	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007908:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800790c:	f000 8091 	beq.w	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 8007910:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007914:	f200 8096 	bhi.w	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007918:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800791c:	f000 8089 	beq.w	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 8007920:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007924:	f200 808e 	bhi.w	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800792c:	d03e      	beq.n	80079ac <HAL_TIM_ConfigClockSource+0x158>
 800792e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007932:	f200 8087 	bhi.w	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800793a:	f000 8086 	beq.w	8007a4a <HAL_TIM_ConfigClockSource+0x1f6>
 800793e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007942:	d87f      	bhi.n	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007944:	2b70      	cmp	r3, #112	@ 0x70
 8007946:	d01a      	beq.n	800797e <HAL_TIM_ConfigClockSource+0x12a>
 8007948:	2b70      	cmp	r3, #112	@ 0x70
 800794a:	d87b      	bhi.n	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 800794c:	2b60      	cmp	r3, #96	@ 0x60
 800794e:	d050      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x19e>
 8007950:	2b60      	cmp	r3, #96	@ 0x60
 8007952:	d877      	bhi.n	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007954:	2b50      	cmp	r3, #80	@ 0x50
 8007956:	d03c      	beq.n	80079d2 <HAL_TIM_ConfigClockSource+0x17e>
 8007958:	2b50      	cmp	r3, #80	@ 0x50
 800795a:	d873      	bhi.n	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 800795c:	2b40      	cmp	r3, #64	@ 0x40
 800795e:	d058      	beq.n	8007a12 <HAL_TIM_ConfigClockSource+0x1be>
 8007960:	2b40      	cmp	r3, #64	@ 0x40
 8007962:	d86f      	bhi.n	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007964:	2b30      	cmp	r3, #48	@ 0x30
 8007966:	d064      	beq.n	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 8007968:	2b30      	cmp	r3, #48	@ 0x30
 800796a:	d86b      	bhi.n	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 800796c:	2b20      	cmp	r3, #32
 800796e:	d060      	beq.n	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 8007970:	2b20      	cmp	r3, #32
 8007972:	d867      	bhi.n	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
 8007974:	2b00      	cmp	r3, #0
 8007976:	d05c      	beq.n	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 8007978:	2b10      	cmp	r3, #16
 800797a:	d05a      	beq.n	8007a32 <HAL_TIM_ConfigClockSource+0x1de>
 800797c:	e062      	b.n	8007a44 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800798e:	f000 fe8b 	bl	80086a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80079a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	609a      	str	r2, [r3, #8]
      break;
 80079aa:	e04f      	b.n	8007a4c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80079bc:	f000 fe74 	bl	80086a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	689a      	ldr	r2, [r3, #8]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80079ce:	609a      	str	r2, [r3, #8]
      break;
 80079d0:	e03c      	b.n	8007a4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079de:	461a      	mov	r2, r3
 80079e0:	f000 fde6 	bl	80085b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2150      	movs	r1, #80	@ 0x50
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fe3f 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 80079f0:	e02c      	b.n	8007a4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80079fe:	461a      	mov	r2, r3
 8007a00:	f000 fe05 	bl	800860e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2160      	movs	r1, #96	@ 0x60
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fe2f 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 8007a10:	e01c      	b.n	8007a4c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f000 fdc6 	bl	80085b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2140      	movs	r1, #64	@ 0x40
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fe1f 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 8007a30:	e00c      	b.n	8007a4c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681a      	ldr	r2, [r3, #0]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	f000 fe16 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 8007a42:	e003      	b.n	8007a4c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007a44:	2301      	movs	r3, #1
 8007a46:	73fb      	strb	r3, [r7, #15]
      break;
 8007a48:	e000      	b.n	8007a4c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8007a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	00100070 	.word	0x00100070
 8007a6c:	00100060 	.word	0x00100060
 8007a70:	00100050 	.word	0x00100050
 8007a74:	00100040 	.word	0x00100040
 8007a78:	00100030 	.word	0x00100030
 8007a7c:	00100020 	.word	0x00100020

08007a80 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8007a88:	bf00      	nop
 8007a8a:	370c      	adds	r7, #12
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b083      	sub	sp, #12
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr

08007aa8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ab0:	bf00      	nop
 8007ab2:	370c      	adds	r7, #12
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr

08007abc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b083      	sub	sp, #12
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8007ac4:	bf00      	nop
 8007ac6:	370c      	adds	r7, #12
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b083      	sub	sp, #12
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007ad8:	bf00      	nop
 8007ada:	370c      	adds	r7, #12
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr

08007ae4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007ae4:	b480      	push	{r7}
 8007ae6:	b083      	sub	sp, #12
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8007aec:	bf00      	nop
 8007aee:	370c      	adds	r7, #12
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr

08007af8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b083      	sub	sp, #12
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b00:	bf00      	nop
 8007b02:	370c      	adds	r7, #12
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e14a      	b.n	8007de6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	f040 80dd 	bne.w	8007d18 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007b5e:	7afb      	ldrb	r3, [r7, #11]
 8007b60:	2b1f      	cmp	r3, #31
 8007b62:	f200 80d6 	bhi.w	8007d12 <HAL_TIM_RegisterCallback+0x1de>
 8007b66:	a201      	add	r2, pc, #4	@ (adr r2, 8007b6c <HAL_TIM_RegisterCallback+0x38>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007bed 	.word	0x08007bed
 8007b70:	08007bf5 	.word	0x08007bf5
 8007b74:	08007bfd 	.word	0x08007bfd
 8007b78:	08007c05 	.word	0x08007c05
 8007b7c:	08007c0d 	.word	0x08007c0d
 8007b80:	08007c15 	.word	0x08007c15
 8007b84:	08007c1d 	.word	0x08007c1d
 8007b88:	08007c25 	.word	0x08007c25
 8007b8c:	08007c2d 	.word	0x08007c2d
 8007b90:	08007c35 	.word	0x08007c35
 8007b94:	08007c3d 	.word	0x08007c3d
 8007b98:	08007c45 	.word	0x08007c45
 8007b9c:	08007c4d 	.word	0x08007c4d
 8007ba0:	08007c55 	.word	0x08007c55
 8007ba4:	08007c5f 	.word	0x08007c5f
 8007ba8:	08007c69 	.word	0x08007c69
 8007bac:	08007c73 	.word	0x08007c73
 8007bb0:	08007c7d 	.word	0x08007c7d
 8007bb4:	08007c87 	.word	0x08007c87
 8007bb8:	08007c91 	.word	0x08007c91
 8007bbc:	08007c9b 	.word	0x08007c9b
 8007bc0:	08007ca5 	.word	0x08007ca5
 8007bc4:	08007caf 	.word	0x08007caf
 8007bc8:	08007cb9 	.word	0x08007cb9
 8007bcc:	08007cc3 	.word	0x08007cc3
 8007bd0:	08007ccd 	.word	0x08007ccd
 8007bd4:	08007cd7 	.word	0x08007cd7
 8007bd8:	08007ce1 	.word	0x08007ce1
 8007bdc:	08007ceb 	.word	0x08007ceb
 8007be0:	08007cf5 	.word	0x08007cf5
 8007be4:	08007cff 	.word	0x08007cff
 8007be8:	08007d09 	.word	0x08007d09
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007bf2:	e0f7      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007bfa:	e0f3      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007c02:	e0ef      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007c0a:	e0eb      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007c12:	e0e7      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007c1a:	e0e3      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007c22:	e0df      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007c2a:	e0db      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007c32:	e0d7      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007c3a:	e0d3      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007c42:	e0cf      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007c4a:	e0cb      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	687a      	ldr	r2, [r7, #4]
 8007c50:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007c52:	e0c7      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007c5c:	e0c2      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8007c66:	e0bd      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007c70:	e0b8      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8007c7a:	e0b3      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007c84:	e0ae      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007c8e:	e0a9      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007c98:	e0a4      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007ca2:	e09f      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007cac:	e09a      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007cb6:	e095      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007cc0:	e090      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007cca:	e08b      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007cd4:	e086      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007cde:	e081      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007ce8:	e07c      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007cf2:	e077      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007cfc:	e072      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	687a      	ldr	r2, [r7, #4]
 8007d02:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8007d06:	e06d      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007d10:	e068      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	75fb      	strb	r3, [r7, #23]
        break;
 8007d16:	e065      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d15d      	bne.n	8007de0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007d24:	7afb      	ldrb	r3, [r7, #11]
 8007d26:	2b0d      	cmp	r3, #13
 8007d28:	d857      	bhi.n	8007dda <HAL_TIM_RegisterCallback+0x2a6>
 8007d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <HAL_TIM_RegisterCallback+0x1fc>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d69 	.word	0x08007d69
 8007d34:	08007d71 	.word	0x08007d71
 8007d38:	08007d79 	.word	0x08007d79
 8007d3c:	08007d81 	.word	0x08007d81
 8007d40:	08007d89 	.word	0x08007d89
 8007d44:	08007d91 	.word	0x08007d91
 8007d48:	08007d99 	.word	0x08007d99
 8007d4c:	08007da1 	.word	0x08007da1
 8007d50:	08007da9 	.word	0x08007da9
 8007d54:	08007db1 	.word	0x08007db1
 8007d58:	08007db9 	.word	0x08007db9
 8007d5c:	08007dc1 	.word	0x08007dc1
 8007d60:	08007dc9 	.word	0x08007dc9
 8007d64:	08007dd1 	.word	0x08007dd1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007d6e:	e039      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8007d76:	e035      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007d7e:	e031      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8007d86:	e02d      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007d8e:	e029      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8007d96:	e025      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007d9e:	e021      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	687a      	ldr	r2, [r7, #4]
 8007da4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8007da6:	e01d      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007dae:	e019      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8007db6:	e015      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007dbe:	e011      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8007dc6:	e00d      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007dce:	e009      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007dd8:	e004      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007dda:	2301      	movs	r3, #1
 8007ddc:	75fb      	strb	r3, [r7, #23]
        break;
 8007dde:	e001      	b.n	8007de4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007de0:	2301      	movs	r3, #1
 8007de2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	371c      	adds	r7, #28
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop

08007df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b085      	sub	sp, #20
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a4c      	ldr	r2, [pc, #304]	@ (8007f38 <TIM_Base_SetConfig+0x144>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d017      	beq.n	8007e3c <TIM_Base_SetConfig+0x48>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e12:	d013      	beq.n	8007e3c <TIM_Base_SetConfig+0x48>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a49      	ldr	r2, [pc, #292]	@ (8007f3c <TIM_Base_SetConfig+0x148>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d00f      	beq.n	8007e3c <TIM_Base_SetConfig+0x48>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a48      	ldr	r2, [pc, #288]	@ (8007f40 <TIM_Base_SetConfig+0x14c>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d00b      	beq.n	8007e3c <TIM_Base_SetConfig+0x48>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	4a47      	ldr	r2, [pc, #284]	@ (8007f44 <TIM_Base_SetConfig+0x150>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d007      	beq.n	8007e3c <TIM_Base_SetConfig+0x48>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	4a46      	ldr	r2, [pc, #280]	@ (8007f48 <TIM_Base_SetConfig+0x154>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d003      	beq.n	8007e3c <TIM_Base_SetConfig+0x48>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4a45      	ldr	r2, [pc, #276]	@ (8007f4c <TIM_Base_SetConfig+0x158>)
 8007e38:	4293      	cmp	r3, r2
 8007e3a:	d108      	bne.n	8007e4e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a39      	ldr	r2, [pc, #228]	@ (8007f38 <TIM_Base_SetConfig+0x144>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d023      	beq.n	8007e9e <TIM_Base_SetConfig+0xaa>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e5c:	d01f      	beq.n	8007e9e <TIM_Base_SetConfig+0xaa>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a36      	ldr	r2, [pc, #216]	@ (8007f3c <TIM_Base_SetConfig+0x148>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d01b      	beq.n	8007e9e <TIM_Base_SetConfig+0xaa>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a35      	ldr	r2, [pc, #212]	@ (8007f40 <TIM_Base_SetConfig+0x14c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d017      	beq.n	8007e9e <TIM_Base_SetConfig+0xaa>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a34      	ldr	r2, [pc, #208]	@ (8007f44 <TIM_Base_SetConfig+0x150>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d013      	beq.n	8007e9e <TIM_Base_SetConfig+0xaa>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a33      	ldr	r2, [pc, #204]	@ (8007f48 <TIM_Base_SetConfig+0x154>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d00f      	beq.n	8007e9e <TIM_Base_SetConfig+0xaa>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a33      	ldr	r2, [pc, #204]	@ (8007f50 <TIM_Base_SetConfig+0x15c>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d00b      	beq.n	8007e9e <TIM_Base_SetConfig+0xaa>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a32      	ldr	r2, [pc, #200]	@ (8007f54 <TIM_Base_SetConfig+0x160>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d007      	beq.n	8007e9e <TIM_Base_SetConfig+0xaa>
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	4a31      	ldr	r2, [pc, #196]	@ (8007f58 <TIM_Base_SetConfig+0x164>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d003      	beq.n	8007e9e <TIM_Base_SetConfig+0xaa>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a2c      	ldr	r2, [pc, #176]	@ (8007f4c <TIM_Base_SetConfig+0x158>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d108      	bne.n	8007eb0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ea4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	68fa      	ldr	r2, [r7, #12]
 8007eac:	4313      	orrs	r3, r2
 8007eae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	4a18      	ldr	r2, [pc, #96]	@ (8007f38 <TIM_Base_SetConfig+0x144>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d013      	beq.n	8007f04 <TIM_Base_SetConfig+0x110>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	4a1a      	ldr	r2, [pc, #104]	@ (8007f48 <TIM_Base_SetConfig+0x154>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d00f      	beq.n	8007f04 <TIM_Base_SetConfig+0x110>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	4a1a      	ldr	r2, [pc, #104]	@ (8007f50 <TIM_Base_SetConfig+0x15c>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d00b      	beq.n	8007f04 <TIM_Base_SetConfig+0x110>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	4a19      	ldr	r2, [pc, #100]	@ (8007f54 <TIM_Base_SetConfig+0x160>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d007      	beq.n	8007f04 <TIM_Base_SetConfig+0x110>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a18      	ldr	r2, [pc, #96]	@ (8007f58 <TIM_Base_SetConfig+0x164>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d003      	beq.n	8007f04 <TIM_Base_SetConfig+0x110>
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	4a13      	ldr	r2, [pc, #76]	@ (8007f4c <TIM_Base_SetConfig+0x158>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d103      	bne.n	8007f0c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	691a      	ldr	r2, [r3, #16]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2201      	movs	r2, #1
 8007f10:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f003 0301 	and.w	r3, r3, #1
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d105      	bne.n	8007f2a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	f023 0201 	bic.w	r2, r3, #1
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	611a      	str	r2, [r3, #16]
  }
}
 8007f2a:	bf00      	nop
 8007f2c:	3714      	adds	r7, #20
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
 8007f36:	bf00      	nop
 8007f38:	40012c00 	.word	0x40012c00
 8007f3c:	40000400 	.word	0x40000400
 8007f40:	40000800 	.word	0x40000800
 8007f44:	40000c00 	.word	0x40000c00
 8007f48:	40013400 	.word	0x40013400
 8007f4c:	40015000 	.word	0x40015000
 8007f50:	40014000 	.word	0x40014000
 8007f54:	40014400 	.word	0x40014400
 8007f58:	40014800 	.word	0x40014800

08007f5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b087      	sub	sp, #28
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6a1b      	ldr	r3, [r3, #32]
 8007f70:	f023 0201 	bic.w	r2, r3, #1
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	699b      	ldr	r3, [r3, #24]
 8007f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0303 	bic.w	r3, r3, #3
 8007f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f023 0302 	bic.w	r3, r3, #2
 8007fa8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	697a      	ldr	r2, [r7, #20]
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a30      	ldr	r2, [pc, #192]	@ (8008078 <TIM_OC1_SetConfig+0x11c>)
 8007fb8:	4293      	cmp	r3, r2
 8007fba:	d013      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x88>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800807c <TIM_OC1_SetConfig+0x120>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d00f      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x88>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a2e      	ldr	r2, [pc, #184]	@ (8008080 <TIM_OC1_SetConfig+0x124>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d00b      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x88>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a2d      	ldr	r2, [pc, #180]	@ (8008084 <TIM_OC1_SetConfig+0x128>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d007      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x88>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a2c      	ldr	r2, [pc, #176]	@ (8008088 <TIM_OC1_SetConfig+0x12c>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d003      	beq.n	8007fe4 <TIM_OC1_SetConfig+0x88>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a2b      	ldr	r2, [pc, #172]	@ (800808c <TIM_OC1_SetConfig+0x130>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d10c      	bne.n	8007ffe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	f023 0308 	bic.w	r3, r3, #8
 8007fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	697a      	ldr	r2, [r7, #20]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	f023 0304 	bic.w	r3, r3, #4
 8007ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a1d      	ldr	r2, [pc, #116]	@ (8008078 <TIM_OC1_SetConfig+0x11c>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d013      	beq.n	800802e <TIM_OC1_SetConfig+0xd2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a1c      	ldr	r2, [pc, #112]	@ (800807c <TIM_OC1_SetConfig+0x120>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d00f      	beq.n	800802e <TIM_OC1_SetConfig+0xd2>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a1b      	ldr	r2, [pc, #108]	@ (8008080 <TIM_OC1_SetConfig+0x124>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d00b      	beq.n	800802e <TIM_OC1_SetConfig+0xd2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a1a      	ldr	r2, [pc, #104]	@ (8008084 <TIM_OC1_SetConfig+0x128>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d007      	beq.n	800802e <TIM_OC1_SetConfig+0xd2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a19      	ldr	r2, [pc, #100]	@ (8008088 <TIM_OC1_SetConfig+0x12c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d003      	beq.n	800802e <TIM_OC1_SetConfig+0xd2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a18      	ldr	r2, [pc, #96]	@ (800808c <TIM_OC1_SetConfig+0x130>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d111      	bne.n	8008052 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008034:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800803c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	695b      	ldr	r3, [r3, #20]
 8008042:	693a      	ldr	r2, [r7, #16]
 8008044:	4313      	orrs	r3, r2
 8008046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	699b      	ldr	r3, [r3, #24]
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	685a      	ldr	r2, [r3, #4]
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	621a      	str	r2, [r3, #32]
}
 800806c:	bf00      	nop
 800806e:	371c      	adds	r7, #28
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr
 8008078:	40012c00 	.word	0x40012c00
 800807c:	40013400 	.word	0x40013400
 8008080:	40014000 	.word	0x40014000
 8008084:	40014400 	.word	0x40014400
 8008088:	40014800 	.word	0x40014800
 800808c:	40015000 	.word	0x40015000

08008090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008090:	b480      	push	{r7}
 8008092:	b087      	sub	sp, #28
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	f023 0210 	bic.w	r2, r3, #16
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f023 0320 	bic.w	r3, r3, #32
 80080de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a2c      	ldr	r2, [pc, #176]	@ (80081a0 <TIM_OC2_SetConfig+0x110>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d007      	beq.n	8008104 <TIM_OC2_SetConfig+0x74>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a2b      	ldr	r2, [pc, #172]	@ (80081a4 <TIM_OC2_SetConfig+0x114>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d003      	beq.n	8008104 <TIM_OC2_SetConfig+0x74>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	4a2a      	ldr	r2, [pc, #168]	@ (80081a8 <TIM_OC2_SetConfig+0x118>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d10d      	bne.n	8008120 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800810a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	011b      	lsls	r3, r3, #4
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800811e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a1f      	ldr	r2, [pc, #124]	@ (80081a0 <TIM_OC2_SetConfig+0x110>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d013      	beq.n	8008150 <TIM_OC2_SetConfig+0xc0>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a1e      	ldr	r2, [pc, #120]	@ (80081a4 <TIM_OC2_SetConfig+0x114>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d00f      	beq.n	8008150 <TIM_OC2_SetConfig+0xc0>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a1e      	ldr	r2, [pc, #120]	@ (80081ac <TIM_OC2_SetConfig+0x11c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d00b      	beq.n	8008150 <TIM_OC2_SetConfig+0xc0>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a1d      	ldr	r2, [pc, #116]	@ (80081b0 <TIM_OC2_SetConfig+0x120>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d007      	beq.n	8008150 <TIM_OC2_SetConfig+0xc0>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a1c      	ldr	r2, [pc, #112]	@ (80081b4 <TIM_OC2_SetConfig+0x124>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d003      	beq.n	8008150 <TIM_OC2_SetConfig+0xc0>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a17      	ldr	r2, [pc, #92]	@ (80081a8 <TIM_OC2_SetConfig+0x118>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d113      	bne.n	8008178 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008156:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800815e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	695b      	ldr	r3, [r3, #20]
 8008164:	009b      	lsls	r3, r3, #2
 8008166:	693a      	ldr	r2, [r7, #16]
 8008168:	4313      	orrs	r3, r2
 800816a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	699b      	ldr	r3, [r3, #24]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	4313      	orrs	r3, r2
 8008176:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	693a      	ldr	r2, [r7, #16]
 800817c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68fa      	ldr	r2, [r7, #12]
 8008182:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008184:	683b      	ldr	r3, [r7, #0]
 8008186:	685a      	ldr	r2, [r3, #4]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	621a      	str	r2, [r3, #32]
}
 8008192:	bf00      	nop
 8008194:	371c      	adds	r7, #28
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr
 800819e:	bf00      	nop
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40013400 	.word	0x40013400
 80081a8:	40015000 	.word	0x40015000
 80081ac:	40014000 	.word	0x40014000
 80081b0:	40014400 	.word	0x40014400
 80081b4:	40014800 	.word	0x40014800

080081b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69db      	ldr	r3, [r3, #28]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68fa      	ldr	r2, [r7, #12]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008204:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4a2b      	ldr	r2, [pc, #172]	@ (80082c4 <TIM_OC3_SetConfig+0x10c>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d007      	beq.n	800822a <TIM_OC3_SetConfig+0x72>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a2a      	ldr	r2, [pc, #168]	@ (80082c8 <TIM_OC3_SetConfig+0x110>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d003      	beq.n	800822a <TIM_OC3_SetConfig+0x72>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a29      	ldr	r2, [pc, #164]	@ (80082cc <TIM_OC3_SetConfig+0x114>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d10d      	bne.n	8008246 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	021b      	lsls	r3, r3, #8
 8008238:	697a      	ldr	r2, [r7, #20]
 800823a:	4313      	orrs	r3, r2
 800823c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a1e      	ldr	r2, [pc, #120]	@ (80082c4 <TIM_OC3_SetConfig+0x10c>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d013      	beq.n	8008276 <TIM_OC3_SetConfig+0xbe>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a1d      	ldr	r2, [pc, #116]	@ (80082c8 <TIM_OC3_SetConfig+0x110>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d00f      	beq.n	8008276 <TIM_OC3_SetConfig+0xbe>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a1d      	ldr	r2, [pc, #116]	@ (80082d0 <TIM_OC3_SetConfig+0x118>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00b      	beq.n	8008276 <TIM_OC3_SetConfig+0xbe>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a1c      	ldr	r2, [pc, #112]	@ (80082d4 <TIM_OC3_SetConfig+0x11c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d007      	beq.n	8008276 <TIM_OC3_SetConfig+0xbe>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a1b      	ldr	r2, [pc, #108]	@ (80082d8 <TIM_OC3_SetConfig+0x120>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d003      	beq.n	8008276 <TIM_OC3_SetConfig+0xbe>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a16      	ldr	r2, [pc, #88]	@ (80082cc <TIM_OC3_SetConfig+0x114>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d113      	bne.n	800829e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800827c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800827e:	693b      	ldr	r3, [r7, #16]
 8008280:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	011b      	lsls	r3, r3, #4
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	4313      	orrs	r3, r2
 8008290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	011b      	lsls	r3, r3, #4
 8008298:	693a      	ldr	r2, [r7, #16]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	693a      	ldr	r2, [r7, #16]
 80082a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	68fa      	ldr	r2, [r7, #12]
 80082a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	685a      	ldr	r2, [r3, #4]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	621a      	str	r2, [r3, #32]
}
 80082b8:	bf00      	nop
 80082ba:	371c      	adds	r7, #28
 80082bc:	46bd      	mov	sp, r7
 80082be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c2:	4770      	bx	lr
 80082c4:	40012c00 	.word	0x40012c00
 80082c8:	40013400 	.word	0x40013400
 80082cc:	40015000 	.word	0x40015000
 80082d0:	40014000 	.word	0x40014000
 80082d4:	40014400 	.word	0x40014400
 80082d8:	40014800 	.word	0x40014800

080082dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082dc:	b480      	push	{r7}
 80082de:	b087      	sub	sp, #28
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a1b      	ldr	r3, [r3, #32]
 80082f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	69db      	ldr	r3, [r3, #28]
 8008302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800830a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800830e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	68fa      	ldr	r2, [r7, #12]
 8008320:	4313      	orrs	r3, r2
 8008322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800832a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	031b      	lsls	r3, r3, #12
 8008332:	697a      	ldr	r2, [r7, #20]
 8008334:	4313      	orrs	r3, r2
 8008336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	4a2c      	ldr	r2, [pc, #176]	@ (80083ec <TIM_OC4_SetConfig+0x110>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d007      	beq.n	8008350 <TIM_OC4_SetConfig+0x74>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	4a2b      	ldr	r2, [pc, #172]	@ (80083f0 <TIM_OC4_SetConfig+0x114>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d003      	beq.n	8008350 <TIM_OC4_SetConfig+0x74>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	4a2a      	ldr	r2, [pc, #168]	@ (80083f4 <TIM_OC4_SetConfig+0x118>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d10d      	bne.n	800836c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008356:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	031b      	lsls	r3, r3, #12
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	4313      	orrs	r3, r2
 8008362:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800836a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a1f      	ldr	r2, [pc, #124]	@ (80083ec <TIM_OC4_SetConfig+0x110>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d013      	beq.n	800839c <TIM_OC4_SetConfig+0xc0>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a1e      	ldr	r2, [pc, #120]	@ (80083f0 <TIM_OC4_SetConfig+0x114>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d00f      	beq.n	800839c <TIM_OC4_SetConfig+0xc0>
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	4a1e      	ldr	r2, [pc, #120]	@ (80083f8 <TIM_OC4_SetConfig+0x11c>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d00b      	beq.n	800839c <TIM_OC4_SetConfig+0xc0>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	4a1d      	ldr	r2, [pc, #116]	@ (80083fc <TIM_OC4_SetConfig+0x120>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d007      	beq.n	800839c <TIM_OC4_SetConfig+0xc0>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	4a1c      	ldr	r2, [pc, #112]	@ (8008400 <TIM_OC4_SetConfig+0x124>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d003      	beq.n	800839c <TIM_OC4_SetConfig+0xc0>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	4a17      	ldr	r2, [pc, #92]	@ (80083f4 <TIM_OC4_SetConfig+0x118>)
 8008398:	4293      	cmp	r3, r2
 800839a:	d113      	bne.n	80083c4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80083a2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083aa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	019b      	lsls	r3, r3, #6
 80083b2:	693a      	ldr	r2, [r7, #16]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	019b      	lsls	r3, r3, #6
 80083be:	693a      	ldr	r2, [r7, #16]
 80083c0:	4313      	orrs	r3, r2
 80083c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	693a      	ldr	r2, [r7, #16]
 80083c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685a      	ldr	r2, [r3, #4]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	697a      	ldr	r2, [r7, #20]
 80083dc:	621a      	str	r2, [r3, #32]
}
 80083de:	bf00      	nop
 80083e0:	371c      	adds	r7, #28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e8:	4770      	bx	lr
 80083ea:	bf00      	nop
 80083ec:	40012c00 	.word	0x40012c00
 80083f0:	40013400 	.word	0x40013400
 80083f4:	40015000 	.word	0x40015000
 80083f8:	40014000 	.word	0x40014000
 80083fc:	40014400 	.word	0x40014400
 8008400:	40014800 	.word	0x40014800

08008404 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008404:	b480      	push	{r7}
 8008406:	b087      	sub	sp, #28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	6a1b      	ldr	r3, [r3, #32]
 8008418:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	685b      	ldr	r3, [r3, #4]
 8008424:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800842a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008436:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008448:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	689b      	ldr	r3, [r3, #8]
 800844e:	041b      	lsls	r3, r3, #16
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	4313      	orrs	r3, r2
 8008454:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	4a19      	ldr	r2, [pc, #100]	@ (80084c0 <TIM_OC5_SetConfig+0xbc>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d013      	beq.n	8008486 <TIM_OC5_SetConfig+0x82>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	4a18      	ldr	r2, [pc, #96]	@ (80084c4 <TIM_OC5_SetConfig+0xc0>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00f      	beq.n	8008486 <TIM_OC5_SetConfig+0x82>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	4a17      	ldr	r2, [pc, #92]	@ (80084c8 <TIM_OC5_SetConfig+0xc4>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00b      	beq.n	8008486 <TIM_OC5_SetConfig+0x82>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	4a16      	ldr	r2, [pc, #88]	@ (80084cc <TIM_OC5_SetConfig+0xc8>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d007      	beq.n	8008486 <TIM_OC5_SetConfig+0x82>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	4a15      	ldr	r2, [pc, #84]	@ (80084d0 <TIM_OC5_SetConfig+0xcc>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d003      	beq.n	8008486 <TIM_OC5_SetConfig+0x82>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	4a14      	ldr	r2, [pc, #80]	@ (80084d4 <TIM_OC5_SetConfig+0xd0>)
 8008482:	4293      	cmp	r3, r2
 8008484:	d109      	bne.n	800849a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800848c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	021b      	lsls	r3, r3, #8
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	697a      	ldr	r2, [r7, #20]
 800849e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	693a      	ldr	r2, [r7, #16]
 80084b2:	621a      	str	r2, [r3, #32]
}
 80084b4:	bf00      	nop
 80084b6:	371c      	adds	r7, #28
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr
 80084c0:	40012c00 	.word	0x40012c00
 80084c4:	40013400 	.word	0x40013400
 80084c8:	40014000 	.word	0x40014000
 80084cc:	40014400 	.word	0x40014400
 80084d0:	40014800 	.word	0x40014800
 80084d4:	40015000 	.word	0x40015000

080084d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6a1b      	ldr	r3, [r3, #32]
 80084e6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800850a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	021b      	lsls	r3, r3, #8
 8008512:	68fa      	ldr	r2, [r7, #12]
 8008514:	4313      	orrs	r3, r2
 8008516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800851e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	051b      	lsls	r3, r3, #20
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	4313      	orrs	r3, r2
 800852a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	4a1a      	ldr	r2, [pc, #104]	@ (8008598 <TIM_OC6_SetConfig+0xc0>)
 8008530:	4293      	cmp	r3, r2
 8008532:	d013      	beq.n	800855c <TIM_OC6_SetConfig+0x84>
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	4a19      	ldr	r2, [pc, #100]	@ (800859c <TIM_OC6_SetConfig+0xc4>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d00f      	beq.n	800855c <TIM_OC6_SetConfig+0x84>
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	4a18      	ldr	r2, [pc, #96]	@ (80085a0 <TIM_OC6_SetConfig+0xc8>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d00b      	beq.n	800855c <TIM_OC6_SetConfig+0x84>
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	4a17      	ldr	r2, [pc, #92]	@ (80085a4 <TIM_OC6_SetConfig+0xcc>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d007      	beq.n	800855c <TIM_OC6_SetConfig+0x84>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	4a16      	ldr	r2, [pc, #88]	@ (80085a8 <TIM_OC6_SetConfig+0xd0>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d003      	beq.n	800855c <TIM_OC6_SetConfig+0x84>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a15      	ldr	r2, [pc, #84]	@ (80085ac <TIM_OC6_SetConfig+0xd4>)
 8008558:	4293      	cmp	r3, r2
 800855a:	d109      	bne.n	8008570 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800855c:	697b      	ldr	r3, [r7, #20]
 800855e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008562:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	695b      	ldr	r3, [r3, #20]
 8008568:	029b      	lsls	r3, r3, #10
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	4313      	orrs	r3, r2
 800856e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	697a      	ldr	r2, [r7, #20]
 8008574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	621a      	str	r2, [r3, #32]
}
 800858a:	bf00      	nop
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	40012c00 	.word	0x40012c00
 800859c:	40013400 	.word	0x40013400
 80085a0:	40014000 	.word	0x40014000
 80085a4:	40014400 	.word	0x40014400
 80085a8:	40014800 	.word	0x40014800
 80085ac:	40015000 	.word	0x40015000

080085b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b087      	sub	sp, #28
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6a1b      	ldr	r3, [r3, #32]
 80085c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6a1b      	ldr	r3, [r3, #32]
 80085c6:	f023 0201 	bic.w	r2, r3, #1
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	011b      	lsls	r3, r3, #4
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	4313      	orrs	r3, r2
 80085e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f023 030a 	bic.w	r3, r3, #10
 80085ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ee:	697a      	ldr	r2, [r7, #20]
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4313      	orrs	r3, r2
 80085f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	693a      	ldr	r2, [r7, #16]
 80085fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	697a      	ldr	r2, [r7, #20]
 8008600:	621a      	str	r2, [r3, #32]
}
 8008602:	bf00      	nop
 8008604:	371c      	adds	r7, #28
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800860e:	b480      	push	{r7}
 8008610:	b087      	sub	sp, #28
 8008612:	af00      	add	r7, sp, #0
 8008614:	60f8      	str	r0, [r7, #12]
 8008616:	60b9      	str	r1, [r7, #8]
 8008618:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6a1b      	ldr	r3, [r3, #32]
 800861e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	f023 0210 	bic.w	r2, r3, #16
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	031b      	lsls	r3, r3, #12
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	4313      	orrs	r3, r2
 8008642:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008644:	697b      	ldr	r3, [r7, #20]
 8008646:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800864a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	011b      	lsls	r3, r3, #4
 8008650:	697a      	ldr	r2, [r7, #20]
 8008652:	4313      	orrs	r3, r2
 8008654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	697a      	ldr	r2, [r7, #20]
 8008660:	621a      	str	r2, [r3, #32]
}
 8008662:	bf00      	nop
 8008664:	371c      	adds	r7, #28
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr

0800866e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800866e:	b480      	push	{r7}
 8008670:	b085      	sub	sp, #20
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008684:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008688:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800868a:	683a      	ldr	r2, [r7, #0]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	4313      	orrs	r3, r2
 8008690:	f043 0307 	orr.w	r3, r3, #7
 8008694:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	609a      	str	r2, [r3, #8]
}
 800869c:	bf00      	nop
 800869e:	3714      	adds	r7, #20
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b087      	sub	sp, #28
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	60b9      	str	r1, [r7, #8]
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	021a      	lsls	r2, r3, #8
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	431a      	orrs	r2, r3
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	697a      	ldr	r2, [r7, #20]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	697a      	ldr	r2, [r7, #20]
 80086da:	609a      	str	r2, [r3, #8]
}
 80086dc:	bf00      	nop
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b087      	sub	sp, #28
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	f003 031f 	and.w	r3, r3, #31
 80086fa:	2201      	movs	r2, #1
 80086fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008700:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6a1a      	ldr	r2, [r3, #32]
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	43db      	mvns	r3, r3
 800870a:	401a      	ands	r2, r3
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	6a1a      	ldr	r2, [r3, #32]
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f003 031f 	and.w	r3, r3, #31
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	fa01 f303 	lsl.w	r3, r1, r3
 8008720:	431a      	orrs	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	621a      	str	r2, [r3, #32]
}
 8008726:	bf00      	nop
 8008728:	371c      	adds	r7, #28
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
	...

08008734 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	4a26      	ldr	r2, [pc, #152]	@ (80087d8 <TIM_ResetCallback+0xa4>)
 8008740:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4a25      	ldr	r2, [pc, #148]	@ (80087dc <TIM_ResetCallback+0xa8>)
 8008748:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	4a24      	ldr	r2, [pc, #144]	@ (80087e0 <TIM_ResetCallback+0xac>)
 8008750:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	4a23      	ldr	r2, [pc, #140]	@ (80087e4 <TIM_ResetCallback+0xb0>)
 8008758:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	4a22      	ldr	r2, [pc, #136]	@ (80087e8 <TIM_ResetCallback+0xb4>)
 8008760:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	4a21      	ldr	r2, [pc, #132]	@ (80087ec <TIM_ResetCallback+0xb8>)
 8008768:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a20      	ldr	r2, [pc, #128]	@ (80087f0 <TIM_ResetCallback+0xbc>)
 8008770:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	4a1f      	ldr	r2, [pc, #124]	@ (80087f4 <TIM_ResetCallback+0xc0>)
 8008778:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a1e      	ldr	r2, [pc, #120]	@ (80087f8 <TIM_ResetCallback+0xc4>)
 8008780:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a1d      	ldr	r2, [pc, #116]	@ (80087fc <TIM_ResetCallback+0xc8>)
 8008788:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a1c      	ldr	r2, [pc, #112]	@ (8008800 <TIM_ResetCallback+0xcc>)
 8008790:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a1b      	ldr	r2, [pc, #108]	@ (8008804 <TIM_ResetCallback+0xd0>)
 8008798:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	4a1a      	ldr	r2, [pc, #104]	@ (8008808 <TIM_ResetCallback+0xd4>)
 80087a0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a19      	ldr	r2, [pc, #100]	@ (800880c <TIM_ResetCallback+0xd8>)
 80087a8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a18      	ldr	r2, [pc, #96]	@ (8008810 <TIM_ResetCallback+0xdc>)
 80087b0:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a17      	ldr	r2, [pc, #92]	@ (8008814 <TIM_ResetCallback+0xe0>)
 80087b8:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a16      	ldr	r2, [pc, #88]	@ (8008818 <TIM_ResetCallback+0xe4>)
 80087c0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a15      	ldr	r2, [pc, #84]	@ (800881c <TIM_ResetCallback+0xe8>)
 80087c8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr
 80087d8:	08001b4d 	.word	0x08001b4d
 80087dc:	08007a81 	.word	0x08007a81
 80087e0:	08007af9 	.word	0x08007af9
 80087e4:	08007b0d 	.word	0x08007b0d
 80087e8:	08007aa9 	.word	0x08007aa9
 80087ec:	08007abd 	.word	0x08007abd
 80087f0:	08007a95 	.word	0x08007a95
 80087f4:	08007ad1 	.word	0x08007ad1
 80087f8:	08007ae5 	.word	0x08007ae5
 80087fc:	08007b21 	.word	0x08007b21
 8008800:	08008a75 	.word	0x08008a75
 8008804:	08008a89 	.word	0x08008a89
 8008808:	08008a9d 	.word	0x08008a9d
 800880c:	08008ab1 	.word	0x08008ab1
 8008810:	08008ac5 	.word	0x08008ac5
 8008814:	08008ad9 	.word	0x08008ad9
 8008818:	08008aed 	.word	0x08008aed
 800881c:	08008b01 	.word	0x08008b01

08008820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008834:	2302      	movs	r3, #2
 8008836:	e074      	b.n	8008922 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	4a34      	ldr	r2, [pc, #208]	@ (8008930 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d009      	beq.n	8008876 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4a33      	ldr	r2, [pc, #204]	@ (8008934 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d004      	beq.n	8008876 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a31      	ldr	r2, [pc, #196]	@ (8008938 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d108      	bne.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800887c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4313      	orrs	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800888e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4313      	orrs	r3, r2
 800889c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68fa      	ldr	r2, [r7, #12]
 80088a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a21      	ldr	r2, [pc, #132]	@ (8008930 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d022      	beq.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088b8:	d01d      	beq.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	4a1f      	ldr	r2, [pc, #124]	@ (800893c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d018      	beq.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a1d      	ldr	r2, [pc, #116]	@ (8008940 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d013      	beq.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a1c      	ldr	r2, [pc, #112]	@ (8008944 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d00e      	beq.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a15      	ldr	r2, [pc, #84]	@ (8008934 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d009      	beq.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a18      	ldr	r2, [pc, #96]	@ (8008948 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d004      	beq.n	80088f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a11      	ldr	r2, [pc, #68]	@ (8008938 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d10c      	bne.n	8008910 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80088fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	4313      	orrs	r3, r2
 8008906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	40012c00 	.word	0x40012c00
 8008934:	40013400 	.word	0x40013400
 8008938:	40015000 	.word	0x40015000
 800893c:	40000400 	.word	0x40000400
 8008940:	40000800 	.word	0x40000800
 8008944:	40000c00 	.word	0x40000c00
 8008948:	40014000 	.word	0x40014000

0800894c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008956:	2300      	movs	r3, #0
 8008958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008960:	2b01      	cmp	r3, #1
 8008962:	d101      	bne.n	8008968 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008964:	2302      	movs	r3, #2
 8008966:	e078      	b.n	8008a5a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	68db      	ldr	r3, [r3, #12]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	4313      	orrs	r3, r2
 800898a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	4313      	orrs	r3, r2
 8008998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	691b      	ldr	r3, [r3, #16]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	695b      	ldr	r3, [r3, #20]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ce:	4313      	orrs	r3, r2
 80089d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	699b      	ldr	r3, [r3, #24]
 80089dc:	041b      	lsls	r3, r3, #16
 80089de:	4313      	orrs	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	69db      	ldr	r3, [r3, #28]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008a68 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d009      	beq.n	8008a0e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a1b      	ldr	r2, [pc, #108]	@ (8008a6c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d004      	beq.n	8008a0e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a19      	ldr	r2, [pc, #100]	@ (8008a70 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d11c      	bne.n	8008a48 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a18:	051b      	lsls	r3, r3, #20
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a36:	4313      	orrs	r3, r2
 8008a38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a44:	4313      	orrs	r3, r2
 8008a46:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	40012c00 	.word	0x40012c00
 8008a6c:	40013400 	.word	0x40013400
 8008a70:	40015000 	.word	0x40015000

08008a74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008a7c:	bf00      	nop
 8008a7e:	370c      	adds	r7, #12
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr

08008a88 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008a90:	bf00      	nop
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b083      	sub	sp, #12
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e050      	b.n	8008bc8 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d114      	bne.n	8008b5a <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f000 fd45 	bl	80095c8 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d103      	bne.n	8008b50 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a21      	ldr	r2, [pc, #132]	@ (8008bd0 <HAL_UART_Init+0xbc>)
 8008b4c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2224      	movs	r2, #36	@ 0x24
 8008b5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f022 0201 	bic.w	r2, r2, #1
 8008b70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f001 f872 	bl	8009c64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fd73 	bl	800966c <UART_SetConfig>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d101      	bne.n	8008b90 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e01b      	b.n	8008bc8 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008b9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	689a      	ldr	r2, [r3, #8]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008bae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	f042 0201 	orr.w	r2, r2, #1
 8008bbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f001 f8f1 	bl	8009da8 <UART_CheckIdleState>
 8008bc6:	4603      	mov	r3, r0
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	08002c69 	.word	0x08002c69

08008bd4 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b087      	sub	sp, #28
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d109      	bne.n	8008c00 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008bf2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e09c      	b.n	8008d3a <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c06:	2b20      	cmp	r3, #32
 8008c08:	d16c      	bne.n	8008ce4 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8008c0a:	7afb      	ldrb	r3, [r7, #11]
 8008c0c:	2b0c      	cmp	r3, #12
 8008c0e:	d85e      	bhi.n	8008cce <HAL_UART_RegisterCallback+0xfa>
 8008c10:	a201      	add	r2, pc, #4	@ (adr r2, 8008c18 <HAL_UART_RegisterCallback+0x44>)
 8008c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c16:	bf00      	nop
 8008c18:	08008c4d 	.word	0x08008c4d
 8008c1c:	08008c57 	.word	0x08008c57
 8008c20:	08008c61 	.word	0x08008c61
 8008c24:	08008c6b 	.word	0x08008c6b
 8008c28:	08008c75 	.word	0x08008c75
 8008c2c:	08008c7f 	.word	0x08008c7f
 8008c30:	08008c89 	.word	0x08008c89
 8008c34:	08008c93 	.word	0x08008c93
 8008c38:	08008c9d 	.word	0x08008c9d
 8008c3c:	08008ca7 	.word	0x08008ca7
 8008c40:	08008cb1 	.word	0x08008cb1
 8008c44:	08008cbb 	.word	0x08008cbb
 8008c48:	08008cc5 	.word	0x08008cc5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008c54:	e070      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	687a      	ldr	r2, [r7, #4]
 8008c5a:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008c5e:	e06b      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	687a      	ldr	r2, [r7, #4]
 8008c64:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8008c68:	e066      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008c72:	e061      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008c7c:	e05c      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8008c86:	e057      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008c90:	e052      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8008c9a:	e04d      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008ca4:	e048      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008cae:	e043      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8008cb8:	e03e      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008cc2:	e039      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008ccc:	e034      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cd4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008cde:	2301      	movs	r3, #1
 8008ce0:	75fb      	strb	r3, [r7, #23]
        break;
 8008ce2:	e029      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d11a      	bne.n	8008d24 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008cee:	7afb      	ldrb	r3, [r7, #11]
 8008cf0:	2b0b      	cmp	r3, #11
 8008cf2:	d002      	beq.n	8008cfa <HAL_UART_RegisterCallback+0x126>
 8008cf4:	2b0c      	cmp	r3, #12
 8008cf6:	d005      	beq.n	8008d04 <HAL_UART_RegisterCallback+0x130>
 8008cf8:	e009      	b.n	8008d0e <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008d02:	e019      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008d0c:	e014      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d14:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	75fb      	strb	r3, [r7, #23]
        break;
 8008d22:	e009      	b.n	8008d38 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d2a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop

08008d48 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b08a      	sub	sp, #40	@ 0x28
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	60b9      	str	r1, [r7, #8]
 8008d52:	4613      	mov	r3, r2
 8008d54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d5c:	2b20      	cmp	r3, #32
 8008d5e:	d137      	bne.n	8008dd0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <HAL_UART_Receive_DMA+0x24>
 8008d66:	88fb      	ldrh	r3, [r7, #6]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d101      	bne.n	8008d70 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e030      	b.n	8008dd2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	2200      	movs	r2, #0
 8008d74:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a18      	ldr	r2, [pc, #96]	@ (8008ddc <HAL_UART_Receive_DMA+0x94>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d01f      	beq.n	8008dc0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d018      	beq.n	8008dc0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	613b      	str	r3, [r7, #16]
   return(result);
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008da2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dac:	623b      	str	r3, [r7, #32]
 8008dae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	69f9      	ldr	r1, [r7, #28]
 8008db2:	6a3a      	ldr	r2, [r7, #32]
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008dba:	69bb      	ldr	r3, [r7, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e6      	bne.n	8008d8e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008dc0:	88fb      	ldrh	r3, [r7, #6]
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	68b9      	ldr	r1, [r7, #8]
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f001 f906 	bl	8009fd8 <UART_Start_Receive_DMA>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	e000      	b.n	8008dd2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008dd0:	2302      	movs	r3, #2
  }
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3728      	adds	r7, #40	@ 0x28
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	40008000 	.word	0x40008000

08008de0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b0ba      	sub	sp, #232	@ 0xe8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	69db      	ldr	r3, [r3, #28]
 8008dee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008e06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008e0a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008e0e:	4013      	ands	r3, r2
 8008e10:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008e14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d11b      	bne.n	8008e54 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008e1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e20:	f003 0320 	and.w	r3, r3, #32
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d015      	beq.n	8008e54 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e2c:	f003 0320 	and.w	r3, r3, #32
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d105      	bne.n	8008e40 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d009      	beq.n	8008e54 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 82f3 	beq.w	8009430 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	4798      	blx	r3
      }
      return;
 8008e52:	e2ed      	b.n	8009430 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008e54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 8129 	beq.w	80090b0 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008e5e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008e62:	4b90      	ldr	r3, [pc, #576]	@ (80090a4 <HAL_UART_IRQHandler+0x2c4>)
 8008e64:	4013      	ands	r3, r2
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d106      	bne.n	8008e78 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008e6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008e6e:	4b8e      	ldr	r3, [pc, #568]	@ (80090a8 <HAL_UART_IRQHandler+0x2c8>)
 8008e70:	4013      	ands	r3, r2
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f000 811c 	beq.w	80090b0 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e7c:	f003 0301 	and.w	r3, r3, #1
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d011      	beq.n	8008ea8 <HAL_UART_IRQHandler+0xc8>
 8008e84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2201      	movs	r2, #1
 8008e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e9e:	f043 0201 	orr.w	r2, r3, #1
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d011      	beq.n	8008ed8 <HAL_UART_IRQHandler+0xf8>
 8008eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008eb8:	f003 0301 	and.w	r3, r3, #1
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2202      	movs	r2, #2
 8008ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ece:	f043 0204 	orr.w	r2, r3, #4
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008edc:	f003 0304 	and.w	r3, r3, #4
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d011      	beq.n	8008f08 <HAL_UART_IRQHandler+0x128>
 8008ee4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ee8:	f003 0301 	and.w	r3, r3, #1
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d00b      	beq.n	8008f08 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2204      	movs	r2, #4
 8008ef6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008efe:	f043 0202 	orr.w	r2, r3, #2
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f0c:	f003 0308 	and.w	r3, r3, #8
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d017      	beq.n	8008f44 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f18:	f003 0320 	and.w	r3, r3, #32
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d105      	bne.n	8008f2c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008f20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008f24:	4b5f      	ldr	r3, [pc, #380]	@ (80090a4 <HAL_UART_IRQHandler+0x2c4>)
 8008f26:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2208      	movs	r2, #8
 8008f32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f3a:	f043 0208 	orr.w	r2, r3, #8
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008f44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d012      	beq.n	8008f76 <HAL_UART_IRQHandler+0x196>
 8008f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f54:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d00c      	beq.n	8008f76 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008f64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f6c:	f043 0220 	orr.w	r2, r3, #32
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 8259 	beq.w	8009434 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f86:	f003 0320 	and.w	r3, r3, #32
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d013      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f92:	f003 0320 	and.w	r3, r3, #32
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d105      	bne.n	8008fa6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d007      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d003      	beq.n	8008fb6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008fbc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	689b      	ldr	r3, [r3, #8]
 8008fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fca:	2b40      	cmp	r3, #64	@ 0x40
 8008fcc:	d005      	beq.n	8008fda <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008fd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d058      	beq.n	800908c <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f001 f8e3 	bl	800a1a6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fea:	2b40      	cmp	r3, #64	@ 0x40
 8008fec:	d148      	bne.n	8009080 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3308      	adds	r3, #8
 8008ff4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008ffc:	e853 3f00 	ldrex	r3, [r3]
 8009000:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009004:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800900c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3308      	adds	r3, #8
 8009016:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800901a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800901e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009022:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009026:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009032:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d1d9      	bne.n	8008fee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009040:	2b00      	cmp	r3, #0
 8009042:	d017      	beq.n	8009074 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800904a:	4a18      	ldr	r2, [pc, #96]	@ (80090ac <HAL_UART_IRQHandler+0x2cc>)
 800904c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009054:	4618      	mov	r0, r3
 8009056:	f7fc f8bb 	bl	80051d0 <HAL_DMA_Abort_IT>
 800905a:	4603      	mov	r3, r0
 800905c:	2b00      	cmp	r3, #0
 800905e:	d01f      	beq.n	80090a0 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800906e:	4610      	mov	r0, r2
 8009070:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009072:	e015      	b.n	80090a0 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800907e:	e00f      	b.n	80090a0 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009086:	6878      	ldr	r0, [r7, #4]
 8009088:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800908a:	e009      	b.n	80090a0 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800909e:	e1c9      	b.n	8009434 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090a0:	bf00      	nop
    return;
 80090a2:	e1c7      	b.n	8009434 <HAL_UART_IRQHandler+0x654>
 80090a4:	10000001 	.word	0x10000001
 80090a8:	04000120 	.word	0x04000120
 80090ac:	0800a471 	.word	0x0800a471

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	f040 8157 	bne.w	8009368 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80090ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80090be:	f003 0310 	and.w	r3, r3, #16
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	f000 8150 	beq.w	8009368 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80090c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80090cc:	f003 0310 	and.w	r3, r3, #16
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f000 8149 	beq.w	8009368 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2210      	movs	r2, #16
 80090dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090e8:	2b40      	cmp	r3, #64	@ 0x40
 80090ea:	f040 80bd 	bne.w	8009268 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80090fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009100:	2b00      	cmp	r3, #0
 8009102:	f000 8199 	beq.w	8009438 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800910c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009110:	429a      	cmp	r2, r3
 8009112:	f080 8191 	bcs.w	8009438 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800911c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0320 	and.w	r3, r3, #32
 800912e:	2b00      	cmp	r3, #0
 8009130:	f040 8087 	bne.w	8009242 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009148:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800914c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009150:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	461a      	mov	r2, r3
 800915a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800915e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009162:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800916a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800916e:	e841 2300 	strex	r3, r2, [r1]
 8009172:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009176:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1da      	bne.n	8009134 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	3308      	adds	r3, #8
 8009184:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800918e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009190:	f023 0301 	bic.w	r3, r3, #1
 8009194:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3308      	adds	r3, #8
 800919e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80091a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80091a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80091aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80091ae:	e841 2300 	strex	r3, r2, [r1]
 80091b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80091b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d1e1      	bne.n	800917e <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	3308      	adds	r3, #8
 80091c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80091ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	3308      	adds	r3, #8
 80091da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80091de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80091e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80091e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80091e6:	e841 2300 	strex	r3, r2, [r1]
 80091ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80091ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1e3      	bne.n	80091ba <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2220      	movs	r2, #32
 80091f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2200      	movs	r2, #0
 80091fe:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009206:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800920e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009210:	f023 0310 	bic.w	r3, r3, #16
 8009214:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	461a      	mov	r2, r3
 800921e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009222:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009224:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009226:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009228:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800922a:	e841 2300 	strex	r3, r2, [r1]
 800922e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009230:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1e4      	bne.n	8009200 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800923c:	4618      	mov	r0, r3
 800923e:	f7fb ff6e 	bl	800511e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2202      	movs	r2, #2
 8009246:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800924e:	687a      	ldr	r2, [r7, #4]
 8009250:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 800925a:	b292      	uxth	r2, r2
 800925c:	1a8a      	subs	r2, r1, r2
 800925e:	b292      	uxth	r2, r2
 8009260:	4611      	mov	r1, r2
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009266:	e0e7      	b.n	8009438 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009274:	b29b      	uxth	r3, r3
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009282:	b29b      	uxth	r3, r3
 8009284:	2b00      	cmp	r3, #0
 8009286:	f000 80d9 	beq.w	800943c <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800928a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 80d4 	beq.w	800943c <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800929a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800929c:	e853 3f00 	ldrex	r3, [r3]
 80092a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80092a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80092a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	461a      	mov	r2, r3
 80092b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80092b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80092b8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092be:	e841 2300 	strex	r3, r2, [r1]
 80092c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d1e4      	bne.n	8009294 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3308      	adds	r3, #8
 80092d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	e853 3f00 	ldrex	r3, [r3]
 80092d8:	623b      	str	r3, [r7, #32]
   return(result);
 80092da:	6a3b      	ldr	r3, [r7, #32]
 80092dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092e0:	f023 0301 	bic.w	r3, r3, #1
 80092e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3308      	adds	r3, #8
 80092ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80092f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80092f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092fa:	e841 2300 	strex	r3, r2, [r1]
 80092fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e1      	bne.n	80092ca <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2220      	movs	r2, #32
 800930a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	2200      	movs	r2, #0
 8009312:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009320:	693b      	ldr	r3, [r7, #16]
 8009322:	e853 3f00 	ldrex	r3, [r3]
 8009326:	60fb      	str	r3, [r7, #12]
   return(result);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f023 0310 	bic.w	r3, r3, #16
 800932e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	461a      	mov	r2, r3
 8009338:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800933c:	61fb      	str	r3, [r7, #28]
 800933e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009340:	69b9      	ldr	r1, [r7, #24]
 8009342:	69fa      	ldr	r2, [r7, #28]
 8009344:	e841 2300 	strex	r3, r2, [r1]
 8009348:	617b      	str	r3, [r7, #20]
   return(result);
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1e4      	bne.n	800931a <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	2202      	movs	r2, #2
 8009354:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800935c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8009360:	4611      	mov	r1, r2
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009366:	e069      	b.n	800943c <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800936c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d010      	beq.n	8009396 <HAL_UART_IRQHandler+0x5b6>
 8009374:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009378:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d00a      	beq.n	8009396 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009388:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009394:	e055      	b.n	8009442 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009396:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800939a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d014      	beq.n	80093cc <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80093a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d105      	bne.n	80093ba <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80093ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80093b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d008      	beq.n	80093cc <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d03e      	beq.n	8009440 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	4798      	blx	r3
    }
    return;
 80093ca:	e039      	b.n	8009440 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80093cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d009      	beq.n	80093ec <HAL_UART_IRQHandler+0x60c>
 80093d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d003      	beq.n	80093ec <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f001 f85b 	bl	800a4a0 <UART_EndTransmit_IT>
    return;
 80093ea:	e02a      	b.n	8009442 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80093ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80093f0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00b      	beq.n	8009410 <HAL_UART_IRQHandler+0x630>
 80093f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80093fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009400:	2b00      	cmp	r3, #0
 8009402:	d005      	beq.n	8009410 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800940e:	e018      	b.n	8009442 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009410:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009414:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009418:	2b00      	cmp	r3, #0
 800941a:	d012      	beq.n	8009442 <HAL_UART_IRQHandler+0x662>
 800941c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009420:	2b00      	cmp	r3, #0
 8009422:	da0e      	bge.n	8009442 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800942e:	e008      	b.n	8009442 <HAL_UART_IRQHandler+0x662>
      return;
 8009430:	bf00      	nop
 8009432:	e006      	b.n	8009442 <HAL_UART_IRQHandler+0x662>
    return;
 8009434:	bf00      	nop
 8009436:	e004      	b.n	8009442 <HAL_UART_IRQHandler+0x662>
      return;
 8009438:	bf00      	nop
 800943a:	e002      	b.n	8009442 <HAL_UART_IRQHandler+0x662>
      return;
 800943c:	bf00      	nop
 800943e:	e000      	b.n	8009442 <HAL_UART_IRQHandler+0x662>
    return;
 8009440:	bf00      	nop
  }
}
 8009442:	37e8      	adds	r7, #232	@ 0xe8
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800948c:	bf00      	nop
 800948e:	370c      	adds	r7, #12
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr

08009498 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009498:	b480      	push	{r7}
 800949a:	b083      	sub	sp, #12
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80094a0:	bf00      	nop
 80094a2:	370c      	adds	r7, #12
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr

080094ac <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80094ac:	b480      	push	{r7}
 80094ae:	b083      	sub	sp, #12
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80094b4:	bf00      	nop
 80094b6:	370c      	adds	r7, #12
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b083      	sub	sp, #12
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80094c8:	bf00      	nop
 80094ca:	370c      	adds	r7, #12
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	460b      	mov	r3, r1
 80094f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80094f4:	bf00      	nop
 80094f6:	370c      	adds	r7, #12
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8009500:	b480      	push	{r7}
 8009502:	b083      	sub	sp, #12
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
 8009508:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a09      	ldr	r2, [pc, #36]	@ (8009534 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d009      	beq.n	8009528 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	695b      	ldr	r3, [r3, #20]
 800951a:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	683a      	ldr	r2, [r7, #0]
 8009524:	430a      	orrs	r2, r1
 8009526:	615a      	str	r2, [r3, #20]
  }
}
 8009528:	bf00      	nop
 800952a:	370c      	adds	r7, #12
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr
 8009534:	40008000 	.word	0x40008000

08009538 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8009538:	b480      	push	{r7}
 800953a:	b083      	sub	sp, #12
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a18      	ldr	r2, [pc, #96]	@ (80095a8 <HAL_UART_EnableReceiverTimeout+0x70>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d027      	beq.n	800959a <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009550:	2b20      	cmp	r3, #32
 8009552:	d120      	bne.n	8009596 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800955a:	2b01      	cmp	r3, #1
 800955c:	d101      	bne.n	8009562 <HAL_UART_EnableReceiverTimeout+0x2a>
 800955e:	2302      	movs	r3, #2
 8009560:	e01c      	b.n	800959c <HAL_UART_EnableReceiverTimeout+0x64>
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2224      	movs	r2, #36	@ 0x24
 800956e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	685a      	ldr	r2, [r3, #4]
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8009580:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2220      	movs	r2, #32
 8009586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2200      	movs	r2, #0
 800958e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	e002      	b.n	800959c <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8009596:	2302      	movs	r3, #2
 8009598:	e000      	b.n	800959c <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800959a:	2301      	movs	r3, #1
  }
}
 800959c:	4618      	mov	r0, r3
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	40008000 	.word	0x40008000

080095ac <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
	...

080095c8 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a1a      	ldr	r2, [pc, #104]	@ (800963c <UART_InitCallbacksToDefault+0x74>)
 80095d4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a19      	ldr	r2, [pc, #100]	@ (8009640 <UART_InitCallbacksToDefault+0x78>)
 80095dc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a18      	ldr	r2, [pc, #96]	@ (8009644 <UART_InitCallbacksToDefault+0x7c>)
 80095e4:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a17      	ldr	r2, [pc, #92]	@ (8009648 <UART_InitCallbacksToDefault+0x80>)
 80095ec:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	4a16      	ldr	r2, [pc, #88]	@ (800964c <UART_InitCallbacksToDefault+0x84>)
 80095f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a15      	ldr	r2, [pc, #84]	@ (8009650 <UART_InitCallbacksToDefault+0x88>)
 80095fc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a14      	ldr	r2, [pc, #80]	@ (8009654 <UART_InitCallbacksToDefault+0x8c>)
 8009604:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a13      	ldr	r2, [pc, #76]	@ (8009658 <UART_InitCallbacksToDefault+0x90>)
 800960c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a12      	ldr	r2, [pc, #72]	@ (800965c <UART_InitCallbacksToDefault+0x94>)
 8009614:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a11      	ldr	r2, [pc, #68]	@ (8009660 <UART_InitCallbacksToDefault+0x98>)
 800961c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	4a10      	ldr	r2, [pc, #64]	@ (8009664 <UART_InitCallbacksToDefault+0x9c>)
 8009624:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a0f      	ldr	r2, [pc, #60]	@ (8009668 <UART_InitCallbacksToDefault+0xa0>)
 800962c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8009630:	bf00      	nop
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	0800945d 	.word	0x0800945d
 8009640:	08009449 	.word	0x08009449
 8009644:	08009485 	.word	0x08009485
 8009648:	08009471 	.word	0x08009471
 800964c:	08009499 	.word	0x08009499
 8009650:	080094ad 	.word	0x080094ad
 8009654:	080094c1 	.word	0x080094c1
 8009658:	080094d5 	.word	0x080094d5
 800965c:	0800a4fb 	.word	0x0800a4fb
 8009660:	0800a50f 	.word	0x0800a50f
 8009664:	0800a523 	.word	0x0800a523
 8009668:	080094e9 	.word	0x080094e9

0800966c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800966c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009670:	b08c      	sub	sp, #48	@ 0x30
 8009672:	af00      	add	r7, sp, #0
 8009674:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009676:	2300      	movs	r3, #0
 8009678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	689a      	ldr	r2, [r3, #8]
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	691b      	ldr	r3, [r3, #16]
 8009684:	431a      	orrs	r2, r3
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	695b      	ldr	r3, [r3, #20]
 800968a:	431a      	orrs	r2, r3
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	69db      	ldr	r3, [r3, #28]
 8009690:	4313      	orrs	r3, r2
 8009692:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009694:	697b      	ldr	r3, [r7, #20]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4baa      	ldr	r3, [pc, #680]	@ (8009944 <UART_SetConfig+0x2d8>)
 800969c:	4013      	ands	r3, r2
 800969e:	697a      	ldr	r2, [r7, #20]
 80096a0:	6812      	ldr	r2, [r2, #0]
 80096a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096a4:	430b      	orrs	r3, r1
 80096a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	430a      	orrs	r2, r1
 80096bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	699b      	ldr	r3, [r3, #24]
 80096c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a9f      	ldr	r2, [pc, #636]	@ (8009948 <UART_SetConfig+0x2dc>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d004      	beq.n	80096d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096d4:	4313      	orrs	r3, r2
 80096d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80096e2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80096e6:	697a      	ldr	r2, [r7, #20]
 80096e8:	6812      	ldr	r2, [r2, #0]
 80096ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80096ec:	430b      	orrs	r3, r1
 80096ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096f6:	f023 010f 	bic.w	r1, r3, #15
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	430a      	orrs	r2, r1
 8009704:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4a90      	ldr	r2, [pc, #576]	@ (800994c <UART_SetConfig+0x2e0>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d125      	bne.n	800975c <UART_SetConfig+0xf0>
 8009710:	4b8f      	ldr	r3, [pc, #572]	@ (8009950 <UART_SetConfig+0x2e4>)
 8009712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009716:	f003 0303 	and.w	r3, r3, #3
 800971a:	2b03      	cmp	r3, #3
 800971c:	d81a      	bhi.n	8009754 <UART_SetConfig+0xe8>
 800971e:	a201      	add	r2, pc, #4	@ (adr r2, 8009724 <UART_SetConfig+0xb8>)
 8009720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009724:	08009735 	.word	0x08009735
 8009728:	08009745 	.word	0x08009745
 800972c:	0800973d 	.word	0x0800973d
 8009730:	0800974d 	.word	0x0800974d
 8009734:	2301      	movs	r3, #1
 8009736:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800973a:	e116      	b.n	800996a <UART_SetConfig+0x2fe>
 800973c:	2302      	movs	r3, #2
 800973e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009742:	e112      	b.n	800996a <UART_SetConfig+0x2fe>
 8009744:	2304      	movs	r3, #4
 8009746:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800974a:	e10e      	b.n	800996a <UART_SetConfig+0x2fe>
 800974c:	2308      	movs	r3, #8
 800974e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009752:	e10a      	b.n	800996a <UART_SetConfig+0x2fe>
 8009754:	2310      	movs	r3, #16
 8009756:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800975a:	e106      	b.n	800996a <UART_SetConfig+0x2fe>
 800975c:	697b      	ldr	r3, [r7, #20]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a7c      	ldr	r2, [pc, #496]	@ (8009954 <UART_SetConfig+0x2e8>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d138      	bne.n	80097d8 <UART_SetConfig+0x16c>
 8009766:	4b7a      	ldr	r3, [pc, #488]	@ (8009950 <UART_SetConfig+0x2e4>)
 8009768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800976c:	f003 030c 	and.w	r3, r3, #12
 8009770:	2b0c      	cmp	r3, #12
 8009772:	d82d      	bhi.n	80097d0 <UART_SetConfig+0x164>
 8009774:	a201      	add	r2, pc, #4	@ (adr r2, 800977c <UART_SetConfig+0x110>)
 8009776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977a:	bf00      	nop
 800977c:	080097b1 	.word	0x080097b1
 8009780:	080097d1 	.word	0x080097d1
 8009784:	080097d1 	.word	0x080097d1
 8009788:	080097d1 	.word	0x080097d1
 800978c:	080097c1 	.word	0x080097c1
 8009790:	080097d1 	.word	0x080097d1
 8009794:	080097d1 	.word	0x080097d1
 8009798:	080097d1 	.word	0x080097d1
 800979c:	080097b9 	.word	0x080097b9
 80097a0:	080097d1 	.word	0x080097d1
 80097a4:	080097d1 	.word	0x080097d1
 80097a8:	080097d1 	.word	0x080097d1
 80097ac:	080097c9 	.word	0x080097c9
 80097b0:	2300      	movs	r3, #0
 80097b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097b6:	e0d8      	b.n	800996a <UART_SetConfig+0x2fe>
 80097b8:	2302      	movs	r3, #2
 80097ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097be:	e0d4      	b.n	800996a <UART_SetConfig+0x2fe>
 80097c0:	2304      	movs	r3, #4
 80097c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097c6:	e0d0      	b.n	800996a <UART_SetConfig+0x2fe>
 80097c8:	2308      	movs	r3, #8
 80097ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097ce:	e0cc      	b.n	800996a <UART_SetConfig+0x2fe>
 80097d0:	2310      	movs	r3, #16
 80097d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80097d6:	e0c8      	b.n	800996a <UART_SetConfig+0x2fe>
 80097d8:	697b      	ldr	r3, [r7, #20]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4a5e      	ldr	r2, [pc, #376]	@ (8009958 <UART_SetConfig+0x2ec>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d125      	bne.n	800982e <UART_SetConfig+0x1c2>
 80097e2:	4b5b      	ldr	r3, [pc, #364]	@ (8009950 <UART_SetConfig+0x2e4>)
 80097e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80097ec:	2b30      	cmp	r3, #48	@ 0x30
 80097ee:	d016      	beq.n	800981e <UART_SetConfig+0x1b2>
 80097f0:	2b30      	cmp	r3, #48	@ 0x30
 80097f2:	d818      	bhi.n	8009826 <UART_SetConfig+0x1ba>
 80097f4:	2b20      	cmp	r3, #32
 80097f6:	d00a      	beq.n	800980e <UART_SetConfig+0x1a2>
 80097f8:	2b20      	cmp	r3, #32
 80097fa:	d814      	bhi.n	8009826 <UART_SetConfig+0x1ba>
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d002      	beq.n	8009806 <UART_SetConfig+0x19a>
 8009800:	2b10      	cmp	r3, #16
 8009802:	d008      	beq.n	8009816 <UART_SetConfig+0x1aa>
 8009804:	e00f      	b.n	8009826 <UART_SetConfig+0x1ba>
 8009806:	2300      	movs	r3, #0
 8009808:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800980c:	e0ad      	b.n	800996a <UART_SetConfig+0x2fe>
 800980e:	2302      	movs	r3, #2
 8009810:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009814:	e0a9      	b.n	800996a <UART_SetConfig+0x2fe>
 8009816:	2304      	movs	r3, #4
 8009818:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800981c:	e0a5      	b.n	800996a <UART_SetConfig+0x2fe>
 800981e:	2308      	movs	r3, #8
 8009820:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009824:	e0a1      	b.n	800996a <UART_SetConfig+0x2fe>
 8009826:	2310      	movs	r3, #16
 8009828:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800982c:	e09d      	b.n	800996a <UART_SetConfig+0x2fe>
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a4a      	ldr	r2, [pc, #296]	@ (800995c <UART_SetConfig+0x2f0>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d125      	bne.n	8009884 <UART_SetConfig+0x218>
 8009838:	4b45      	ldr	r3, [pc, #276]	@ (8009950 <UART_SetConfig+0x2e4>)
 800983a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800983e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009842:	2bc0      	cmp	r3, #192	@ 0xc0
 8009844:	d016      	beq.n	8009874 <UART_SetConfig+0x208>
 8009846:	2bc0      	cmp	r3, #192	@ 0xc0
 8009848:	d818      	bhi.n	800987c <UART_SetConfig+0x210>
 800984a:	2b80      	cmp	r3, #128	@ 0x80
 800984c:	d00a      	beq.n	8009864 <UART_SetConfig+0x1f8>
 800984e:	2b80      	cmp	r3, #128	@ 0x80
 8009850:	d814      	bhi.n	800987c <UART_SetConfig+0x210>
 8009852:	2b00      	cmp	r3, #0
 8009854:	d002      	beq.n	800985c <UART_SetConfig+0x1f0>
 8009856:	2b40      	cmp	r3, #64	@ 0x40
 8009858:	d008      	beq.n	800986c <UART_SetConfig+0x200>
 800985a:	e00f      	b.n	800987c <UART_SetConfig+0x210>
 800985c:	2300      	movs	r3, #0
 800985e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009862:	e082      	b.n	800996a <UART_SetConfig+0x2fe>
 8009864:	2302      	movs	r3, #2
 8009866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800986a:	e07e      	b.n	800996a <UART_SetConfig+0x2fe>
 800986c:	2304      	movs	r3, #4
 800986e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009872:	e07a      	b.n	800996a <UART_SetConfig+0x2fe>
 8009874:	2308      	movs	r3, #8
 8009876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800987a:	e076      	b.n	800996a <UART_SetConfig+0x2fe>
 800987c:	2310      	movs	r3, #16
 800987e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009882:	e072      	b.n	800996a <UART_SetConfig+0x2fe>
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a35      	ldr	r2, [pc, #212]	@ (8009960 <UART_SetConfig+0x2f4>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d12a      	bne.n	80098e4 <UART_SetConfig+0x278>
 800988e:	4b30      	ldr	r3, [pc, #192]	@ (8009950 <UART_SetConfig+0x2e4>)
 8009890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009894:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009898:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800989c:	d01a      	beq.n	80098d4 <UART_SetConfig+0x268>
 800989e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098a2:	d81b      	bhi.n	80098dc <UART_SetConfig+0x270>
 80098a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098a8:	d00c      	beq.n	80098c4 <UART_SetConfig+0x258>
 80098aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ae:	d815      	bhi.n	80098dc <UART_SetConfig+0x270>
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d003      	beq.n	80098bc <UART_SetConfig+0x250>
 80098b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098b8:	d008      	beq.n	80098cc <UART_SetConfig+0x260>
 80098ba:	e00f      	b.n	80098dc <UART_SetConfig+0x270>
 80098bc:	2300      	movs	r3, #0
 80098be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098c2:	e052      	b.n	800996a <UART_SetConfig+0x2fe>
 80098c4:	2302      	movs	r3, #2
 80098c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098ca:	e04e      	b.n	800996a <UART_SetConfig+0x2fe>
 80098cc:	2304      	movs	r3, #4
 80098ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098d2:	e04a      	b.n	800996a <UART_SetConfig+0x2fe>
 80098d4:	2308      	movs	r3, #8
 80098d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098da:	e046      	b.n	800996a <UART_SetConfig+0x2fe>
 80098dc:	2310      	movs	r3, #16
 80098de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80098e2:	e042      	b.n	800996a <UART_SetConfig+0x2fe>
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a17      	ldr	r2, [pc, #92]	@ (8009948 <UART_SetConfig+0x2dc>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d13a      	bne.n	8009964 <UART_SetConfig+0x2f8>
 80098ee:	4b18      	ldr	r3, [pc, #96]	@ (8009950 <UART_SetConfig+0x2e4>)
 80098f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80098f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80098fc:	d01a      	beq.n	8009934 <UART_SetConfig+0x2c8>
 80098fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009902:	d81b      	bhi.n	800993c <UART_SetConfig+0x2d0>
 8009904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009908:	d00c      	beq.n	8009924 <UART_SetConfig+0x2b8>
 800990a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800990e:	d815      	bhi.n	800993c <UART_SetConfig+0x2d0>
 8009910:	2b00      	cmp	r3, #0
 8009912:	d003      	beq.n	800991c <UART_SetConfig+0x2b0>
 8009914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009918:	d008      	beq.n	800992c <UART_SetConfig+0x2c0>
 800991a:	e00f      	b.n	800993c <UART_SetConfig+0x2d0>
 800991c:	2300      	movs	r3, #0
 800991e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009922:	e022      	b.n	800996a <UART_SetConfig+0x2fe>
 8009924:	2302      	movs	r3, #2
 8009926:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800992a:	e01e      	b.n	800996a <UART_SetConfig+0x2fe>
 800992c:	2304      	movs	r3, #4
 800992e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009932:	e01a      	b.n	800996a <UART_SetConfig+0x2fe>
 8009934:	2308      	movs	r3, #8
 8009936:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800993a:	e016      	b.n	800996a <UART_SetConfig+0x2fe>
 800993c:	2310      	movs	r3, #16
 800993e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009942:	e012      	b.n	800996a <UART_SetConfig+0x2fe>
 8009944:	cfff69f3 	.word	0xcfff69f3
 8009948:	40008000 	.word	0x40008000
 800994c:	40013800 	.word	0x40013800
 8009950:	40021000 	.word	0x40021000
 8009954:	40004400 	.word	0x40004400
 8009958:	40004800 	.word	0x40004800
 800995c:	40004c00 	.word	0x40004c00
 8009960:	40005000 	.word	0x40005000
 8009964:	2310      	movs	r3, #16
 8009966:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4aae      	ldr	r2, [pc, #696]	@ (8009c28 <UART_SetConfig+0x5bc>)
 8009970:	4293      	cmp	r3, r2
 8009972:	f040 8097 	bne.w	8009aa4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009976:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800997a:	2b08      	cmp	r3, #8
 800997c:	d823      	bhi.n	80099c6 <UART_SetConfig+0x35a>
 800997e:	a201      	add	r2, pc, #4	@ (adr r2, 8009984 <UART_SetConfig+0x318>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	080099a9 	.word	0x080099a9
 8009988:	080099c7 	.word	0x080099c7
 800998c:	080099b1 	.word	0x080099b1
 8009990:	080099c7 	.word	0x080099c7
 8009994:	080099b7 	.word	0x080099b7
 8009998:	080099c7 	.word	0x080099c7
 800999c:	080099c7 	.word	0x080099c7
 80099a0:	080099c7 	.word	0x080099c7
 80099a4:	080099bf 	.word	0x080099bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099a8:	f7fc fd02 	bl	80063b0 <HAL_RCC_GetPCLK1Freq>
 80099ac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099ae:	e010      	b.n	80099d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099b0:	4b9e      	ldr	r3, [pc, #632]	@ (8009c2c <UART_SetConfig+0x5c0>)
 80099b2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099b4:	e00d      	b.n	80099d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099b6:	f7fc fc8d 	bl	80062d4 <HAL_RCC_GetSysClockFreq>
 80099ba:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80099bc:	e009      	b.n	80099d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80099c2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80099c4:	e005      	b.n	80099d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80099c6:	2300      	movs	r3, #0
 80099c8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80099ca:	2301      	movs	r3, #1
 80099cc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80099d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80099d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f000 8130 	beq.w	8009c3a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099de:	4a94      	ldr	r2, [pc, #592]	@ (8009c30 <UART_SetConfig+0x5c4>)
 80099e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099e4:	461a      	mov	r2, r3
 80099e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80099ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	685a      	ldr	r2, [r3, #4]
 80099f2:	4613      	mov	r3, r2
 80099f4:	005b      	lsls	r3, r3, #1
 80099f6:	4413      	add	r3, r2
 80099f8:	69ba      	ldr	r2, [r7, #24]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d305      	bcc.n	8009a0a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a04:	69ba      	ldr	r2, [r7, #24]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d903      	bls.n	8009a12 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009a10:	e113      	b.n	8009c3a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a14:	2200      	movs	r2, #0
 8009a16:	60bb      	str	r3, [r7, #8]
 8009a18:	60fa      	str	r2, [r7, #12]
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a1e:	4a84      	ldr	r2, [pc, #528]	@ (8009c30 <UART_SetConfig+0x5c4>)
 8009a20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	2200      	movs	r2, #0
 8009a28:	603b      	str	r3, [r7, #0]
 8009a2a:	607a      	str	r2, [r7, #4]
 8009a2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a34:	f7f7 f8de 	bl	8000bf4 <__aeabi_uldivmod>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	4610      	mov	r0, r2
 8009a3e:	4619      	mov	r1, r3
 8009a40:	f04f 0200 	mov.w	r2, #0
 8009a44:	f04f 0300 	mov.w	r3, #0
 8009a48:	020b      	lsls	r3, r1, #8
 8009a4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009a4e:	0202      	lsls	r2, r0, #8
 8009a50:	6979      	ldr	r1, [r7, #20]
 8009a52:	6849      	ldr	r1, [r1, #4]
 8009a54:	0849      	lsrs	r1, r1, #1
 8009a56:	2000      	movs	r0, #0
 8009a58:	460c      	mov	r4, r1
 8009a5a:	4605      	mov	r5, r0
 8009a5c:	eb12 0804 	adds.w	r8, r2, r4
 8009a60:	eb43 0905 	adc.w	r9, r3, r5
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	685b      	ldr	r3, [r3, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	469a      	mov	sl, r3
 8009a6c:	4693      	mov	fp, r2
 8009a6e:	4652      	mov	r2, sl
 8009a70:	465b      	mov	r3, fp
 8009a72:	4640      	mov	r0, r8
 8009a74:	4649      	mov	r1, r9
 8009a76:	f7f7 f8bd 	bl	8000bf4 <__aeabi_uldivmod>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4613      	mov	r3, r2
 8009a80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a82:	6a3b      	ldr	r3, [r7, #32]
 8009a84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009a88:	d308      	bcc.n	8009a9c <UART_SetConfig+0x430>
 8009a8a:	6a3b      	ldr	r3, [r7, #32]
 8009a8c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a90:	d204      	bcs.n	8009a9c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	6a3a      	ldr	r2, [r7, #32]
 8009a98:	60da      	str	r2, [r3, #12]
 8009a9a:	e0ce      	b.n	8009c3a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009aa2:	e0ca      	b.n	8009c3a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	69db      	ldr	r3, [r3, #28]
 8009aa8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009aac:	d166      	bne.n	8009b7c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009aae:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ab2:	2b08      	cmp	r3, #8
 8009ab4:	d827      	bhi.n	8009b06 <UART_SetConfig+0x49a>
 8009ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8009abc <UART_SetConfig+0x450>)
 8009ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009abc:	08009ae1 	.word	0x08009ae1
 8009ac0:	08009ae9 	.word	0x08009ae9
 8009ac4:	08009af1 	.word	0x08009af1
 8009ac8:	08009b07 	.word	0x08009b07
 8009acc:	08009af7 	.word	0x08009af7
 8009ad0:	08009b07 	.word	0x08009b07
 8009ad4:	08009b07 	.word	0x08009b07
 8009ad8:	08009b07 	.word	0x08009b07
 8009adc:	08009aff 	.word	0x08009aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ae0:	f7fc fc66 	bl	80063b0 <HAL_RCC_GetPCLK1Freq>
 8009ae4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009ae6:	e014      	b.n	8009b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009ae8:	f7fc fc78 	bl	80063dc <HAL_RCC_GetPCLK2Freq>
 8009aec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009aee:	e010      	b.n	8009b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009af0:	4b4e      	ldr	r3, [pc, #312]	@ (8009c2c <UART_SetConfig+0x5c0>)
 8009af2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009af4:	e00d      	b.n	8009b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009af6:	f7fc fbed 	bl	80062d4 <HAL_RCC_GetSysClockFreq>
 8009afa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009afc:	e009      	b.n	8009b12 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009b02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009b04:	e005      	b.n	8009b12 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8009b06:	2300      	movs	r3, #0
 8009b08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	f000 8090 	beq.w	8009c3a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b1e:	4a44      	ldr	r2, [pc, #272]	@ (8009c30 <UART_SetConfig+0x5c4>)
 8009b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b24:	461a      	mov	r2, r3
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8009b2c:	005a      	lsls	r2, r3, #1
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	085b      	lsrs	r3, r3, #1
 8009b34:	441a      	add	r2, r3
 8009b36:	697b      	ldr	r3, [r7, #20]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b3e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b40:	6a3b      	ldr	r3, [r7, #32]
 8009b42:	2b0f      	cmp	r3, #15
 8009b44:	d916      	bls.n	8009b74 <UART_SetConfig+0x508>
 8009b46:	6a3b      	ldr	r3, [r7, #32]
 8009b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b4c:	d212      	bcs.n	8009b74 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	f023 030f 	bic.w	r3, r3, #15
 8009b56:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009b58:	6a3b      	ldr	r3, [r7, #32]
 8009b5a:	085b      	lsrs	r3, r3, #1
 8009b5c:	b29b      	uxth	r3, r3
 8009b5e:	f003 0307 	and.w	r3, r3, #7
 8009b62:	b29a      	uxth	r2, r3
 8009b64:	8bfb      	ldrh	r3, [r7, #30]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	8bfa      	ldrh	r2, [r7, #30]
 8009b70:	60da      	str	r2, [r3, #12]
 8009b72:	e062      	b.n	8009c3a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009b7a:	e05e      	b.n	8009c3a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009b80:	2b08      	cmp	r3, #8
 8009b82:	d828      	bhi.n	8009bd6 <UART_SetConfig+0x56a>
 8009b84:	a201      	add	r2, pc, #4	@ (adr r2, 8009b8c <UART_SetConfig+0x520>)
 8009b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b8a:	bf00      	nop
 8009b8c:	08009bb1 	.word	0x08009bb1
 8009b90:	08009bb9 	.word	0x08009bb9
 8009b94:	08009bc1 	.word	0x08009bc1
 8009b98:	08009bd7 	.word	0x08009bd7
 8009b9c:	08009bc7 	.word	0x08009bc7
 8009ba0:	08009bd7 	.word	0x08009bd7
 8009ba4:	08009bd7 	.word	0x08009bd7
 8009ba8:	08009bd7 	.word	0x08009bd7
 8009bac:	08009bcf 	.word	0x08009bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bb0:	f7fc fbfe 	bl	80063b0 <HAL_RCC_GetPCLK1Freq>
 8009bb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bb6:	e014      	b.n	8009be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bb8:	f7fc fc10 	bl	80063dc <HAL_RCC_GetPCLK2Freq>
 8009bbc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bbe:	e010      	b.n	8009be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8009c2c <UART_SetConfig+0x5c0>)
 8009bc2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bc4:	e00d      	b.n	8009be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009bc6:	f7fc fb85 	bl	80062d4 <HAL_RCC_GetSysClockFreq>
 8009bca:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009bcc:	e009      	b.n	8009be2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009bd2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009bd4:	e005      	b.n	8009be2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009be0:	bf00      	nop
    }

    if (pclk != 0U)
 8009be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d028      	beq.n	8009c3a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009bec:	4a10      	ldr	r2, [pc, #64]	@ (8009c30 <UART_SetConfig+0x5c4>)
 8009bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bf6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	085b      	lsrs	r3, r3, #1
 8009c00:	441a      	add	r2, r3
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c0a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	2b0f      	cmp	r3, #15
 8009c10:	d910      	bls.n	8009c34 <UART_SetConfig+0x5c8>
 8009c12:	6a3b      	ldr	r3, [r7, #32]
 8009c14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c18:	d20c      	bcs.n	8009c34 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	b29a      	uxth	r2, r3
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	60da      	str	r2, [r3, #12]
 8009c24:	e009      	b.n	8009c3a <UART_SetConfig+0x5ce>
 8009c26:	bf00      	nop
 8009c28:	40008000 	.word	0x40008000
 8009c2c:	00f42400 	.word	0x00f42400
 8009c30:	0800a7c4 	.word	0x0800a7c4
      }
      else
      {
        ret = HAL_ERROR;
 8009c34:	2301      	movs	r3, #1
 8009c36:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2200      	movs	r2, #0
 8009c54:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009c56:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3730      	adds	r7, #48	@ 0x30
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b083      	sub	sp, #12
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c70:	f003 0308 	and.w	r3, r3, #8
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00a      	beq.n	8009c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	430a      	orrs	r2, r1
 8009c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c92:	f003 0301 	and.w	r3, r3, #1
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00a      	beq.n	8009cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	685b      	ldr	r3, [r3, #4]
 8009ca0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	430a      	orrs	r2, r1
 8009cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cb4:	f003 0302 	and.w	r3, r3, #2
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d00a      	beq.n	8009cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	430a      	orrs	r2, r1
 8009cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cd6:	f003 0304 	and.w	r3, r3, #4
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00a      	beq.n	8009cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	685b      	ldr	r3, [r3, #4]
 8009ce4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	430a      	orrs	r2, r1
 8009cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009cf8:	f003 0310 	and.w	r3, r3, #16
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d00a      	beq.n	8009d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	430a      	orrs	r2, r1
 8009d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d1a:	f003 0320 	and.w	r3, r3, #32
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d00a      	beq.n	8009d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	430a      	orrs	r2, r1
 8009d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d01a      	beq.n	8009d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	430a      	orrs	r2, r1
 8009d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d62:	d10a      	bne.n	8009d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	430a      	orrs	r2, r1
 8009d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d00a      	beq.n	8009d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	430a      	orrs	r2, r1
 8009d9a:	605a      	str	r2, [r3, #4]
  }
}
 8009d9c:	bf00      	nop
 8009d9e:	370c      	adds	r7, #12
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b098      	sub	sp, #96	@ 0x60
 8009dac:	af02      	add	r7, sp, #8
 8009dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2200      	movs	r2, #0
 8009db4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009db8:	f7f9 f950 	bl	800305c <HAL_GetTick>
 8009dbc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f003 0308 	and.w	r3, r3, #8
 8009dc8:	2b08      	cmp	r3, #8
 8009dca:	d12f      	bne.n	8009e2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009dcc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009dd0:	9300      	str	r3, [sp, #0]
 8009dd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f88e 	bl	8009efc <UART_WaitOnFlagUntilTimeout>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d022      	beq.n	8009e2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dee:	e853 3f00 	ldrex	r3, [r3]
 8009df2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009df6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009dfa:	653b      	str	r3, [r7, #80]	@ 0x50
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	461a      	mov	r2, r3
 8009e02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e0c:	e841 2300 	strex	r3, r2, [r1]
 8009e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1e6      	bne.n	8009de6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2220      	movs	r2, #32
 8009e1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e063      	b.n	8009ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	f003 0304 	and.w	r3, r3, #4
 8009e36:	2b04      	cmp	r3, #4
 8009e38:	d149      	bne.n	8009ece <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009e3a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009e42:	2200      	movs	r2, #0
 8009e44:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f857 	bl	8009efc <UART_WaitOnFlagUntilTimeout>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d03c      	beq.n	8009ece <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e5c:	e853 3f00 	ldrex	r3, [r3]
 8009e60:	623b      	str	r3, [r7, #32]
   return(result);
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	461a      	mov	r2, r3
 8009e70:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e72:	633b      	str	r3, [r7, #48]	@ 0x30
 8009e74:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e7a:	e841 2300 	strex	r3, r2, [r1]
 8009e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e6      	bne.n	8009e54 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	3308      	adds	r3, #8
 8009e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e8e:	693b      	ldr	r3, [r7, #16]
 8009e90:	e853 3f00 	ldrex	r3, [r3]
 8009e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	f023 0301 	bic.w	r3, r3, #1
 8009e9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	3308      	adds	r3, #8
 8009ea4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ea6:	61fa      	str	r2, [r7, #28]
 8009ea8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eaa:	69b9      	ldr	r1, [r7, #24]
 8009eac:	69fa      	ldr	r2, [r7, #28]
 8009eae:	e841 2300 	strex	r3, r2, [r1]
 8009eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1e5      	bne.n	8009e86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2220      	movs	r2, #32
 8009ebe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009eca:	2303      	movs	r3, #3
 8009ecc:	e012      	b.n	8009ef4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2220      	movs	r2, #32
 8009ed2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2220      	movs	r2, #32
 8009eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3758      	adds	r7, #88	@ 0x58
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	60b9      	str	r1, [r7, #8]
 8009f06:	603b      	str	r3, [r7, #0]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009f0c:	e04f      	b.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f0e:	69bb      	ldr	r3, [r7, #24]
 8009f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f14:	d04b      	beq.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f16:	f7f9 f8a1 	bl	800305c <HAL_GetTick>
 8009f1a:	4602      	mov	r2, r0
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	1ad3      	subs	r3, r2, r3
 8009f20:	69ba      	ldr	r2, [r7, #24]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d302      	bcc.n	8009f2c <UART_WaitOnFlagUntilTimeout+0x30>
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d101      	bne.n	8009f30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	e04e      	b.n	8009fce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0304 	and.w	r3, r3, #4
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d037      	beq.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	2b80      	cmp	r3, #128	@ 0x80
 8009f42:	d034      	beq.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	2b40      	cmp	r3, #64	@ 0x40
 8009f48:	d031      	beq.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	69db      	ldr	r3, [r3, #28]
 8009f50:	f003 0308 	and.w	r3, r3, #8
 8009f54:	2b08      	cmp	r3, #8
 8009f56:	d110      	bne.n	8009f7a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2208      	movs	r2, #8
 8009f5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 f920 	bl	800a1a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	2208      	movs	r2, #8
 8009f6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2200      	movs	r2, #0
 8009f72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e029      	b.n	8009fce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	69db      	ldr	r3, [r3, #28]
 8009f80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009f84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f88:	d111      	bne.n	8009fae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009f92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009f94:	68f8      	ldr	r0, [r7, #12]
 8009f96:	f000 f906 	bl	800a1a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2220      	movs	r2, #32
 8009f9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009faa:	2303      	movs	r3, #3
 8009fac:	e00f      	b.n	8009fce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	69da      	ldr	r2, [r3, #28]
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	4013      	ands	r3, r2
 8009fb8:	68ba      	ldr	r2, [r7, #8]
 8009fba:	429a      	cmp	r2, r3
 8009fbc:	bf0c      	ite	eq
 8009fbe:	2301      	moveq	r3, #1
 8009fc0:	2300      	movne	r3, #0
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	461a      	mov	r2, r3
 8009fc6:	79fb      	ldrb	r3, [r7, #7]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d0a0      	beq.n	8009f0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009fcc:	2300      	movs	r3, #0
}
 8009fce:	4618      	mov	r0, r3
 8009fd0:	3710      	adds	r7, #16
 8009fd2:	46bd      	mov	sp, r7
 8009fd4:	bd80      	pop	{r7, pc}
	...

08009fd8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b096      	sub	sp, #88	@ 0x58
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	4613      	mov	r3, r2
 8009fe4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	68ba      	ldr	r2, [r7, #8]
 8009fea:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	88fa      	ldrh	r2, [r7, #6]
 8009ff0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2222      	movs	r2, #34	@ 0x22
 800a000:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d02d      	beq.n	800a06a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a014:	4a40      	ldr	r2, [pc, #256]	@ (800a118 <UART_Start_Receive_DMA+0x140>)
 800a016:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a01e:	4a3f      	ldr	r2, [pc, #252]	@ (800a11c <UART_Start_Receive_DMA+0x144>)
 800a020:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a028:	4a3d      	ldr	r2, [pc, #244]	@ (800a120 <UART_Start_Receive_DMA+0x148>)
 800a02a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a032:	2200      	movs	r2, #0
 800a034:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	3324      	adds	r3, #36	@ 0x24
 800a042:	4619      	mov	r1, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a048:	461a      	mov	r2, r3
 800a04a:	88fb      	ldrh	r3, [r7, #6]
 800a04c:	f7fa ffec 	bl	8005028 <HAL_DMA_Start_IT>
 800a050:	4603      	mov	r3, r0
 800a052:	2b00      	cmp	r3, #0
 800a054:	d009      	beq.n	800a06a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2210      	movs	r2, #16
 800a05a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2220      	movs	r2, #32
 800a062:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	e051      	b.n	800a10e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d018      	beq.n	800a0a4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a07a:	e853 3f00 	ldrex	r3, [r3]
 800a07e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a082:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a086:	657b      	str	r3, [r7, #84]	@ 0x54
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a090:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a092:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a094:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a096:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a098:	e841 2300 	strex	r3, r2, [r1]
 800a09c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800a09e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d1e6      	bne.n	800a072 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0ae:	e853 3f00 	ldrex	r3, [r3]
 800a0b2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a0b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b6:	f043 0301 	orr.w	r3, r3, #1
 800a0ba:	653b      	str	r3, [r7, #80]	@ 0x50
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3308      	adds	r3, #8
 800a0c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a0c4:	637a      	str	r2, [r7, #52]	@ 0x34
 800a0c6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a0ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0cc:	e841 2300 	strex	r3, r2, [r1]
 800a0d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800a0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d1e5      	bne.n	800a0a4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	3308      	adds	r3, #8
 800a0de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	e853 3f00 	ldrex	r3, [r3]
 800a0e6:	613b      	str	r3, [r7, #16]
   return(result);
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	3308      	adds	r3, #8
 800a0f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a0f8:	623a      	str	r2, [r7, #32]
 800a0fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0fc:	69f9      	ldr	r1, [r7, #28]
 800a0fe:	6a3a      	ldr	r2, [r7, #32]
 800a100:	e841 2300 	strex	r3, r2, [r1]
 800a104:	61bb      	str	r3, [r7, #24]
   return(result);
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1e5      	bne.n	800a0d8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3758      	adds	r7, #88	@ 0x58
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	0800a273 	.word	0x0800a273
 800a11c:	0800a3a7 	.word	0x0800a3a7
 800a120:	0800a3ed 	.word	0x0800a3ed

0800a124 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a124:	b480      	push	{r7}
 800a126:	b08f      	sub	sp, #60	@ 0x3c
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	e853 3f00 	ldrex	r3, [r3]
 800a138:	61fb      	str	r3, [r7, #28]
   return(result);
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a140:	637b      	str	r3, [r7, #52]	@ 0x34
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	461a      	mov	r2, r3
 800a148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a14a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a14c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a14e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a152:	e841 2300 	strex	r3, r2, [r1]
 800a156:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d1e6      	bne.n	800a12c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	3308      	adds	r3, #8
 800a164:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	e853 3f00 	ldrex	r3, [r3]
 800a16c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800a174:	633b      	str	r3, [r7, #48]	@ 0x30
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	3308      	adds	r3, #8
 800a17c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a17e:	61ba      	str	r2, [r7, #24]
 800a180:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	6979      	ldr	r1, [r7, #20]
 800a184:	69ba      	ldr	r2, [r7, #24]
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	613b      	str	r3, [r7, #16]
   return(result);
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e5      	bne.n	800a15e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2220      	movs	r2, #32
 800a196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800a19a:	bf00      	nop
 800a19c:	373c      	adds	r7, #60	@ 0x3c
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr

0800a1a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1a6:	b480      	push	{r7}
 800a1a8:	b095      	sub	sp, #84	@ 0x54
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b6:	e853 3f00 	ldrex	r3, [r3]
 800a1ba:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	461a      	mov	r2, r3
 800a1ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1cc:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1ce:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1d2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1d4:	e841 2300 	strex	r3, r2, [r1]
 800a1d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d1e6      	bne.n	800a1ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3308      	adds	r3, #8
 800a1e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1e8:	6a3b      	ldr	r3, [r7, #32]
 800a1ea:	e853 3f00 	ldrex	r3, [r3]
 800a1ee:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1f0:	69fb      	ldr	r3, [r7, #28]
 800a1f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a1f6:	f023 0301 	bic.w	r3, r3, #1
 800a1fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	3308      	adds	r3, #8
 800a202:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a204:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a206:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a20a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a20c:	e841 2300 	strex	r3, r2, [r1]
 800a210:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a214:	2b00      	cmp	r3, #0
 800a216:	d1e3      	bne.n	800a1e0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d118      	bne.n	800a252 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	e853 3f00 	ldrex	r3, [r3]
 800a22c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	f023 0310 	bic.w	r3, r3, #16
 800a234:	647b      	str	r3, [r7, #68]	@ 0x44
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	461a      	mov	r2, r3
 800a23c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a23e:	61bb      	str	r3, [r7, #24]
 800a240:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a242:	6979      	ldr	r1, [r7, #20]
 800a244:	69ba      	ldr	r2, [r7, #24]
 800a246:	e841 2300 	strex	r3, r2, [r1]
 800a24a:	613b      	str	r3, [r7, #16]
   return(result);
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d1e6      	bne.n	800a220 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2220      	movs	r2, #32
 800a256:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a266:	bf00      	nop
 800a268:	3754      	adds	r7, #84	@ 0x54
 800a26a:	46bd      	mov	sp, r7
 800a26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a270:	4770      	bx	lr

0800a272 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a272:	b580      	push	{r7, lr}
 800a274:	b09c      	sub	sp, #112	@ 0x70
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a27e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f003 0320 	and.w	r3, r3, #32
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d171      	bne.n	800a372 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800a28e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a290:	2200      	movs	r2, #0
 800a292:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a296:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a29e:	e853 3f00 	ldrex	r3, [r3]
 800a2a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a2a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a2a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	461a      	mov	r2, r3
 800a2b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a2b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a2b6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a2ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a2bc:	e841 2300 	strex	r3, r2, [r1]
 800a2c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a2c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d1e6      	bne.n	800a296 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3308      	adds	r3, #8
 800a2ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d2:	e853 3f00 	ldrex	r3, [r3]
 800a2d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a2d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2da:	f023 0301 	bic.w	r3, r3, #1
 800a2de:	667b      	str	r3, [r7, #100]	@ 0x64
 800a2e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800a2e8:	647a      	str	r2, [r7, #68]	@ 0x44
 800a2ea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a2ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a2f0:	e841 2300 	strex	r3, r2, [r1]
 800a2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a2f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1e5      	bne.n	800a2c8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a2fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	3308      	adds	r3, #8
 800a302:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a306:	e853 3f00 	ldrex	r3, [r3]
 800a30a:	623b      	str	r3, [r7, #32]
   return(result);
 800a30c:	6a3b      	ldr	r3, [r7, #32]
 800a30e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a312:	663b      	str	r3, [r7, #96]	@ 0x60
 800a314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	3308      	adds	r3, #8
 800a31a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a31c:	633a      	str	r2, [r7, #48]	@ 0x30
 800a31e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a320:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a324:	e841 2300 	strex	r3, r2, [r1]
 800a328:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1e5      	bne.n	800a2fc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a330:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a332:	2220      	movs	r2, #32
 800a334:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a338:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a33a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d118      	bne.n	800a372 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a340:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a346:	693b      	ldr	r3, [r7, #16]
 800a348:	e853 3f00 	ldrex	r3, [r3]
 800a34c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	f023 0310 	bic.w	r3, r3, #16
 800a354:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a356:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	461a      	mov	r2, r3
 800a35c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a35e:	61fb      	str	r3, [r7, #28]
 800a360:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a362:	69b9      	ldr	r1, [r7, #24]
 800a364:	69fa      	ldr	r2, [r7, #28]
 800a366:	e841 2300 	strex	r3, r2, [r1]
 800a36a:	617b      	str	r3, [r7, #20]
   return(result);
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1e6      	bne.n	800a340 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a374:	2200      	movs	r2, #0
 800a376:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a37a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d109      	bne.n	800a394 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800a380:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a382:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a386:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a388:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a38c:	4611      	mov	r1, r2
 800a38e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a390:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a392:	e004      	b.n	800a39e <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 800a394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800a39a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a39c:	4798      	blx	r3
}
 800a39e:	bf00      	nop
 800a3a0:	3770      	adds	r7, #112	@ 0x70
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b084      	sub	sp, #16
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d10b      	bne.n	800a3da <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800a3c8:	68fa      	ldr	r2, [r7, #12]
 800a3ca:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 800a3ce:	0852      	lsrs	r2, r2, #1
 800a3d0:	b292      	uxth	r2, r2
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	68f8      	ldr	r0, [r7, #12]
 800a3d6:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a3d8:	e004      	b.n	800a3e4 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a3e0:	68f8      	ldr	r0, [r7, #12]
 800a3e2:	4798      	blx	r3
}
 800a3e4:	bf00      	nop
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b086      	sub	sp, #24
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3f8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a400:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a408:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	689b      	ldr	r3, [r3, #8]
 800a410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a414:	2b80      	cmp	r3, #128	@ 0x80
 800a416:	d109      	bne.n	800a42c <UART_DMAError+0x40>
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	2b21      	cmp	r3, #33	@ 0x21
 800a41c:	d106      	bne.n	800a42c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	2200      	movs	r2, #0
 800a422:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800a426:	6978      	ldr	r0, [r7, #20]
 800a428:	f7ff fe7c 	bl	800a124 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a436:	2b40      	cmp	r3, #64	@ 0x40
 800a438:	d109      	bne.n	800a44e <UART_DMAError+0x62>
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2b22      	cmp	r3, #34	@ 0x22
 800a43e:	d106      	bne.n	800a44e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	2200      	movs	r2, #0
 800a444:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a448:	6978      	ldr	r0, [r7, #20]
 800a44a:	f7ff feac 	bl	800a1a6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a454:	f043 0210 	orr.w	r2, r3, #16
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a45e:	697b      	ldr	r3, [r7, #20]
 800a460:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a464:	6978      	ldr	r0, [r7, #20]
 800a466:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a468:	bf00      	nop
 800a46a:	3718      	adds	r7, #24
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a47c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a494:	68f8      	ldr	r0, [r7, #12]
 800a496:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a498:	bf00      	nop
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b088      	sub	sp, #32
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	e853 3f00 	ldrex	r3, [r3]
 800a4b4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4bc:	61fb      	str	r3, [r7, #28]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	461a      	mov	r2, r3
 800a4c4:	69fb      	ldr	r3, [r7, #28]
 800a4c6:	61bb      	str	r3, [r7, #24]
 800a4c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ca:	6979      	ldr	r1, [r7, #20]
 800a4cc:	69ba      	ldr	r2, [r7, #24]
 800a4ce:	e841 2300 	strex	r3, r2, [r1]
 800a4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1e6      	bne.n	800a4a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2220      	movs	r2, #32
 800a4de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a4f2:	bf00      	nop
 800a4f4:	3720      	adds	r7, #32
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b083      	sub	sp, #12
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a502:	bf00      	nop
 800a504:	370c      	adds	r7, #12
 800a506:	46bd      	mov	sp, r7
 800a508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50c:	4770      	bx	lr

0800a50e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a50e:	b480      	push	{r7}
 800a510:	b083      	sub	sp, #12
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a516:	bf00      	nop
 800a518:	370c      	adds	r7, #12
 800a51a:	46bd      	mov	sp, r7
 800a51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a520:	4770      	bx	lr

0800a522 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a522:	b480      	push	{r7}
 800a524:	b083      	sub	sp, #12
 800a526:	af00      	add	r7, sp, #0
 800a528:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a52a:	bf00      	nop
 800a52c:	370c      	adds	r7, #12
 800a52e:	46bd      	mov	sp, r7
 800a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a534:	4770      	bx	lr

0800a536 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a536:	b480      	push	{r7}
 800a538:	b085      	sub	sp, #20
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a544:	2b01      	cmp	r3, #1
 800a546:	d101      	bne.n	800a54c <HAL_UARTEx_DisableFifoMode+0x16>
 800a548:	2302      	movs	r3, #2
 800a54a:	e027      	b.n	800a59c <HAL_UARTEx_DisableFifoMode+0x66>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2224      	movs	r2, #36	@ 0x24
 800a558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f022 0201 	bic.w	r2, r2, #1
 800a572:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a57a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68fa      	ldr	r2, [r7, #12]
 800a588:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2220      	movs	r2, #32
 800a58e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3714      	adds	r7, #20
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b084      	sub	sp, #16
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d101      	bne.n	800a5c0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a5bc:	2302      	movs	r3, #2
 800a5be:	e02d      	b.n	800a61c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2224      	movs	r2, #36	@ 0x24
 800a5cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f022 0201 	bic.w	r2, r2, #1
 800a5e6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	689b      	ldr	r3, [r3, #8]
 800a5ee:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	683a      	ldr	r2, [r7, #0]
 800a5f8:	430a      	orrs	r2, r1
 800a5fa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f84f 	bl	800a6a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68fa      	ldr	r2, [r7, #12]
 800a608:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2200      	movs	r2, #0
 800a616:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a634:	2b01      	cmp	r3, #1
 800a636:	d101      	bne.n	800a63c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a638:	2302      	movs	r3, #2
 800a63a:	e02d      	b.n	800a698 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2224      	movs	r2, #36	@ 0x24
 800a648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f022 0201 	bic.w	r2, r2, #1
 800a662:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	689b      	ldr	r3, [r3, #8]
 800a66a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	683a      	ldr	r2, [r7, #0]
 800a674:	430a      	orrs	r2, r1
 800a676:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f811 	bl	800a6a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2220      	movs	r2, #32
 800a68a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d108      	bne.n	800a6c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a6c0:	e031      	b.n	800a726 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a6c2:	2308      	movs	r3, #8
 800a6c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a6c6:	2308      	movs	r3, #8
 800a6c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	689b      	ldr	r3, [r3, #8]
 800a6d0:	0e5b      	lsrs	r3, r3, #25
 800a6d2:	b2db      	uxtb	r3, r3
 800a6d4:	f003 0307 	and.w	r3, r3, #7
 800a6d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	689b      	ldr	r3, [r3, #8]
 800a6e0:	0f5b      	lsrs	r3, r3, #29
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	f003 0307 	and.w	r3, r3, #7
 800a6e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6ea:	7bbb      	ldrb	r3, [r7, #14]
 800a6ec:	7b3a      	ldrb	r2, [r7, #12]
 800a6ee:	4911      	ldr	r1, [pc, #68]	@ (800a734 <UARTEx_SetNbDataToProcess+0x94>)
 800a6f0:	5c8a      	ldrb	r2, [r1, r2]
 800a6f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a6f6:	7b3a      	ldrb	r2, [r7, #12]
 800a6f8:	490f      	ldr	r1, [pc, #60]	@ (800a738 <UARTEx_SetNbDataToProcess+0x98>)
 800a6fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a6fc:	fb93 f3f2 	sdiv	r3, r3, r2
 800a700:	b29a      	uxth	r2, r3
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a708:	7bfb      	ldrb	r3, [r7, #15]
 800a70a:	7b7a      	ldrb	r2, [r7, #13]
 800a70c:	4909      	ldr	r1, [pc, #36]	@ (800a734 <UARTEx_SetNbDataToProcess+0x94>)
 800a70e:	5c8a      	ldrb	r2, [r1, r2]
 800a710:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a714:	7b7a      	ldrb	r2, [r7, #13]
 800a716:	4908      	ldr	r1, [pc, #32]	@ (800a738 <UARTEx_SetNbDataToProcess+0x98>)
 800a718:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a71a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a71e:	b29a      	uxth	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a726:	bf00      	nop
 800a728:	3714      	adds	r7, #20
 800a72a:	46bd      	mov	sp, r7
 800a72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a730:	4770      	bx	lr
 800a732:	bf00      	nop
 800a734:	0800a7dc 	.word	0x0800a7dc
 800a738:	0800a7e4 	.word	0x0800a7e4

0800a73c <memset>:
 800a73c:	4402      	add	r2, r0
 800a73e:	4603      	mov	r3, r0
 800a740:	4293      	cmp	r3, r2
 800a742:	d100      	bne.n	800a746 <memset+0xa>
 800a744:	4770      	bx	lr
 800a746:	f803 1b01 	strb.w	r1, [r3], #1
 800a74a:	e7f9      	b.n	800a740 <memset+0x4>

0800a74c <__libc_init_array>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	4d0d      	ldr	r5, [pc, #52]	@ (800a784 <__libc_init_array+0x38>)
 800a750:	4c0d      	ldr	r4, [pc, #52]	@ (800a788 <__libc_init_array+0x3c>)
 800a752:	1b64      	subs	r4, r4, r5
 800a754:	10a4      	asrs	r4, r4, #2
 800a756:	2600      	movs	r6, #0
 800a758:	42a6      	cmp	r6, r4
 800a75a:	d109      	bne.n	800a770 <__libc_init_array+0x24>
 800a75c:	4d0b      	ldr	r5, [pc, #44]	@ (800a78c <__libc_init_array+0x40>)
 800a75e:	4c0c      	ldr	r4, [pc, #48]	@ (800a790 <__libc_init_array+0x44>)
 800a760:	f000 f818 	bl	800a794 <_init>
 800a764:	1b64      	subs	r4, r4, r5
 800a766:	10a4      	asrs	r4, r4, #2
 800a768:	2600      	movs	r6, #0
 800a76a:	42a6      	cmp	r6, r4
 800a76c:	d105      	bne.n	800a77a <__libc_init_array+0x2e>
 800a76e:	bd70      	pop	{r4, r5, r6, pc}
 800a770:	f855 3b04 	ldr.w	r3, [r5], #4
 800a774:	4798      	blx	r3
 800a776:	3601      	adds	r6, #1
 800a778:	e7ee      	b.n	800a758 <__libc_init_array+0xc>
 800a77a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a77e:	4798      	blx	r3
 800a780:	3601      	adds	r6, #1
 800a782:	e7f2      	b.n	800a76a <__libc_init_array+0x1e>
 800a784:	0800a7f4 	.word	0x0800a7f4
 800a788:	0800a7f4 	.word	0x0800a7f4
 800a78c:	0800a7f4 	.word	0x0800a7f4
 800a790:	0800a7f8 	.word	0x0800a7f8

0800a794 <_init>:
 800a794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a796:	bf00      	nop
 800a798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a79a:	bc08      	pop	{r3}
 800a79c:	469e      	mov	lr, r3
 800a79e:	4770      	bx	lr

0800a7a0 <_fini>:
 800a7a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a2:	bf00      	nop
 800a7a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7a6:	bc08      	pop	{r3}
 800a7a8:	469e      	mov	lr, r3
 800a7aa:	4770      	bx	lr
